<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Modbus RTU (Example of load cell module)</title>
    <url>/2025/09/23/modbusNotesLoadCell/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="1-Frame-structure-RTU"><a href="#1-Frame-structure-RTU" class="headerlink" title="1) Frame structure (RTU)"></a>1) Frame structure (RTU)</h2><table>
<thead>
<tr>
<th>Field</th>
<th align="right">Size</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>Address</td>
<td align="right">1 byte</td>
<td>Slave ID: 1…247 (0 &#x3D; broadcast; 248–255 reserved).</td>
</tr>
<tr>
<td>Function code</td>
<td align="right">1 byte</td>
<td>e.g., <code>0x03</code> Read Holding Regs; <code>0x06</code> Write Single Reg.</td>
</tr>
<tr>
<td>Data</td>
<td align="right">0…252 B</td>
<td>Depends on function: start address, quantity, payload, byte count…</td>
</tr>
<tr>
<td>CRC-16</td>
<td align="right">2 bytes</td>
<td><strong>Little-endian</strong> on the wire: <strong>CRC low byte first, then high byte</strong>. Polynomial <code>0xA001</code>, init <code>0xFFFF</code>.</td>
</tr>
</tbody></table>
<p><strong>Framing by silence:</strong> ≥ <strong>3.5</strong> character times between frames; ≤ <strong>1.5</strong> character times between bytes <em>within</em> a frame.</p>
<hr>
<h2 id="2-Common-function-codes"><a href="#2-Common-function-codes" class="headerlink" title="2) Common function codes"></a>2) Common function codes</h2><table>
<thead>
<tr>
<th align="right">Code</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><code>0x01</code></td>
<td>Read Coils</td>
</tr>
<tr>
<td align="right"><code>0x02</code></td>
<td>Read Discrete Inputs</td>
</tr>
<tr>
<td align="right"><code>0x03</code></td>
<td>Read Holding Registers</td>
</tr>
<tr>
<td align="right"><code>0x04</code></td>
<td>Read Input Registers</td>
</tr>
<tr>
<td align="right"><code>0x05</code></td>
<td>Write Single Coil</td>
</tr>
<tr>
<td align="right"><code>0x06</code></td>
<td>Write Single Register</td>
</tr>
<tr>
<td align="right"><code>0x0F</code></td>
<td>Write Multiple Coils</td>
</tr>
<tr>
<td align="right"><code>0x10</code></td>
<td>Write Multiple Registers</td>
</tr>
</tbody></table>
<hr>
<h2 id="3-Bit-amp-byte-ordering"><a href="#3-Bit-amp-byte-ordering" class="headerlink" title="3) Bit &amp; byte ordering"></a>3) Bit &amp; byte ordering</h2><pre><code>Bit significance (LSB/MSB) is within a single byte.
</code></pre>
<p>Example: 0x0B &#x3D; 0000 1011₂ → LSB (bit 0) &#x3D; 1, MSB (bit 7) &#x3D; 0.<br>Endianness talks about the order of bytes when storing or sending a multi-byte value (16-bit, 32-bit, etc.). It is not about the order of bits inside a byte.</p>
<h3 id="Endianness-definitions-byte-order-for-multi-byte-values"><a href="#Endianness-definitions-byte-order-for-multi-byte-values" class="headerlink" title="Endianness definitions (byte order for multi-byte values)"></a>Endianness definitions (byte order for multi-byte values)</h3><h4 id="Big-endian-“network-order”"><a href="#Big-endian-“network-order”" class="headerlink" title="Big-endian (“network order”)"></a>Big-endian (“network order”)</h4><p>Stores&#x2F;sends the most significant byte first (the “big end”).<br>16-bit example: value 0x1234 → bytes on the wire&#x2F;in memory: 12 34<br>32-bit example: 0x12345678 → 12 34 56 78</p>
<h4 id="Little-endian"><a href="#Little-endian" class="headerlink" title="Little-endian"></a>Little-endian</h4><p>Stores&#x2F;sends the least significant byte first (the “little end”).<br>16-bit example: 0x1234 → 34 12<br>32-bit example: 0x12345678 → 78 56 34 12</p>
<h3 id="Bit-Byte-Word-Modbus-register-don’t-mix-them"><a href="#Bit-Byte-Word-Modbus-register-don’t-mix-them" class="headerlink" title="Bit,  Byte, Word(Modbus register)  (don’t mix them!)"></a>Bit,  Byte, Word(Modbus register)  (don’t mix them!)</h3><p>Bit: 1 or 0.<br>Byte: 8 bits (e.g., 0x0B &#x3D; 00001011₂).<br>Word (Modbus register): 16 bits &#x3D; 2 bytes.<br>Double word (DWORD): 32 bits &#x3D; 2 words &#x3D; 4 bytes (uses two consecutive registers).<br>Quad word (QWORD): 64 bits &#x3D; 4 words &#x3D; 8 bytes (four consecutive registers).</p>
<p>Example (32-bit unsigned 0x12345678)<br>High-word first:</p>
<ul>
<li>Register N (high word) &#x3D; 0x1234 → bytes 12 34</li>
<li>Register N+1 (low word) &#x3D; 0x5678 → bytes 56 78</li>
<li>On the wire (data payload): 12 34 56 78<br>Low-word first (word-swap):</li>
<li>Register N (low word) &#x3D; 0x5678 → bytes 56 78</li>
<li>Register N+1 (high word) &#x3D; 0x1234 → bytes 12 34</li>
<li>On the wire (data payload): 56 78 12 34</li>
</ul>
<hr>
<h2 id="4-Hex-x2F-Bin-x2F-Dec-two’s-complement-refresher"><a href="#4-Hex-x2F-Bin-x2F-Dec-two’s-complement-refresher" class="headerlink" title="4) Hex&#x2F;Bin&#x2F;Dec + two’s complement refresher"></a>4) Hex&#x2F;Bin&#x2F;Dec + two’s complement refresher</h2><h3 id="4-1-Quick-Hex–Binary–Decimal"><a href="#4-1-Quick-Hex–Binary–Decimal" class="headerlink" title="4.1 Quick Hex–Binary–Decimal"></a>4.1 Quick Hex–Binary–Decimal</h3><table>
<thead>
<tr>
<th align="right">Dec</th>
<th>8-bit Binary</th>
<th>Hex</th>
</tr>
</thead>
<tbody><tr>
<td align="right">0</td>
<td><code>0000 0000</code></td>
<td><code>00</code></td>
</tr>
<tr>
<td align="right">10</td>
<td><code>0000 1010</code></td>
<td><code>0A</code></td>
</tr>
<tr>
<td align="right">15</td>
<td><code>0000 1111</code></td>
<td><code>0F</code></td>
</tr>
<tr>
<td align="right">16</td>
<td><code>0001 0000</code></td>
<td><code>10</code></td>
</tr>
<tr>
<td align="right">255</td>
<td><code>1111 1111</code></td>
<td><code>FF</code></td>
</tr>
</tbody></table>
<p><strong>Notation:</strong> <code>0x..</code>&#x3D;hex, <code>0b..</code>&#x3D;binary.</p>
<h3 id="4-2-Two’s-complement-signed-integers"><a href="#4-2-Two’s-complement-signed-integers" class="headerlink" title="4.2 Two’s complement (signed integers)"></a>4.2 Two’s complement (signed integers)</h3><ul>
<li>Positive <strong>N</strong>: store normal binary.</li>
<li>Negative <strong>−N</strong>: invert all bits of <strong>N</strong>, then add 1 (width-fixed).</li>
</ul>
<p><strong>8-bit example:</strong><br><code>+5 = 0000 0101</code> → invert → <code>1111 1010</code> → +1 → <strong><code>1111 1011</code> &#x3D; −5</strong></p>
<p><strong>32-bit example:</strong><br><code>+5 = 00000000 00000000 00000000 00000101</code><br>invert → <code>11111111 11111111 11111111 11111010</code><br>+1 → <strong><code>11111111 11111111 11111111 11111011</code> &#x3D; −5</strong></p>
<blockquote>
<p>If your device returns an <strong>unsigned</strong> 32-bit that actually encodes a signed value, then when MSB&#x3D;1:<br><code>signed = unsigned − 2^32</code>.</p>
</blockquote>
<hr>
<h2 id="5-32-bit-example-value-500"><a href="#5-32-bit-example-value-500" class="headerlink" title="5) 32-bit example (value 500)"></a>5) 32-bit example (value 500)</h2><p><code>500(dec) = 0x000001F4</code></p>
<ul>
<li><strong>High-word first (big-endian words):</strong> <code>00 00 01 F4</code>  </li>
<li><strong>Low-word first (word-swapped):</strong> <code>01 F4 00 00</code>  ← common on some devices</li>
</ul>
<blockquote>
<p><strong>Your note <code>01 F4 00 00</code> is consistent with “low-word first.”</strong></p>
</blockquote>
<hr>
<h2 id="6-Standard-request-x2F-response-templates"><a href="#6-Standard-request-x2F-response-templates" class="headerlink" title="6) Standard request&#x2F;response templates"></a>6) Standard request&#x2F;response templates</h2><h3 id="6-1-Read-Holding-Registers-0x03"><a href="#6-1-Read-Holding-Registers-0x03" class="headerlink" title="6.1 Read Holding Registers (0x03)"></a>6.1 Read Holding Registers (<code>0x03</code>)</h3><p><strong>Request</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Addr][03][StartHi][StartLo][QtyHi][QtyLo][CRCLo][CRCHi]</span><br></pre></td></tr></table></figure>
<p><strong>Response</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Addr][03][ByteCount][(Reg1Hi)(Reg1Lo)...(RegNHi)(RegNLo)][CRCLo][CRCHi]</span><br></pre></td></tr></table></figure>
<p><code>ByteCount = 2*N</code> registers.</p>
<h3 id="6-2-Write-Single-Register-0x06"><a href="#6-2-Write-Single-Register-0x06" class="headerlink" title="6.2 Write Single Register (0x06)"></a>6.2 Write Single Register (<code>0x06</code>)</h3><p><strong>Request</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Addr][06][RegHi][RegLo][DataHi][DataLo][CRCLo][CRCHi]</span><br></pre></td></tr></table></figure>
<p><strong>Response</strong><br>Echoes the request.</p>
<hr>
<h2 id="7-Example-of-load-cell-frames"><a href="#7-Example-of-load-cell-frames" class="headerlink" title="7) Example of load-cell frames"></a>7) Example of load-cell frames</h2><h3 id="A-Activate-setup-close-write-protection"><a href="#A-Activate-setup-close-write-protection" class="headerlink" title="A) Activate setup (close write protection)"></a>A) Activate setup (close write protection)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 06 00 17 00 01 F8 0E</span><br></pre></td></tr></table></figure>
<ul>
<li>Addr <code>01</code>, Func <code>06</code>  </li>
<li>Reg <code>0x0017</code> ← data <code>0x0001</code>  </li>
<li>CRC &#x3D; <code>0x0EF8</code> on wire as <code>F8 0E</code> ✅</li>
</ul>
<h3 id="B-Deactivate-setup-open-write-protection"><a href="#B-Deactivate-setup-open-write-protection" class="headerlink" title="B) Deactivate setup (open write protection)"></a>B) Deactivate setup (open write protection)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 06 00 17 00 00 39 CE</span><br></pre></td></tr></table></figure>
<ul>
<li>CRC &#x3D; <code>0xCE39</code> on wire as <code>39 CE</code> ✅</li>
</ul>
<h3 id="C-Read-load-cell-2-regs-from-0x0000"><a href="#C-Read-load-cell-2-regs-from-0x0000" class="headerlink" title="C) Read load cell (2 regs from 0x0000)"></a>C) Read load cell (2 regs from 0x0000)</h3><p><strong>Request</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 03 00 00 00 02 C4 0B</span><br></pre></td></tr></table></figure>
<ul>
<li>CRC &#x3D; <code>0x0BC4</code> on wire as <code>C4 0B</code> ✅</li>
</ul>
<p><strong>Example response</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 03 04 12 5D 00 00 6E 99</span><br></pre></td></tr></table></figure>
<ul>
<li>ByteCount <code>04</code> → 2 registers  </li>
<li>Data words: <code>0x125D</code> and <code>0x0000</code>  </li>
<li>If device uses <strong>low-word first</strong> for 32-bit: bytes <code>12 5D 00 00</code> → <code>0x0000125D</code> &#x3D; <strong>4701</strong>.  </li>
<li>CRC &#x3D; <code>0x996E</code> on wire as <code>6E 99</code> ✅</li>
</ul>
<blockquote>
<p>32-bit word order is device-specific; for non-zero high words, the wrong order will scramble the value.</p>
</blockquote>
<hr>
<h2 id="8-Calibration-sequence"><a href="#8-Calibration-sequence" class="headerlink" title="8) Calibration sequence"></a>8) Calibration sequence</h2><blockquote>
<p><strong>Registers are device-specific.</strong> Below uses your notes; confirm against the module manual.</p>
</blockquote>
<table>
<thead>
<tr>
<th align="right">Step</th>
<th>Meaning</th>
<th>Frame (hex)</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td align="right">1</td>
<td>Close write protection (enter setup)</td>
<td><code>01 06 00 17 00 01 F8 0E</code></td>
<td>Enables config mode</td>
</tr>
<tr>
<td align="right">2</td>
<td>Zero (no-load) calibration</td>
<td><code>01 06 00 16 00 01 ?? ??</code></td>
<td><code>0x0016</code> with <code>0x0001</code> (CRC depends on bytes)</td>
</tr>
<tr>
<td align="right">3</td>
<td>Span with <strong>500 g</strong> placed</td>
<td><code>01 06 00 06 01 F4 ?? ??</code></td>
<td><code>0x01F4</code> &#x3D; 500 decimal</td>
</tr>
<tr>
<td align="right">4</td>
<td>Open write protection (exit)</td>
<td><code>01 06 00 17 00 00 39 CE</code></td>
<td>Back to normal</td>
</tr>
</tbody></table>
<hr>
<h2 id="9-“Check-parameters”-request"><a href="#9-“Check-parameters”-request" class="headerlink" title="9) “Check parameters” request"></a>9) “Check parameters” request</h2><p><strong>Request</strong> <em>(read 17 regs from 0x0007)</em>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 03 00 07 00 11 34 07</span><br></pre></td></tr></table></figure>
<ul>
<li>CRC &#x3D; <code>0x0734</code> on wire as <code>34 07</code> ✅</li>
</ul>
<p><strong>Response header</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 03 22 ...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>0x22 = 34</code> data bytes &#x3D; <code>17 × 2</code> (as expected).</li>
</ul>
<hr>
<h2 id="10-ESP32C6-TFT-load-cell-wiring"><a href="#10-ESP32C6-TFT-load-cell-wiring" class="headerlink" title="10) ESP32C6 + TFT + load-cell wiring"></a>10) ESP32C6 + TFT + load-cell wiring</h2><blockquote>
<p>Your original pin list looked like mixed header labels. Here’s a <strong>clean mapping</strong> you can actually wire.</p>
</blockquote>
<h3 id="10-1-Load-cell-module-UART-x2F-TTL"><a href="#10-1-Load-cell-module-UART-x2F-TTL" class="headerlink" title="10.1 Load-cell module (UART&#x2F;TTL)"></a>10.1 Load-cell module (UART&#x2F;TTL)</h3><ul>
<li><strong>Module TX</strong> → ESP32C6 <strong>GPIO17 (RX)</strong></li>
<li><strong>Module RX</strong> → ESP32C6 <strong>GPIO16 (TX)</strong></li>
<li>GND ↔ GND; power per module spec.</li>
</ul>
<blockquote>
<p>If the module speaks <strong>RS-485</strong>, add a transceiver (e.g., MAX485&#x2F;THVD-series) and control DE&#x2F;RE; TTL direct wiring won’t work.</p>
</blockquote>
<h3 id="10-2-ST7735-TFT-SPI-4-keys-example-pins"><a href="#10-2-ST7735-TFT-SPI-4-keys-example-pins" class="headerlink" title="10.2 ST7735 TFT (SPI) + 4 keys (example pins)"></a>10.2 ST7735 TFT (SPI) + 4 keys (example pins)</h3><table>
<thead>
<tr>
<th>TFT pin</th>
<th>ESP32C6 pin (example)</th>
<th>Note</th>
</tr>
</thead>
<tbody><tr>
<td>VCC</td>
<td>3V3</td>
<td>Supply</td>
</tr>
<tr>
<td>GND</td>
<td>GND</td>
<td>Ground</td>
</tr>
<tr>
<td>SCL (SPI_CLK)</td>
<td><strong>GPIO19</strong></td>
<td>SPI SCK</td>
</tr>
<tr>
<td>SDA (SPI_MOSI)</td>
<td><strong>GPIO18</strong></td>
<td>SPI MOSI</td>
</tr>
<tr>
<td>CS</td>
<td><strong>GPIO21</strong></td>
<td>Chip-select</td>
</tr>
<tr>
<td>DC</td>
<td><strong>GPIO2</strong></td>
<td>Data&#x2F;Command</td>
</tr>
<tr>
<td>RST</td>
<td><strong>GPIO1</strong></td>
<td>Reset (or tie via RC)</td>
</tr>
<tr>
<td>BLK</td>
<td>(PWM-capable GPIO)</td>
<td>Backlight (tie high or PWM)</td>
</tr>
<tr>
<td>K1,K2,K3,K4 (keys)</td>
<td>**GPIO0&#x2F;23&#x2F;20&#x2F;22</td>
<td>Any free GPIOs with pull-ups&#x2F;downs as needed</td>
</tr>
</tbody></table>
<blockquote>
<p>ESP32-class chips let you remap SPI&#x2F;UART pins; feel free to choose others if these clash.</p>
</blockquote>
<hr>
<h2 id="11-Battery-ADC-note-A6-mapping"><a href="#11-Battery-ADC-note-A6-mapping" class="headerlink" title="11) Battery ADC note (A6 mapping)"></a>11) Battery ADC note (A6 mapping)</h2><ul>
<li>If you map <strong>0–2.1 V → 0–4.2 V</strong>, you’re likely using a <strong>~2:1 divider</strong> ahead of the ADC.  </li>
<li>Ensure the ADC pin <strong>never exceeds its absolute max</strong> (and set attenuation appropriately).  </li>
<li>Calibrate: <code>V_batt ≈ ADC_volts × (R_top + R_bottom) / R_bottom</code>.</li>
</ul>
<hr>
<h2 id="12-Common-pitfalls"><a href="#12-Common-pitfalls" class="headerlink" title="12) Common pitfalls"></a>12) Common pitfalls</h2><ul>
<li><strong>CRC order:</strong> always send <strong>CRC Low byte first</strong>, then High.</li>
<li><strong>Word order for 32-bit:</strong> not in the spec—confirm high-word-first vs low-word-first.</li>
<li><strong>Timing:</strong> respect <strong>≥3.5 char</strong> silent gap between frames (and <strong>≤1.5 char</strong> gaps within).</li>
<li><strong>Broadcast address (0):</strong> slaves <strong>do not reply</strong>.</li>
<li><strong>Register numbering:</strong> doc “40001” ≠ wire <code>0x40001</code>; it’s usually wire offset <code>0x0000</code>.</li>
</ul>
<hr>
<h2 id="Appendix-A-Tiny-CRC16-Modbus-snippet-optional"><a href="#Appendix-A-Tiny-CRC16-Modbus-snippet-optional" class="headerlink" title="Appendix A) Tiny CRC16(Modbus) snippet (optional)"></a>Appendix A) Tiny CRC16(Modbus) snippet (optional)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crc16_modbus</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    crc = <span class="number">0xFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^= b</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> crc &amp; <span class="number">1</span>:</span><br><span class="line">                crc = (crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> crc  <span class="comment"># integer 0..0xFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># frame = bytes.fromhex(&quot;01 03 00 00 00 02&quot;)</span></span><br><span class="line"><span class="comment"># crc = crc16_modbus(frame)</span></span><br><span class="line"><span class="comment"># print(f&quot;&#123;crc &amp; 0xFF:02X&#125; &#123;crc &gt;&gt; 8:02X&#125;&quot;)  # prints &quot;C4 0B&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>research</category>
      </categories>
  </entry>
  <entry>
    <title>MATLAB Code Generating DXF Sinusoidal Curve</title>
    <url>/2025/01/30/generateSinusoidalDXF/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>This MATLAB script demonstrates how to generate a DNX file containing a sinusoidal curve represented as a polyline with a controlled number of points. All units are in millimeters (mm).</p>
<span id="more"></span>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateSinusoidalDXF</span><span class="params">(length1, numberOfPoints)</span></span></span><br><span class="line">    <span class="comment">% GUIDELINE:</span></span><br><span class="line">    <span class="comment">% This function generates a DXF file containing a sinusoidal curve represented</span></span><br><span class="line">    <span class="comment">% as a polyline with a controlled number of points. All units are in millimeters (mm).</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% INPUTS:</span></span><br><span class="line">    <span class="comment">%   length1         - Length of the x-axis in millimeters (scalar, double).</span></span><br><span class="line">    <span class="comment">%   numberOfPoints  - Number of points to generate for the polyline (scalar, integer).</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% OUTPUT:</span></span><br><span class="line">    <span class="comment">%   A DXF file named &#x27;sinusoidal_curve_&lt;numberOfPoints&gt;_points.dxf&#x27; is saved in the</span></span><br><span class="line">    <span class="comment">%   current working directory.</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% USAGE EXAMPLE:</span></span><br><span class="line">    <span class="comment">%   generateSinusoidalDXF(100, 200); % Generates a sinusoidal curve with 200 points over a length of 100 mm.</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% CREATED BY: YX</span></span><br><span class="line">    <span class="comment">% DATE: Today</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Close all figures and clear workspace variables (except inputs)</span></span><br><span class="line">    close all;</span><br><span class="line">    clc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Validate inputs</span></span><br><span class="line">    <span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">        error(<span class="string">&#x27;Two input arguments (length1 and numberOfPoints) are required.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> ~isnumeric(length1) || ~<span class="built_in">isscalar</span>(length1) || length1 &lt;= <span class="number">0</span></span><br><span class="line">        error(<span class="string">&#x27;length1 must be a positive scalar value in millimeters.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> ~isnumeric(numberOfPoints) || ~<span class="built_in">isscalar</span>(numberOfPoints) || numberOfPoints &lt;= <span class="number">0</span></span><br><span class="line">        error(<span class="string">&#x27;numberOfPoints must be a positive integer value.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    numberOfPoints = <span class="built_in">round</span>(numberOfPoints); <span class="comment">% Ensure integer value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Parameters for the sinusoidal curve (all units in millimeters)</span></span><br><span class="line">    wavelength = <span class="number">47.6</span>;  <span class="comment">% Wavelength of the sinusoidal curve in mm</span></span><br><span class="line">    amplitude = <span class="number">2.76</span>;   <span class="comment">% Amplitude of the sinusoidal curve in mm</span></span><br><span class="line">    phaseShift = <span class="number">0.16</span>;  <span class="comment">% Phase shift of the sinusoidal curve in mm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Derived parameters</span></span><br><span class="line">    waveNumber = <span class="number">2</span> * <span class="built_in">pi</span> / wavelength;  <span class="comment">% Wave number in radians/mm</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Generate x-coordinates in millimeters</span></span><br><span class="line">    x = <span class="built_in">linspace</span>(<span class="number">0</span>, length1, numberOfPoints);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Generate y-coordinates for the sinusoidal curve in millimeters</span></span><br><span class="line">    y = amplitude * <span class="built_in">sin</span>(waveNumber * (x + wavelength / <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Combine x and y coordinates into a matrix</span></span><br><span class="line">    coordinates = [x(:), y(:)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Specify DXF file name</span></span><br><span class="line">    dxfFileName = sprintf(<span class="string">&#x27;sinusoidal_curve_%d_points.dxf&#x27;</span>, numberOfPoints);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Write coordinates to DXF file</span></span><br><span class="line">    writeDXF(dxfFileName, coordinates);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Notify user</span></span><br><span class="line">    fprintf(<span class="string">&#x27;DXF file saved as %s\n&#x27;</span>, dxfFileName);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeDXF</span><span class="params">(filename, coordinates)</span></span></span><br><span class="line">    <span class="comment">% Open file for writing</span></span><br><span class="line">    fileID = fopen(filename, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> fileID == <span class="number">-1</span></span><br><span class="line">        error(<span class="string">&#x27;Failed to open file for writing.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Write DXF Header with units set to millimeters</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nSECTION\n2\nHEADER\n&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;9\n$INSUNITS\n70\n4\n&#x27;</span>);  <span class="comment">% 70 = integer value for units, 4 = mm</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nENDSEC\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Write TABLES, BLOCKS, and ENTITIES sections</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nSECTION\n2\nTABLES\n0\nENDSEC\n&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nSECTION\n2\nBLOCKS\n0\nENDSEC\n&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nSECTION\n2\nENTITIES\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Begin POLYLINE entity</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nPOLYLINE\n8\n0\n66\n1\n70\n0\n&#x27;</span>); <span class="comment">% 70=0 indicates a 2D polyline</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Write each point (coordinates are in millimeters)</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(coordinates, <span class="number">1</span>)</span><br><span class="line">        fprintf(fileID, <span class="string">&#x27;0\nVERTEX\n8\n0\n10\n%f\n20\n%f\n&#x27;</span>, coordinates(<span class="built_in">i</span>, <span class="number">1</span>), coordinates(<span class="built_in">i</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% End POLYLINE entity</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nSEQEND\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% End DXF</span></span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;0\nENDSEC\n0\nEOF\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Close file</span></span><br><span class="line">    fclose(fileID);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Water Rocket Code</title>
    <url>/2024/12/10/matlabWaterRocket/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>This MATLAB code simulates the initial velocity of a water rocket based on varying air-water ratios (\alpha) and internal air pressures (P), and visualizes the results in a 3D surface plot.</p>
<span id="more"></span>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all</span><br><span class="line">clear</span><br><span class="line">aa=<span class="number">0.0001</span>; <span class="comment">%The water flow rate</span></span><br><span class="line">A=<span class="number">0.00038</span>; <span class="comment">%Exit area is 0.00038m^2</span></span><br><span class="line">rho=<span class="number">1000</span>; <span class="comment">%The water density is 1000kg/m^3</span></span><br><span class="line">V=<span class="number">0.00125</span>; <span class="comment">%The volume of bottle is 0.00125m^3</span></span><br><span class="line">u(<span class="number">1</span>)=<span class="number">0</span>; <span class="comment">%Initial velocity is 0 m/s</span></span><br><span class="line">mm=<span class="number">0.01</span>; <span class="comment">%The quality of the bottle is 0.01kg</span></span><br><span class="line">P=<span class="number">100</span>:<span class="number">1</span>:<span class="number">900</span>; <span class="comment">%The air pressure inside bottle (kPa)</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">length</span>(P)</span><br><span class="line">    p=P(<span class="built_in">j</span>);</span><br><span class="line">alpha=<span class="number">0.1</span>:<span class="number">0.01</span>:<span class="number">0.9</span>; <span class="comment">%The ratio of air and water</span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">length</span>(alpha)</span><br><span class="line">    M(<span class="number">1</span>)=(<span class="number">1</span>-alpha(k))*V*rho;</span><br><span class="line">    <span class="built_in">i</span>=<span class="number">1</span>;</span><br><span class="line">    u=[];</span><br><span class="line"><span class="keyword">while</span> M(<span class="built_in">i</span>)&gt;<span class="number">0</span></span><br><span class="line">     <span class="keyword">if</span> p(<span class="built_in">i</span>)&gt;<span class="number">0</span></span><br><span class="line">     p(<span class="built_in">i</span>+<span class="number">1</span>)=(p(<span class="built_in">i</span>)+<span class="number">101.325</span>)*(((alpha(k)+aa*(<span class="built_in">i</span><span class="number">-1</span>))/(alpha(k)+aa*(<span class="built_in">i</span>))))^<span class="number">1.4</span><span class="number">-101.325</span>; <span class="comment">%Isentropic flow equation</span></span><br><span class="line">     u(<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">        v(<span class="built_in">i</span>)=<span class="built_in">sqrt</span>(<span class="number">2</span>*p(<span class="built_in">i</span>)*<span class="number">1000</span>/rho);</span><br><span class="line">        m(<span class="built_in">i</span>)=rho*v(<span class="built_in">i</span>)*A;</span><br><span class="line">        t(<span class="built_in">i</span>)=aa*V*rho/m(<span class="built_in">i</span>);</span><br><span class="line">        M(<span class="built_in">i</span>+<span class="number">1</span>)=M(<span class="built_in">i</span>)-aa*V*rho;</span><br><span class="line">        a(<span class="built_in">i</span>)=(m(<span class="built_in">i</span>)*v(<span class="built_in">i</span>))/(M(<span class="built_in">i</span>+<span class="number">1</span>)+mm);</span><br><span class="line">        u(<span class="built_in">i</span>+<span class="number">1</span>)=u(<span class="built_in">i</span>)+a(<span class="built_in">i</span>)*t(<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        u(<span class="built_in">i</span>+<span class="number">1</span>)=u(<span class="built_in">i</span>);</span><br><span class="line">        M(<span class="built_in">i</span>+<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line">      <span class="built_in">i</span>=<span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">U(<span class="built_in">j</span>,k)=<span class="built_in">max</span>(u);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">figure</span>,</span><br><span class="line">surf(alpha,P,U,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;interp&#x27;</span>,<span class="string">&#x27;FaceLighting&#x27;</span>,<span class="string">&#x27;Gouraud&#x27;</span>);</span><br><span class="line">colormap(<span class="string">&quot;cool&quot;</span>)</span><br><span class="line">title(<span class="string">&#x27;Water Rocket Optimal Air-Water Ratio and Pressure&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Air-to-Water Ratio (\alpha)&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Pressure (kPa)&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">zlabel(<span class="string">&#x27;Initial Velocity (m/s)&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">set(gca, <span class="string">&#x27;fontsize&#x27;</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB Drawing Tips</title>
    <url>/2024/12/09/matlabDrawing/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>This MATLAB script demonstrates how to visualize and customize 3D geometrical elements such as cuboids, cylinders, and arrows, often used to represent components in engineering setups like sensor assemblies.</p>
<span id="more"></span>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Demo code</span></span><br><span class="line"></span><br><span class="line">close all</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line"><span class="comment">% Sketch of Riblet and Sensor Setup</span></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line">numElement = <span class="number">290</span>/<span class="number">3.1</span>;</span><br><span class="line"></span><br><span class="line">scaleProp  = <span class="number">0.58</span>;</span><br><span class="line">tileDimen1 = <span class="number">430</span>*scaleProp;</span><br><span class="line">tileDimen2 = <span class="number">290</span>*scaleProp;</span><br><span class="line">straightRibletLength = <span class="number">0</span>;<span class="comment">%240*scaleProp;</span></span><br><span class="line"></span><br><span class="line">ratioLW = tileDimen1/tileDimen2;</span><br><span class="line">blockLength = tileDimen2; <span class="comment">% Length of the riblet block</span></span><br><span class="line">alpha       = <span class="number">20</span>;  <span class="comment">% Riblet angle in degrees</span></span><br><span class="line">numEle      = <span class="built_in">round</span>(numElement*scaleProp);  <span class="comment">% Number of elements in riblet array</span></span><br><span class="line">intervalL   = blockLength / (numEle - <span class="number">1</span>); <span class="comment">% Distance between elements</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rotatingframeL = <span class="number">90</span>*scaleProp;</span><br><span class="line">rotatingframeW = <span class="number">30</span>*scaleProp;</span><br><span class="line">diameterShaft  = <span class="number">6</span>*scaleProp;</span><br><span class="line">lengthShaft    = <span class="number">60</span>*scaleProp;</span><br><span class="line">motorSquare    = <span class="number">40</span>*scaleProp;</span><br><span class="line">motorHeight    = <span class="number">20</span>*scaleProp;</span><br><span class="line"></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line"><span class="comment">% Wall-normal, streamwise, and position adjustments                |</span></span><br><span class="line">iZLoc = <span class="number">1</span>; zz = <span class="number">0.5</span>;<span class="comment">%                                      |</span></span><br><span class="line">iStep = <span class="number">25</span>; <span class="comment">% Select streamwise location (1 to 6)                   |</span></span><br><span class="line">movingX = intervalL / <span class="built_in">tand</span>(alpha) * (iStep - <span class="number">1</span>);<span class="comment">%                  |</span></span><br><span class="line">yLocation = blockLength / <span class="number">2</span>; <span class="comment">% Set y location for drawing          |</span></span><br><span class="line"><span class="comment">% % prop = width</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"><span class="comment">% 3.2/intervalL;</span></span><br><span class="line"><span class="comment">% movingX*prop</span></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% ==============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Define rotation angle in radians</span></span><br><span class="line">theta1 = -[<span class="number">-40</span>:<span class="number">5.4</span>:<span class="number">30</span>]; <span class="comment">% 45 degrees, for example</span></span><br><span class="line"><span class="keyword">for</span> iRot = <span class="number">1</span>:<span class="built_in">length</span>(theta1)</span><br><span class="line"></span><br><span class="line">    stainlessColor = [<span class="number">180</span>    <span class="number">189</span>    <span class="number">199</span>]/<span class="number">255</span>;</span><br><span class="line">    aluminaColor = [<span class="number">175</span> <span class="number">86</span> <span class="number">67</span>]/<span class="number">255</span>;</span><br><span class="line">    </span><br><span class="line">    aluminaColor =  [<span class="number">1</span> <span class="number">0.766</span> <span class="number">0.336</span>];</span><br><span class="line">    aluColor     = [<span class="number">132</span> <span class="number">135</span> <span class="number">137</span>]/<span class="number">255</span>;</span><br><span class="line">    sliverColor  = [<span class="number">192</span> <span class="number">192</span> <span class="number">192</span>]/<span class="number">255</span>;</span><br><span class="line">    copperColor  = [<span class="number">0.955</span>, <span class="number">0.637</span>, <span class="number">0.538</span>];</span><br><span class="line">    </span><br><span class="line">    theta = theta1(iRot);</span><br><span class="line">    centrePoint = [straightRibletLength + movingX, yLocation, zz];</span><br><span class="line">    </span><br><span class="line">    hFig  = <span class="built_in">figure</span>;ax(<span class="number">1</span>) = axes;<span class="built_in">hold</span>(ax(<span class="number">1</span>),<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">    set(ax,<span class="string">&#x27;xlim&#x27;</span>,[<span class="number">0</span> blockLength*<span class="number">2.2</span>]...</span><br><span class="line">        ,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">0</span>*blockLength blockLength]...</span><br><span class="line">        ,<span class="string">&#x27;zLim&#x27;</span>,[<span class="number">0</span> blockLength*<span class="number">1</span>]...</span><br><span class="line">        ,<span class="string">&#x27;xtick&#x27;</span>,[],<span class="string">&#x27;ytick&#x27;</span>,[],<span class="string">&#x27;ztick&#x27;</span>,[])</span><br><span class="line">    axis equal;</span><br><span class="line">    view(<span class="number">3</span>)</span><br><span class="line">    material metal</span><br><span class="line">    camlight(<span class="string">&#x27;headLight&#x27;</span>);</span><br><span class="line">    lighting phong</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="comment">% ==============================</span></span><br><span class="line">    <span class="comment">% draw a probe</span></span><br><span class="line">    <span class="comment">% ==============================</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    scaleProp2 = <span class="number">1</span>;</span><br><span class="line">    hotwireLength  = <span class="number">0.5</span>*scaleProp2;</span><br><span class="line">    pronglength1   = <span class="number">5</span>*scaleProp2;</span><br><span class="line">    pronglength2   = <span class="number">8</span>*scaleProp2;</span><br><span class="line">    ceramicLengthx = <span class="number">10</span>*scaleProp2;</span><br><span class="line">    supportLengthx1 = <span class="number">3</span>*scaleProp2;</span><br><span class="line">    supportLengthx2 = <span class="number">40</span>*scaleProp2;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    probeHalf1 = [centrePoint(<span class="number">1</span>), centrePoint(<span class="number">1</span>); ...</span><br><span class="line">        centrePoint(<span class="number">2</span>), centrePoint(<span class="number">2</span>) - hotwireLength/<span class="number">2</span>; ...</span><br><span class="line">        centrePoint(<span class="number">3</span>), centrePoint(<span class="number">3</span>)];</span><br><span class="line">    </span><br><span class="line">    stubHalf1 = [probeHalf1(<span class="number">1</span>,<span class="number">2</span>) , probeHalf1(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        ...</span><br><span class="line">        probeHalf1(<span class="number">2</span>,<span class="number">2</span>), probeHalf1(<span class="number">2</span>,<span class="number">2</span>) - hotwireLength/<span class="number">2</span>;</span><br><span class="line">        ...</span><br><span class="line">        centrePoint(<span class="number">3</span>),  centrePoint(<span class="number">3</span>);</span><br><span class="line">        ]; <span class="comment">% point to point</span></span><br><span class="line">    </span><br><span class="line">    prongHalf = [stubHalf1(<span class="number">1</span>,<span class="keyword">end</span>), stubHalf1(<span class="number">1</span>,<span class="keyword">end</span>) + pronglength1;...</span><br><span class="line">        ...</span><br><span class="line">        stubHalf1(<span class="number">2</span>,<span class="keyword">end</span>), stubHalf1(<span class="number">2</span>,<span class="keyword">end</span>);...</span><br><span class="line">        ...</span><br><span class="line">        stubHalf1(<span class="number">3</span>,<span class="keyword">end</span>), stubHalf1(<span class="number">3</span>,<span class="keyword">end</span>)];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    prongHalfSec = [prongHalf(<span class="number">1</span>,<span class="keyword">end</span>), prongHalf(<span class="number">1</span>,<span class="keyword">end</span>) + pronglength2*<span class="built_in">cosd</span>(<span class="number">45</span>);...</span><br><span class="line">        ...</span><br><span class="line">        prongHalf(<span class="number">2</span>,<span class="keyword">end</span>), probeHalf1(<span class="number">2</span>,<span class="number">1</span>)  - <span class="number">1.5</span>*hotwireLength;...</span><br><span class="line">        ...</span><br><span class="line">        prongHalf(<span class="number">3</span>,<span class="keyword">end</span>), prongHalf(<span class="number">3</span>,<span class="keyword">end</span>) + pronglength2*<span class="built_in">cosd</span>(<span class="number">45</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Calculate mirrored points for y = blockLength / 2</span></span><br><span class="line">    mirrorY = yLocation;</span><br><span class="line">    </span><br><span class="line">    probeHalf1_mirror = [probeHalf1(<span class="number">1</span>,:); mirrorY + (mirrorY - probeHalf1(<span class="number">2</span>,:)); probeHalf1(<span class="number">3</span>,:)];</span><br><span class="line">    stubHalf1_mirror = [stubHalf1(<span class="number">1</span>,:); mirrorY + (mirrorY - stubHalf1(<span class="number">2</span>,:)); stubHalf1(<span class="number">3</span>,:)];</span><br><span class="line">    prongHalf_mirror = [prongHalf(<span class="number">1</span>,:); mirrorY + (mirrorY - prongHalf(<span class="number">2</span>,:)); prongHalf(<span class="number">3</span>,:)];</span><br><span class="line">    prongHalfSec_mirror = [prongHalfSec(<span class="number">1</span>,:); mirrorY + (mirrorY - prongHalfSec(<span class="number">2</span>,:)); prongHalfSec(<span class="number">3</span>,:)];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Define ceramic tube relative to prong</span></span><br><span class="line"><span class="comment">%     ceremicLengthx = 0.12 * blockLength;</span></span><br><span class="line">    </span><br><span class="line">    ceramicTube = [prongHalfSec(<span class="number">1</span>,<span class="keyword">end</span>), prongHalfSec(<span class="number">1</span>,<span class="keyword">end</span>) + ceramicLengthx ;</span><br><span class="line">        ...</span><br><span class="line">        centrePoint(<span class="number">2</span>), centrePoint(<span class="number">2</span>);</span><br><span class="line">        ...</span><br><span class="line">        prongHalfSec(<span class="number">3</span>,<span class="keyword">end</span>), prongHalfSec(<span class="number">3</span>,<span class="keyword">end</span>) + ceramicLengthx * <span class="built_in">tand</span>(<span class="number">15</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% define probe support</span></span><br><span class="line">   </span><br><span class="line">    probeSupport1 = [ceramicTube(<span class="number">1</span>,<span class="number">2</span>),  ceramicTube(<span class="number">1</span>,<span class="number">2</span>) + supportLengthx1...</span><br><span class="line">        ;</span><br><span class="line">        ...</span><br><span class="line">        ceramicTube(<span class="number">2</span>,<span class="number">1</span>),  ceramicTube(<span class="number">2</span>,<span class="number">2</span>) ...</span><br><span class="line">        ;</span><br><span class="line">        ...</span><br><span class="line">        ceramicTube(<span class="number">3</span>,<span class="number">2</span>),  ceramicTube(<span class="number">3</span>,<span class="number">2</span>) + supportLengthx1*<span class="built_in">tand</span>(<span class="number">15</span>) ...</span><br><span class="line">        ;</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    probeSupport2 = [probeSupport1(<span class="number">1</span>,<span class="number">2</span>),  probeSupport1(<span class="number">1</span>,<span class="number">2</span>) + supportLengthx2...</span><br><span class="line">        ;</span><br><span class="line">        ...</span><br><span class="line">        probeSupport1(<span class="number">2</span>,<span class="number">1</span>),  probeSupport1(<span class="number">2</span>,<span class="number">2</span>) ...</span><br><span class="line">        ;</span><br><span class="line">        ...</span><br><span class="line">        probeSupport1(<span class="number">3</span>,<span class="number">2</span>),  probeSupport1(<span class="number">3</span>,<span class="number">2</span>) + supportLengthx2*<span class="built_in">tand</span>(<span class="number">15</span>) ...</span><br><span class="line">        ;</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Define the rotation matrix around the y-axis</span></span><br><span class="line">    R_y = [<span class="built_in">cos</span>(theta), <span class="number">0</span>, <span class="built_in">sin</span>(theta);</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>;</span><br><span class="line">        -<span class="built_in">sin</span>(theta), <span class="number">0</span>, <span class="built_in">cos</span>(theta)];</span><br><span class="line">    <span class="comment">% Define the rotation matrix around the z-axis</span></span><br><span class="line">    R_z = [<span class="built_in">cosd</span>(theta), -<span class="built_in">sind</span>(theta), <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sind</span>(theta),  <span class="built_in">cosd</span>(theta), <span class="number">0</span>;</span><br><span class="line">        <span class="number">0</span>,           <span class="number">0</span>,          <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Define the rotation line</span></span><br><span class="line">    rotation_point = centrePoint&#x27;;<span class="comment">% [3/2 * blockLength; blockLength / 2; 0]; % [x0; y0; z0]</span></span><br><span class="line">    <span class="comment">% Rotate each part of the sensor</span></span><br><span class="line">    probeHalf1_rotated = rotate_around_line(probeHalf1, R_z, rotation_point);</span><br><span class="line">    probeHalf1_mirror_rotated = rotate_around_line(probeHalf1_mirror, R_z, rotation_point);</span><br><span class="line">    </span><br><span class="line">    stubHalf1_rotated = rotate_around_line(stubHalf1, R_z, rotation_point);</span><br><span class="line">    stubHalf1_mirror_rotated = rotate_around_line(stubHalf1_mirror, R_z, rotation_point);</span><br><span class="line">    </span><br><span class="line">    prongHalf_rotated = rotate_around_line(prongHalf, R_z, rotation_point);</span><br><span class="line">    prongHalf_mirror_rotated = rotate_around_line(prongHalf_mirror, R_z, rotation_point);</span><br><span class="line">    </span><br><span class="line">    prongHalfSec_rotated = rotate_around_line(prongHalfSec, R_z, rotation_point);</span><br><span class="line">    prongHalfSec_mirror_rotated = rotate_around_line(prongHalfSec_mirror, R_z, rotation_point);</span><br><span class="line">    </span><br><span class="line">    ceramicTube_rotated = rotate_around_line(ceramicTube, R_z, rotation_point);</span><br><span class="line">    </span><br><span class="line">    probeSupport1_rotated = rotate_around_line(probeSupport1,R_z,rotation_point);</span><br><span class="line">    </span><br><span class="line">    probeSupport2_rotated = rotate_around_line(probeSupport2,R_z,rotation_point);</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    diameter = <span class="number">0.01</span>*scaleProp2;    </span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(probeHalf1_rotated(:,<span class="number">1</span>)&#x27;, probeHalf1_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(probeHalf1_mirror_rotated(:,<span class="number">1</span>)&#x27;, probeHalf1_mirror_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    diameter = <span class="number">.1</span>*scaleProp2;</span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(stubHalf1_rotated(:,<span class="number">1</span>)&#x27;, stubHalf1_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, sliverColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(stubHalf1_mirror_rotated(:,<span class="number">1</span>)&#x27;, stubHalf1_mirror_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, sliverColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    diameter1 = <span class="number">0.1</span>*scaleProp2;</span><br><span class="line">    diameter2 = <span class="number">0.6</span>*scaleProp2;</span><br><span class="line">    [cyX, cyY, cyZ] = plotTruncatedCone(prongHalf_rotated(:,<span class="number">1</span>)&#x27;, prongHalf_rotated(:,<span class="number">2</span>)&#x27;, diameter1, diameter2);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    [cyX, cyY, cyZ] = plotTruncatedCone(prongHalf_mirror_rotated(:,<span class="number">1</span>)&#x27;, prongHalf_mirror_rotated(:,<span class="number">2</span>)&#x27;, diameter1, diameter2);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    diameter1 = <span class="number">0.6</span>*scaleProp2;</span><br><span class="line">    normal1   = [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">    diameter2 = <span class="number">0.6</span>*scaleProp2;</span><br><span class="line">    normal2   = [<span class="built_in">cosd</span>(<span class="number">15</span>) <span class="number">0</span> <span class="built_in">sind</span>(<span class="number">15</span>)];</span><br><span class="line">    segments = <span class="number">40</span>;</span><br><span class="line">    [cyX, cyY, cyZ] = plotCustomOrientedCylinder(prongHalfSec_rotated(:,<span class="number">1</span>)&#x27;, diameter1, normal1...</span><br><span class="line">        , prongHalfSec_rotated(:,<span class="number">2</span>)&#x27;, diameter2, normal2, segments);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    [cyX, cyY, cyZ] = plotCustomOrientedCylinder(prongHalfSec_mirror_rotated(:,<span class="number">1</span>)&#x27;, diameter1, normal1...</span><br><span class="line">        , prongHalfSec_mirror_rotated(:,<span class="number">2</span>)&#x27;, diameter2, normal2, segments);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    diameter = <span class="number">2.3</span>*scaleProp2;</span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(ceramicTube_rotated(:,<span class="number">1</span>)&#x27;, ceramicTube_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, aluminaColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.96</span>);</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    diameter1 = <span class="number">2.4</span>*scaleProp2;</span><br><span class="line">    diameter2 = <span class="number">4.5</span>*scaleProp2;</span><br><span class="line">    [cyX, cyY, cyZ] = plotTruncatedCone(probeSupport1_rotated(:,<span class="number">1</span>)&#x27;, probeSupport1_rotated(:,<span class="number">2</span>)&#x27;, diameter1, diameter2);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, aluColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    diameter1 = <span class="number">4.5</span>*scaleProp2;</span><br><span class="line">    diameter2 = <span class="number">4.5</span>*scaleProp2;</span><br><span class="line">    [cyX, cyY, cyZ] = plotTruncatedCone(probeSupport2_rotated(:,<span class="number">1</span>)&#x27;, probeSupport2_rotated(:,<span class="number">2</span>)&#x27;, diameter1, diameter2);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, aluColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">%    print(hFig,&#x27;-depsc2&#x27;,[&#x27;probe&#x27; num2str(iRot)])</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"><span class="comment">%    print(hFig,&#x27;-dtiff&#x27;,&#x27;-r500&#x27;,[&#x27;probe&#x27; num2str(iRot)])</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% ==============================</span></span><br><span class="line">    <span class="comment">% draw rotating frame</span></span><br><span class="line">    <span class="comment">% ==============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% define holder 3D - Printing</span></span><br><span class="line">    holderPrinting = [<span class="number">1.04</span>*(probeSupport2(<span class="number">1</span>,<span class="number">2</span>) + probeSupport2(<span class="number">1</span>,<span class="number">1</span>))/<span class="number">2</span>,       <span class="number">1.0</span>*(probeSupport2(<span class="number">1</span>,<span class="number">2</span>) + probeSupport2(<span class="number">1</span>,<span class="number">1</span>))/<span class="number">2</span>; ...</span><br><span class="line">        (probeSupport2(<span class="number">2</span>,<span class="number">2</span>) + probeSupport2(<span class="number">2</span>,<span class="number">1</span>))/<span class="number">2</span>,            (probeSupport2(<span class="number">2</span>,<span class="number">2</span>) + probeSupport2(<span class="number">2</span>,<span class="number">1</span>))/<span class="number">2</span>; ...</span><br><span class="line">        <span class="number">1.07</span>*(probeSupport2(<span class="number">3</span>,<span class="number">2</span>) + probeSupport2(<span class="number">3</span>,<span class="number">1</span>))/<span class="number">2</span>,  <span class="number">1.07</span>*(probeSupport2(<span class="number">3</span>,<span class="number">2</span>) + probeSupport2(<span class="number">3</span>,<span class="number">1</span>))/<span class="number">2</span>; ...</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% rotating frame</span></span><br><span class="line">    rotatingFrame1 = [(holderPrinting(<span class="number">1</span>,<span class="number">1</span>)+holderPrinting(<span class="number">1</span>,<span class="number">2</span>))/<span class="number">2</span> + <span class="number">0.03</span>*blockLength ,  (holderPrinting(<span class="number">1</span>,<span class="number">1</span>)+holderPrinting(<span class="number">1</span>,<span class="number">2</span>))/<span class="number">2</span> - <span class="number">0.03</span>*blockLength;  ...</span><br><span class="line">        holderPrinting(<span class="number">2</span>,<span class="number">2</span>),    holderPrinting(<span class="number">2</span>,<span class="number">2</span>);  ...</span><br><span class="line">        holderPrinting(<span class="number">3</span>,<span class="number">2</span>) + <span class="number">0.18</span>*blockLength + <span class="number">0.025</span>*blockLength,    holderPrinting(<span class="number">3</span>,<span class="number">2</span>) + <span class="number">0.18</span>*blockLength + <span class="number">0.025</span>*blockLength;  ...</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% rotating frame</span></span><br><span class="line">    rotatingFrame2 = [rotatingFrame1(<span class="number">1</span>,<span class="number">2</span>) + <span class="number">0.06</span>*blockLength,  rotatingFrame1(<span class="number">1</span>,<span class="number">2</span>) - <span class="built_in">abs</span>(rotatingFrame1(<span class="number">1</span>,<span class="number">2</span>) - centrePoint(<span class="number">1</span>));  ...</span><br><span class="line">        rotatingFrame1(<span class="number">2</span>,<span class="number">2</span>),  rotatingFrame1(<span class="number">2</span>,<span class="number">2</span>)                      ;  ...</span><br><span class="line">        rotatingFrame1(<span class="number">3</span>,<span class="number">2</span>) + <span class="number">0.1825</span>*blockLength ,  rotatingFrame1(<span class="number">3</span>,<span class="number">2</span>) + <span class="number">0.1825</span>*blockLength;  ...</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% define motor shaft</span></span><br><span class="line">    motorShaft = [centrePoint(<span class="number">1</span>), centrePoint(<span class="number">1</span>)                  ;</span><br><span class="line">        centrePoint(<span class="number">2</span>), centrePoint(<span class="number">2</span>)                  ;</span><br><span class="line">        rotatingFrame2(<span class="number">3</span>,<span class="number">2</span>) - <span class="number">0.03</span>*blockLength ...</span><br><span class="line">        rotatingFrame2(<span class="number">3</span>,<span class="number">2</span>) + lengthShaft;</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% define motor</span></span><br><span class="line">    motor = [motorShaft(<span class="number">1</span>,<span class="number">2</span>),  motorShaft(<span class="number">1</span>,<span class="number">2</span>)        ;   ...</span><br><span class="line">        motorShaft(<span class="number">2</span>,<span class="number">2</span>),  motorShaft(<span class="number">2</span>,<span class="number">2</span>)        ;   ...</span><br><span class="line">        motorShaft(<span class="number">3</span>,<span class="number">2</span>),  motorShaft(<span class="number">3</span>,<span class="number">2</span>) + <span class="number">0.07</span>*blockLength   ...</span><br><span class="line">        ];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    holderPrinting_rotated = rotate_around_line(holderPrinting,R_z,rotation_point); </span><br><span class="line">    rotatingFrame1_rotated = rotate_around_line(rotatingFrame1,R_z,rotation_point);</span><br><span class="line">    rotatingFrame2_rotated = rotate_around_line(rotatingFrame2,R_z,rotation_point);</span><br><span class="line">    </span><br><span class="line">    motorShaft_rotated = motorShaft;<span class="comment">%rotate_around_line(motorShaft,R_z,rotation_point);</span></span><br><span class="line">    motor_rotated = motor;<span class="comment">% rotate_around_line(motor,R_z,rotation_point);</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    width1  = <span class="number">0.05</span>*blockLength;</span><br><span class="line">    length1 = <span class="number">0.06</span>*blockLength;</span><br><span class="line">    </span><br><span class="line">    dirVec1 = probeHalf1_rotated(:,<span class="number">1</span>)&#x27; - probeHalf1_rotated(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal1 = <span class="built_in">cross</span>(dirVec1,dirVec2);</span><br><span class="line">    refDir1 = dirVec1;</span><br><span class="line">    </span><br><span class="line">    width2  = <span class="number">0.05</span>*blockLength;</span><br><span class="line">    length2 = <span class="number">0.06</span>*blockLength;</span><br><span class="line">    normal2 = <span class="built_in">cross</span>(dirVec1,dirVec2);</span><br><span class="line">    refDir2 = dirVec1;</span><br><span class="line">    </span><br><span class="line">    [X_interp, Y_interp, Z_interp, faces] = ...</span><br><span class="line">        plotCustomOrientedCuboid(holderPrinting_rotated(:,<span class="number">1</span>)&#x27;, width1, length1, normal1, refDir1 ...</span><br><span class="line">        , holderPrinting_rotated(:,<span class="number">2</span>)&#x27;, width2, length2, normal2, refDir2);</span><br><span class="line">    patch(<span class="string">&#x27;Vertices&#x27;</span>, [X_interp(:), Y_interp(:), Z_interp(:)], <span class="string">&#x27;Faces&#x27;</span>, faces, ...</span><br><span class="line">        <span class="string">&#x27;FaceColor&#x27;</span>, copperColor, <span class="string">&#x27;FaceAlpha&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    width1  = (<span class="number">0.36</span>)*blockLength;</span><br><span class="line">    length1 = <span class="number">0.01</span>*blockLength;</span><br><span class="line">    dirVec1 = probeHalf1_rotated(:,<span class="number">1</span>)&#x27; - probeHalf1_rotated(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal1 = <span class="built_in">cross</span>(dirVec1,dirVec2);<span class="comment">%[1 0 0];</span></span><br><span class="line">    refDir1 = dirVec2;</span><br><span class="line">     </span><br><span class="line">    width2  = (<span class="number">0.36</span>)*blockLength;</span><br><span class="line">    length2 = <span class="number">0.01</span>*blockLength;</span><br><span class="line">    dirVec1 = probeHalf1_rotated(:,<span class="number">1</span>)&#x27; - probeHalf1_rotated(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal2 = <span class="built_in">cross</span>(dirVec1,dirVec2);<span class="comment">%[1 0 0];</span></span><br><span class="line">    refDir2 = dirVec2;</span><br><span class="line">    </span><br><span class="line">    [X_interp, Y_interp, Z_interp, faces] = ...</span><br><span class="line">        plotCustomOrientedCuboid(rotatingFrame1_rotated(:,<span class="number">1</span>)&#x27;, width1, length1, normal1, refDir1 ...</span><br><span class="line">        , rotatingFrame1_rotated(:,<span class="number">2</span>)&#x27;, width2, length2, normal2, refDir2);</span><br><span class="line">    patch(<span class="string">&#x27;Vertices&#x27;</span>, [X_interp(:), Y_interp(:), Z_interp(:)], <span class="string">&#x27;Faces&#x27;</span>, faces, ...</span><br><span class="line">        <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;FaceAlpha&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    width1  = <span class="number">0.05</span>*blockLength;</span><br><span class="line">    length1 = <span class="number">0.01</span>*blockLength;</span><br><span class="line">    </span><br><span class="line">    dirVec1 = probeHalf1_rotated(:,<span class="number">1</span>)&#x27; - probeHalf1_rotated(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal1 = <span class="built_in">cross</span>(dirVec1,dirVec2);<span class="comment">%[1 0 0];</span></span><br><span class="line">    refDir1 = dirVec2;</span><br><span class="line">    </span><br><span class="line">    width2  = <span class="number">0.05</span>*blockLength;</span><br><span class="line">    length2 = <span class="number">0.01</span>*blockLength;</span><br><span class="line">    </span><br><span class="line">    dirVec1 = probeHalf1_rotated(:,<span class="number">1</span>)&#x27; - probeHalf1_rotated(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal2 = <span class="built_in">cross</span>(dirVec1,dirVec2);<span class="comment">%[1 0 0];</span></span><br><span class="line">    refDir2 = dirVec2;</span><br><span class="line">    </span><br><span class="line">    [X_interp, Y_interp, Z_interp, faces] = ...</span><br><span class="line">        plotCustomOrientedCuboid(rotatingFrame2_rotated(:,<span class="number">1</span>)&#x27;, width1, length1, normal1, refDir1 ...</span><br><span class="line">        , rotatingFrame2_rotated(:,<span class="number">2</span>)&#x27;, width2, length2, normal2, refDir2);</span><br><span class="line">    patch(<span class="string">&#x27;Vertices&#x27;</span>, [X_interp(:), Y_interp(:), Z_interp(:)], <span class="string">&#x27;Faces&#x27;</span>, faces, ...</span><br><span class="line">        <span class="string">&#x27;FaceColor&#x27;</span>, stainlessColor, <span class="string">&#x27;FaceAlpha&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    diameter = diameterShaft;</span><br><span class="line">    [cyX, cyY, cyZ] = plotCylinder(motorShaft_rotated(:,<span class="number">1</span>)&#x27;, motorShaft_rotated(:,<span class="number">2</span>)&#x27;, diameter);</span><br><span class="line">    surf(cyX, cyY, cyZ, <span class="string">&#x27;FaceColor&#x27;</span>, aluColor, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;FaceAlpha&#x27;</span>,<span class="number">0.99</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    width1  = motorSquare;</span><br><span class="line">    length1 = motorSquare;</span><br><span class="line">   </span><br><span class="line">    dirVec1 = probeHalf1(:,<span class="number">1</span>)&#x27; - probeHalf1(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    normal1 = [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</span><br><span class="line">    refDir1 = [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    width2  = motorSquare;</span><br><span class="line">    length2 = motorSquare;</span><br><span class="line">    dirVec1 = probeHalf1(:,<span class="number">1</span>)&#x27; - probeHalf1(:,<span class="number">2</span>)&#x27;;</span><br><span class="line">    dirVec2 = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    normal2 = [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</span><br><span class="line">    refDir2 = [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    [X_interp, Y_interp, Z_interp, faces] = ...</span><br><span class="line">        plotCustomOrientedCuboid(motor_rotated(:,<span class="number">1</span>)&#x27;, width1, length1, normal1, refDir1 ...</span><br><span class="line">        , motor_rotated(:,<span class="number">2</span>)&#x27;, width2, length2, normal2, refDir2);</span><br><span class="line">    patch(<span class="string">&#x27;Vertices&#x27;</span>, [X_interp(:), Y_interp(:), Z_interp(:)], <span class="string">&#x27;Faces&#x27;</span>, faces, ...</span><br><span class="line">        <span class="string">&#x27;FaceColor&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;FaceAlpha&#x27;</span>, <span class="number">0.8</span>, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>(ax,[centrePoint(<span class="number">1</span>) centrePoint(<span class="number">1</span>)],[centrePoint(<span class="number">2</span>) centrePoint(<span class="number">2</span>)],[<span class="number">10</span> <span class="number">150</span>],<span class="string">&#x27;k--&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.3</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    pause(<span class="number">0.1</span>);</span><br><span class="line">    <span class="built_in">plot3</span>([straightRibletLength straightRibletLength],[<span class="number">0</span> -blockLength*<span class="number">0.1</span>],[<span class="number">0</span> <span class="number">0</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="built_in">plot3</span>([centrePoint(<span class="number">1</span>) centrePoint(<span class="number">1</span>)],[<span class="number">0</span> -blockLength*<span class="number">0.1</span>],[<span class="number">0</span> <span class="number">0</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    startPoint = [straightRibletLength, -blockLength*<span class="number">0.05</span>, <span class="number">0</span>];</span><br><span class="line">    endPoint   = [centrePoint(<span class="number">1</span>), -blockLength*<span class="number">0.05</span>, <span class="number">0</span>];</span><br><span class="line">    arrowSizeFactor = <span class="number">0.18</span>;</span><br><span class="line">    ax = gca;</span><br><span class="line">    color = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    lineWidth = <span class="number">1.2</span>;</span><br><span class="line">    arrowAngleDeg = <span class="number">25</span>;</span><br><span class="line">    drawDoubleArrowWithCustomArrows(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span><br><span class="line">    textLabel = [num2str(<span class="built_in">abs</span>((centrePoint(<span class="number">1</span>) - straightRibletLength)*<span class="built_in">tand</span>(alpha)/<span class="built_in">sind</span>(alpha)),<span class="string">&#x27;%.1f&#x27;</span>)];</span><br><span class="line">    textPosition = (startPoint + endPoint) / <span class="number">2</span> + [<span class="number">0</span>, -blockLength*<span class="number">0.1</span>, <span class="number">0.5</span>]; <span class="comment">% Position text above the line</span></span><br><span class="line"></span><br><span class="line">    text(ax,textPosition(<span class="number">1</span>), textPosition(<span class="number">2</span>), textPosition(<span class="number">3</span>), textLabel, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;FontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    pause(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([motor(<span class="number">1</span>,<span class="number">2</span>)<span class="number">-0.1</span>*blockLength motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.3</span>*blockLength],[motor(<span class="number">2</span>,<span class="number">2</span>) motor(<span class="number">2</span>,<span class="number">2</span>)],[motor(<span class="number">3</span>,<span class="number">1</span>) motor(<span class="number">3</span>,<span class="number">1</span>)],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="built_in">plot3</span>([motor(<span class="number">1</span>,<span class="number">2</span>)<span class="number">-0.1</span>*blockLength motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.3</span>*blockLength],[motor(<span class="number">2</span>,<span class="number">2</span>) motor(<span class="number">2</span>,<span class="number">2</span>)],[<span class="number">0</span> <span class="number">0</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    startPoint = [motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.2</span>*blockLength, motor(<span class="number">2</span>,<span class="number">2</span>), motor(<span class="number">3</span>,<span class="number">1</span>)];</span><br><span class="line">    endPoint   = [motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.2</span>*blockLength, motor(<span class="number">2</span>,<span class="number">2</span>), <span class="number">0</span>];</span><br><span class="line">    arrowSizeFactor = <span class="number">0.1</span>;</span><br><span class="line">    ax = gca;</span><br><span class="line">    color = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    lineWidth = <span class="number">1.2</span>;</span><br><span class="line">    arrowAngleDeg = <span class="number">25</span>;</span><br><span class="line">    drawDoubleArrowWithCustomArrows(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span><br><span class="line">    textLabel = [num2str(<span class="built_in">abs</span>((motor(<span class="number">3</span>,<span class="number">1</span>)))/scaleProp,<span class="string">&#x27;%.1f&#x27;</span>)];   </span><br><span class="line">    textPosition = (startPoint + endPoint) / <span class="number">2</span> + [-blockLength*<span class="number">0.2</span>, <span class="number">0</span>, <span class="number">0.5</span>]; <span class="comment">% Position text above the line</span></span><br><span class="line">    text(ax,textPosition(<span class="number">1</span>), textPosition(<span class="number">2</span>), textPosition(<span class="number">3</span>), textLabel, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;FontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    pause(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">1.0</span>*motorSquare motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.5</span>*motorSquare],[motor(<span class="number">2</span>,<span class="number">2</span>)<span class="number">-0.5</span>*motorSquare motor(<span class="number">2</span>,<span class="number">2</span>)<span class="number">-0.5</span>*motorSquare],[motor(<span class="number">3</span>,<span class="number">2</span>) motor(<span class="number">3</span>,<span class="number">2</span>)],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    <span class="built_in">plot3</span>([motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">1.0</span>*motorSquare motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.5</span>*motorSquare],[motor(<span class="number">2</span>,<span class="number">2</span>)+<span class="number">0.5</span>*motorSquare motor(<span class="number">2</span>,<span class="number">2</span>)+<span class="number">0.5</span>*motorSquare],[motor(<span class="number">3</span>,<span class="number">2</span>) motor(<span class="number">3</span>,<span class="number">2</span>)],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    startPoint = [motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.75</span>*motorSquare, motor(<span class="number">2</span>,<span class="number">2</span>)<span class="number">-0.5</span>*motorSquare, motor(<span class="number">3</span>,<span class="number">2</span>)];</span><br><span class="line">    endPoint   = [motor(<span class="number">1</span>,<span class="number">2</span>) - <span class="number">0.75</span>*motorSquare, motor(<span class="number">2</span>,<span class="number">2</span>)+<span class="number">0.5</span>*motorSquare, motor(<span class="number">3</span>,<span class="number">2</span>)];</span><br><span class="line">    arrowSizeFactor = <span class="number">0.3</span>;</span><br><span class="line">    ax = gca;</span><br><span class="line">    color = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    lineWidth = <span class="number">1.2</span>;</span><br><span class="line">    arrowAngleDeg = <span class="number">25</span>;</span><br><span class="line">    drawDoubleArrowWithCustomArrows(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span><br><span class="line">    textLabel = [num2str(<span class="built_in">abs</span>(motorSquare)/scaleProp,<span class="string">&#x27;%.1f&#x27;</span>)]; </span><br><span class="line">    </span><br><span class="line">    textPosition = (startPoint + endPoint) / <span class="number">2</span> + [<span class="number">0</span>, blockLength*<span class="number">0.2</span>, <span class="number">0.5</span>]; <span class="comment">% Position text above the line</span></span><br><span class="line">    text(ax,textPosition(<span class="number">1</span>), textPosition(<span class="number">2</span>), textPosition(<span class="number">3</span>), textLabel, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;FontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    pause(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>)...</span><br><span class="line">           rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>) + <span class="number">0.5</span>*rotatingframeW]...</span><br><span class="line">           ,[rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>) ...</span><br><span class="line">             rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>)] ...</span><br><span class="line">           ,[rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) -  <span class="number">0.5</span>*rotatingframeL ...</span><br><span class="line">             rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) -  <span class="number">0.5</span>*rotatingframeL]...</span><br><span class="line">           ,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>)...</span><br><span class="line">           rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>) + <span class="number">0.5</span>*rotatingframeW]...</span><br><span class="line">           ,[rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>) ...</span><br><span class="line">           rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>)] ...</span><br><span class="line">           ,[rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) + <span class="number">0.5</span>*rotatingframeL ...</span><br><span class="line">           rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) +  <span class="number">0.5</span>*rotatingframeL]...</span><br><span class="line">           ,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">    startPoint = [rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>) + <span class="number">0.25</span>*rotatingframeW, rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>), rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) -  <span class="number">0.5</span>*rotatingframeL];</span><br><span class="line">    endPoint   = [rotatingFrame1_rotated(<span class="number">1</span>,<span class="number">1</span>) + <span class="number">0.25</span>*rotatingframeW, rotatingFrame1_rotated(<span class="number">2</span>,<span class="number">1</span>), rotatingFrame1_rotated(<span class="number">3</span>,<span class="number">1</span>) +  <span class="number">0.5</span>*rotatingframeL];</span><br><span class="line">    arrowSizeFactor = <span class="number">0.3</span>;</span><br><span class="line">    ax = gca;</span><br><span class="line">    color = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    lineWidth = <span class="number">1.2</span>;</span><br><span class="line">    arrowAngleDeg = <span class="number">25</span>;</span><br><span class="line">    drawDoubleArrowWithCustomArrows(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span><br><span class="line">    textLabel = [num2str(<span class="built_in">abs</span>(rotatingframeL)/scaleProp,<span class="string">&#x27;%.1f&#x27;</span>)]; </span><br><span class="line">    </span><br><span class="line">    textPosition = (startPoint + endPoint) / <span class="number">2</span> + [blockLength*<span class="number">0.2</span>, <span class="number">0</span>, <span class="number">0.5</span>]; <span class="comment">% Position text above the line</span></span><br><span class="line">    text(ax,textPosition(<span class="number">1</span>), textPosition(<span class="number">2</span>), textPosition(<span class="number">3</span>), textLabel, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;FontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    pause(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">1</span>)...</span><br><span class="line">           rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">1</span>)]...</span><br><span class="line">           ,[rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) ...</span><br><span class="line">             rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) - <span class="number">1</span>*rotatingframeW] ...</span><br><span class="line">           ,[rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>) ...</span><br><span class="line">             rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>)]...</span><br><span class="line">           ,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot3</span>([rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">2</span>)...</span><br><span class="line">           rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">2</span>)]...</span><br><span class="line">           ,[rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) ...</span><br><span class="line">           rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) - <span class="number">1</span>*rotatingframeW] ...</span><br><span class="line">           ,[rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>) ...</span><br><span class="line">           rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>)]...</span><br><span class="line">           ,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>,<span class="string">&#x27;Color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">    startPoint = [rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">1</span>), rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) - <span class="number">0.5</span>*rotatingframeW , rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>)];</span><br><span class="line">    endPoint   = [rotatingFrame2_rotated(<span class="number">1</span>,<span class="number">2</span>), rotatingFrame2_rotated(<span class="number">2</span>,<span class="number">1</span>) - <span class="number">0.5</span>*rotatingframeW, rotatingFrame2_rotated(<span class="number">3</span>,<span class="number">1</span>)];</span><br><span class="line">    arrowSizeFactor = <span class="number">0.1</span>;</span><br><span class="line">    ax = gca;</span><br><span class="line">    color = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    lineWidth = <span class="number">1.2</span>;</span><br><span class="line">    arrowAngleDeg = <span class="number">25</span>;</span><br><span class="line">    drawDoubleArrowWithCustomArrows(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span><br><span class="line">    textLabel = [num2str(<span class="built_in">abs</span>(rotatingframeL)/scaleProp,<span class="string">&#x27;%.1f&#x27;</span>)]; </span><br><span class="line">    </span><br><span class="line">    textPosition = (startPoint + endPoint) / <span class="number">2</span> + [-blockLength*<span class="number">0.1</span>, -blockLength*<span class="number">0.2</span>, <span class="number">3</span>]; <span class="comment">% Position text above the line</span></span><br><span class="line">    text(ax,textPosition(<span class="number">1</span>), textPosition(<span class="number">2</span>), textPosition(<span class="number">3</span>), textLabel, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;FontWeight&#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;center&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    pause(<span class="number">0.5</span>)</span><br><span class="line">    set(ax,<span class="string">&#x27;xlim&#x27;</span>,[<span class="number">1.1</span>*tileDimen1/<span class="number">2</span> blockLength*<span class="number">1.8</span>]...</span><br><span class="line">        ,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">0.7</span>*blockLength/<span class="number">3</span> <span class="number">1.3</span>*<span class="number">2</span>*blockLength/<span class="number">3</span>]...</span><br><span class="line">        ,<span class="string">&#x27;zLim&#x27;</span>,[<span class="number">0</span> blockLength*<span class="number">1</span>/<span class="number">2</span>*<span class="number">1.1</span>]...</span><br><span class="line">        ,<span class="string">&#x27;xtick&#x27;</span>,[],<span class="string">&#x27;ytick&#x27;</span>,[],<span class="string">&#x27;ztick&#x27;</span>,[])</span><br><span class="line">    </span><br><span class="line">    pause(<span class="number">0.2</span>)</span><br><span class="line">    </span><br><span class="line">    set(ax,<span class="string">&#x27;xlim&#x27;</span>,[<span class="number">1.3</span>*tileDimen1/<span class="number">2</span> blockLength*<span class="number">1.7</span>]...</span><br><span class="line">        ,<span class="string">&#x27;ylim&#x27;</span>,[blockLength/<span class="number">3</span> <span class="number">2</span>*blockLength/<span class="number">3</span>]...</span><br><span class="line">        ,<span class="string">&#x27;zLim&#x27;</span>,[<span class="number">0</span> blockLength*<span class="number">1</span>/<span class="number">2</span>]...</span><br><span class="line">        ,<span class="string">&#x27;xtick&#x27;</span>,[],<span class="string">&#x27;ytick&#x27;</span>,[],<span class="string">&#x27;ztick&#x27;</span>,[])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    pause(<span class="number">0.2</span>)</span><br><span class="line">    </span><br><span class="line">    set(ax,<span class="string">&#x27;xlim&#x27;</span>,[tileDimen1/<span class="number">2</span>*<span class="number">1.6</span> blockLength*<span class="number">1.35</span>]...</span><br><span class="line">        ,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">2.2</span>*blockLength/<span class="number">5</span> <span class="number">2.8</span>*blockLength/<span class="number">5</span>]...</span><br><span class="line">        ,<span class="string">&#x27;zLim&#x27;</span>,[<span class="number">0</span> blockLength*<span class="number">1</span>/<span class="number">7</span>]...</span><br><span class="line">        ,<span class="string">&#x27;xtick&#x27;</span>,[],<span class="string">&#x27;ytick&#x27;</span>,[],<span class="string">&#x27;ztick&#x27;</span>,[])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawDoubleArrowWithCustomArrows</span><span class="params">(startPoint, endPoint, color, lineWidth, arrowSizeFactor, arrowAngleDeg, ax)</span></span></span><br><span class="line">    <span class="comment">% Draws a 3D line with custom double arrows at each end, scaled to line length</span></span><br><span class="line">    <span class="comment">% Inputs:</span></span><br><span class="line">    <span class="comment">%   startPoint - 1x3 vector [x1, y1, z1] for the line&#x27;s starting point</span></span><br><span class="line">    <span class="comment">%   endPoint - 1x3 vector [x2, y2, z2] for the line&#x27;s ending point</span></span><br><span class="line">    <span class="comment">%   color - Color of the line and arrows</span></span><br><span class="line">    <span class="comment">%   lineWidth - Width of the line</span></span><br><span class="line">    <span class="comment">%   arrowSizeFactor - Fraction of line length for arrowhead size</span></span><br><span class="line">    <span class="comment">%   arrowAngleDeg - Angle of arrowhead opening in degrees</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Extract coordinates and calculate direction vector and line length</span></span><br><span class="line">    x1 = startPoint(<span class="number">1</span>); y1 = startPoint(<span class="number">2</span>); z1 = startPoint(<span class="number">3</span>);</span><br><span class="line">    x2 = endPoint(<span class="number">1</span>); y2 = endPoint(<span class="number">2</span>); z2 = endPoint(<span class="number">3</span>);</span><br><span class="line">    dirVec = [x2 - x1, y2 - y1, z2 - z1];</span><br><span class="line">    lineLength = norm(dirVec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Normalize direction vector and calculate arrowhead size</span></span><br><span class="line">    unitDirVec = dirVec / lineLength;</span><br><span class="line">    arrowSize = lineLength * arrowSizeFactor;</span><br><span class="line">    arrowAngleRad = deg2rad(arrowAngleDeg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Calculate perpendicular vector for the arrow plane</span></span><br><span class="line">    referenceVec = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">dot</span>(referenceVec, unitDirVec)) == <span class="number">1</span></span><br><span class="line">        referenceVec = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    arrowPlaneVec = <span class="built_in">cross</span>(unitDirVec, referenceVec);</span><br><span class="line">    arrowPlaneVec = arrowPlaneVec / norm(arrowPlaneVec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Plot the main line</span></span><br><span class="line">    <span class="built_in">plot3</span>(ax, [x1, x2], [y1, y2], [z1, z2], <span class="string">&#x27;Color&#x27;</span>, color, <span class="string">&#x27;LineWidth&#x27;</span>, lineWidth);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Draw arrowheads at the start and end points</span></span><br><span class="line">    drawArrowhead(x1, y1, z1, unitDirVec, arrowPlaneVec, arrowSize, arrowAngleRad, color, lineWidth, ax); <span class="comment">% Start arrow</span></span><br><span class="line">    drawArrowhead(x2, y2, z2, -unitDirVec, arrowPlaneVec, arrowSize, arrowAngleRad, color, lineWidth, ax); <span class="comment">% End arrow</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawArrowhead</span><span class="params">(x, y, z, unitDirVec, arrowPlaneVec, arrowSize, arrowAngleRad, color, lineWidth, ax)</span></span></span><br><span class="line">    <span class="comment">% Draws an arrowhead at a given point in the specified direction</span></span><br><span class="line">    <span class="comment">% The arrowhead points away from the line.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Arrow base point at the end of the arrow</span></span><br><span class="line">    arrowBase = [x, y, z];  <span class="comment">% Base point is the arrow location (end of the line)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Calculate the two arrowhead endpoints forming the arrow&#x27;s &quot;V&quot; shape</span></span><br><span class="line">    arrowEnd1 = arrowBase + arrowSize * (<span class="built_in">cos</span>(arrowAngleRad) * unitDirVec + <span class="built_in">sin</span>(arrowAngleRad) * arrowPlaneVec);</span><br><span class="line">    arrowEnd2 = arrowBase + arrowSize * (<span class="built_in">cos</span>(arrowAngleRad) * unitDirVec - <span class="built_in">sin</span>(arrowAngleRad) * arrowPlaneVec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Draw each side of the arrowhead using plot3</span></span><br><span class="line">    <span class="built_in">plot3</span>(ax, [arrowBase(<span class="number">1</span>), arrowEnd1(<span class="number">1</span>)], [arrowBase(<span class="number">2</span>), arrowEnd1(<span class="number">2</span>)], [arrowBase(<span class="number">3</span>), arrowEnd1(<span class="number">3</span>)], <span class="string">&#x27;Color&#x27;</span>, color, <span class="string">&#x27;LineWidth&#x27;</span>, lineWidth);</span><br><span class="line">    <span class="built_in">plot3</span>(ax, [arrowBase(<span class="number">1</span>), arrowEnd2(<span class="number">1</span>)], [arrowBase(<span class="number">2</span>), arrowEnd2(<span class="number">2</span>)], [arrowBase(<span class="number">3</span>), arrowEnd2(<span class="number">3</span>)], <span class="string">&#x27;Color&#x27;</span>, color, <span class="string">&#x27;LineWidth&#x27;</span>, lineWidth);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotated_points</span> = <span class="title">rotate_around_line</span><span class="params">(points, R, rotation_point)</span></span></span><br><span class="line"><span class="comment">% Translate points to align rotation point with the origin</span></span><br><span class="line">points_translated = points;</span><br><span class="line">points_translated(<span class="number">1</span>:<span class="number">2</span>, :) = points_translated(<span class="number">1</span>:<span class="number">2</span>, :) - rotation_point(<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Apply rotation</span></span><br><span class="line">rotated_translated = R * points_translated;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Translate back</span></span><br><span class="line">rotated_points = rotated_translated;</span><br><span class="line">rotated_points(<span class="number">1</span>:<span class="number">2</span>, :) = rotated_points(<span class="number">1</span>:<span class="number">2</span>, :) + rotation_point(<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[cyX, cyY, cyZ]</span> = <span class="title">plotCylinder</span><span class="params">(point1, point2, diameter)</span></span></span><br><span class="line"><span class="comment">% plotCylinder: Plots a cylinder between two points in 3D space.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   point1 - Starting point of the cylinder [x1, y1, z1]</span></span><br><span class="line"><span class="comment">%   point2 - Ending point of the cylinder [x2, y2, z2]</span></span><br><span class="line"><span class="comment">%   diameter - Diameter of the cylinder</span></span><br><span class="line"><span class="comment">%   color - Color of the cylinder as a character or RGB triplet</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Example usage:</span></span><br><span class="line"><span class="comment">%   plotCylinder([0, 0, 0], [1, 1, 1], 0.5, &#x27;r&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Calculate the cylinder properties</span></span><br><span class="line">radius = diameter / <span class="number">2</span>;</span><br><span class="line">numPoints = <span class="number">20</span>; <span class="comment">% Resolution of the cylinder</span></span><br><span class="line">[cyX, cyY, cyZ] = cylinder(radius, numPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Vector from point1 to point2</span></span><br><span class="line">vec = point2 - point1;</span><br><span class="line">len = norm(vec); <span class="comment">% Length of the cylinder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Scale the cylinder height</span></span><br><span class="line">cyZ = cyZ * len;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotation calculations</span></span><br><span class="line">theta = <span class="built_in">atan2</span>(vec(<span class="number">2</span>), vec(<span class="number">1</span>)); <span class="comment">% Yaw rotation (around Z-axis)</span></span><br><span class="line">phi = <span class="built_in">acos</span>(vec(<span class="number">3</span>) / len); <span class="comment">% Pitch rotation (around Y-axis)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotation matrices</span></span><br><span class="line">Rz = [<span class="built_in">cos</span>(theta), -<span class="built_in">sin</span>(theta), <span class="number">0</span>; <span class="built_in">sin</span>(theta), <span class="built_in">cos</span>(theta), <span class="number">0</span>; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">Ry = [<span class="built_in">cos</span>(phi), <span class="number">0</span>, <span class="built_in">sin</span>(phi); <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>; -<span class="built_in">sin</span>(phi), <span class="number">0</span>, <span class="built_in">cos</span>(phi)];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotate and translate the cylinder to align with the vector</span></span><br><span class="line">cylinderPoints = [cyX(:), cyY(:), cyZ(:)]&#x27;;</span><br><span class="line">rotatedPoints = Rz * Ry * cylinderPoints;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Reshape back and translate to starting point</span></span><br><span class="line">cyX = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">1</span>,:), <span class="built_in">size</span>(cyX)) + point1(<span class="number">1</span>);</span><br><span class="line">cyY = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">2</span>,:), <span class="built_in">size</span>(cyY)) + point1(<span class="number">2</span>);</span><br><span class="line">cyZ = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">3</span>,:), <span class="built_in">size</span>(cyZ)) + point1(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[cyX, cyY, cyZ]</span> = <span class="title">plotTruncatedCone</span><span class="params">(point1, point2, diameter1, diameter2)</span></span></span><br><span class="line"><span class="comment">% plotTruncatedCone: Plots a truncated cone between two points in 3D space.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   point1 - Starting point of the truncated cone [x1, y1, z1]</span></span><br><span class="line"><span class="comment">%   point2 - Ending point of the truncated cone [x2, y2, z2]</span></span><br><span class="line"><span class="comment">%   diameter1 - Diameter of the base (start) of the truncated cone</span></span><br><span class="line"><span class="comment">%   diameter2 - Diameter of the top (end) of the truncated cone</span></span><br><span class="line"><span class="comment">%   color - Color of the truncated cone as a character or RGB triplet</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Example usage:</span></span><br><span class="line"><span class="comment">%   plotTruncatedCone([0, 0, 0], [1, 1, 1], 4, 5, &#x27;g&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Calculate radii</span></span><br><span class="line">radius1 = diameter1 / <span class="number">2</span>;</span><br><span class="line">radius2 = diameter2 / <span class="number">2</span>;</span><br><span class="line">numPoints = <span class="number">20</span>; <span class="comment">% Resolution of the cone</span></span><br><span class="line">[cyX, cyY, cyZ] = cylinder([radius1, radius2], numPoints);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Vector from point1 to point2</span></span><br><span class="line">vec = point2 - point1;</span><br><span class="line">len = norm(vec); <span class="comment">% Length of the cone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Scale the cone height</span></span><br><span class="line">cyZ = cyZ * len;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotation calculations</span></span><br><span class="line">theta = <span class="built_in">atan2</span>(vec(<span class="number">2</span>), vec(<span class="number">1</span>)); <span class="comment">% Yaw rotation (around Z-axis)</span></span><br><span class="line">phi = <span class="built_in">acos</span>(vec(<span class="number">3</span>) / len); <span class="comment">% Pitch rotation (around Y-axis)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotation matrices</span></span><br><span class="line">Rz = [<span class="built_in">cos</span>(theta), -<span class="built_in">sin</span>(theta), <span class="number">0</span>; <span class="built_in">sin</span>(theta), <span class="built_in">cos</span>(theta), <span class="number">0</span>; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">Ry = [<span class="built_in">cos</span>(phi), <span class="number">0</span>, <span class="built_in">sin</span>(phi); <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>; -<span class="built_in">sin</span>(phi), <span class="number">0</span>, <span class="built_in">cos</span>(phi)];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotate and translate the cone to align with the vector</span></span><br><span class="line">conePoints = [cyX(:), cyY(:), cyZ(:)]&#x27;;</span><br><span class="line">rotatedPoints = Rz * Ry * conePoints;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Reshape back and translate to the starting point</span></span><br><span class="line">cyX = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">1</span>,:), <span class="built_in">size</span>(cyX)) + point1(<span class="number">1</span>);</span><br><span class="line">cyY = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">2</span>,:), <span class="built_in">size</span>(cyY)) + point1(<span class="number">2</span>);</span><br><span class="line">cyZ = <span class="built_in">reshape</span>(rotatedPoints(<span class="number">3</span>,:), <span class="built_in">size</span>(cyZ)) + point1(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X_interp, Y_interp, Z_interp]</span> = <span class="title">plotCustomOrientedCylinder</span><span class="params">(point1, diameter1, normal1, point2, diameter2, normal2, segments)</span></span></span><br><span class="line"><span class="comment">% plotCustomOrientedCylinder: Creates a cylinder with custom orientation planes at each end.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   point1 - 1x3 vector specifying the center of the bottom plane [x, y, z]</span></span><br><span class="line"><span class="comment">%   diameter1 - Diameter of the bottom plane</span></span><br><span class="line"><span class="comment">%   normal1 - 1x3 vector specifying the normal of the bottom plane</span></span><br><span class="line"><span class="comment">%   point2 - 1x3 vector specifying the center of the top plane [x, y, z]</span></span><br><span class="line"><span class="comment">%   diameter2 - Diameter of the top plane</span></span><br><span class="line"><span class="comment">%   normal2 - 1x3 vector specifying the normal of the top plane</span></span><br><span class="line"><span class="comment">%   segments - Number of segments around the circumference</span></span><br><span class="line"><span class="comment">%   color - Color of the cylinder as a character or RGB triplet</span></span><br><span class="line"></span><br><span class="line">radius1 = diameter1 / <span class="number">2</span>;</span><br><span class="line">radius2 = diameter2 / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Normalize the input normal vectors</span></span><br><span class="line">normal1 = normal1 / norm(normal1);</span><br><span class="line">normal2 = normal2 / norm(normal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Generate a basic cylinder with the specified radii</span></span><br><span class="line">[X, Y, Z] = cylinder([radius1, radius2], segments);</span><br><span class="line">height = norm(point2 - point1); <span class="comment">% Scale height to the distance between points</span></span><br><span class="line">Z = Z * height;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Align the bottom plane with normal1</span></span><br><span class="line">[X1, Y1, Z1] = applyRotation(X(<span class="number">1</span>, :), Y(<span class="number">1</span>, :), Z(<span class="number">1</span>, :), point1, normal1);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Align the top plane with normal2</span></span><br><span class="line">[X2, Y2, Z2] = applyRotation(X(<span class="number">2</span>, :), Y(<span class="number">2</span>, :), Z(<span class="number">2</span>, :), point2, normal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Interpolate between the two aligned planes to create a smooth transition</span></span><br><span class="line">X_interp = [X1; X2];</span><br><span class="line">Y_interp = [Y1; Y2];</span><br><span class="line">Z_interp = [Z1; Z2];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Plot the custom-oriented cylinder</span></span><br><span class="line"><span class="comment">%     surf(X_interp, Y_interp, Z_interp, &#x27;FaceColor&#x27;, color, &#x27;EdgeColor&#x27;, &#x27;none&#x27;);</span></span><br><span class="line"><span class="comment">%     axis equal;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X_rot, Y_rot, Z_rot]</span> = <span class="title">applyRotation</span><span class="params">(X, Y, Z, center, normal)</span></span></span><br><span class="line"><span class="comment">% applyRotation: Rotates points to align with a given normal and translates to center.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   X, Y, Z - Coordinates of points to be rotated (relative to origin)</span></span><br><span class="line"><span class="comment">%   center - Target center of rotation [x, y, z]</span></span><br><span class="line"><span class="comment">%   normal - Target normal for the plane [nx, ny, nz]</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Outputs:</span></span><br><span class="line"><span class="comment">%   X_rot, Y_rot, Z_rot - Rotated and translated coordinates</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Define the original normal (along the Z-axis)</span></span><br><span class="line">zAxis = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Calculate the rotation axis and angle to align zAxis with &#x27;normal&#x27;</span></span><br><span class="line">rotAxis = <span class="built_in">cross</span>(zAxis, normal);</span><br><span class="line">rotAngle = <span class="built_in">acos</span>(<span class="built_in">dot</span>(zAxis, normal) / (norm(zAxis) * norm(normal)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> norm(rotAxis) &gt; <span class="number">1e-6</span></span><br><span class="line">    <span class="comment">% Normalize the rotation axis</span></span><br><span class="line">    rotAxis = rotAxis / norm(rotAxis);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Create rotation matrix using Rodrigues&#x27; rotation formula</span></span><br><span class="line">    K = [<span class="number">0</span> -rotAxis(<span class="number">3</span>) rotAxis(<span class="number">2</span>); rotAxis(<span class="number">3</span>) <span class="number">0</span> -rotAxis(<span class="number">1</span>); -rotAxis(<span class="number">2</span>) rotAxis(<span class="number">1</span>) <span class="number">0</span>];</span><br><span class="line">    R = <span class="built_in">eye</span>(<span class="number">3</span>) + <span class="built_in">sin</span>(rotAngle) * K + (<span class="number">1</span> - <span class="built_in">cos</span>(rotAngle)) * (K * K);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">% If rotation is negligible (i.e., z-axis already aligned with normal)</span></span><br><span class="line">    R = <span class="built_in">eye</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Center points at the origin before rotating</span></span><br><span class="line">points = [X - <span class="built_in">mean</span>(X(:)); Y - <span class="built_in">mean</span>(Y(:)); Z - <span class="built_in">mean</span>(Z(:))];</span><br><span class="line"></span><br><span class="line"><span class="comment">% Apply rotation</span></span><br><span class="line">rotatedPoints = R * points;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Translate points back to the specified center</span></span><br><span class="line">X_rot = rotatedPoints(<span class="number">1</span>, :) + center(<span class="number">1</span>);</span><br><span class="line">Y_rot = rotatedPoints(<span class="number">2</span>, :) + center(<span class="number">2</span>);</span><br><span class="line">Z_rot = rotatedPoints(<span class="number">3</span>, :) + center(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X_interp, Y_interp, Z_interp, faces]</span> = <span class="title">plotCustomOrientedCuboid</span><span class="params">(point1, width1, length1, normal1, refDir1, point2, width2, length2, normal2, refDir2)</span></span></span><br><span class="line"><span class="comment">% plotCustomOrientedCuboid: Creates a cuboid with custom rectangular cross-sections</span></span><br><span class="line"><span class="comment">%                           at each end and orientation based on normals.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   point1 - 1x3 vector specifying the center of the bottom face [x, y, z]</span></span><br><span class="line"><span class="comment">%   width1 - Width of the bottom rectangular face</span></span><br><span class="line"><span class="comment">%   length1 - Length of the bottom rectangular face</span></span><br><span class="line"><span class="comment">%   normal1 - 1x3 vector specifying the normal of the bottom face</span></span><br><span class="line"><span class="comment">%   refDir1 - 1x3 vector specifying a reference direction for one side of the bottom face</span></span><br><span class="line"><span class="comment">%   point2 - 1x3 vector specifying the center of the top face [x, y, z]</span></span><br><span class="line"><span class="comment">%   width2 - Width of the top rectangular face</span></span><br><span class="line"><span class="comment">%   length2 - Length of the top rectangular face</span></span><br><span class="line"><span class="comment">%   normal2 - 1x3 vector specifying the normal of the top face</span></span><br><span class="line"><span class="comment">%   refDir2 - 1x3 vector specifying a reference direction for one side of the top face</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Outputs:</span></span><br><span class="line"><span class="comment">%   X_interp, Y_interp, Z_interp - Coordinates for the faces of the cuboid</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">% Half-dimensions for rectangular faces</span></span><br><span class="line">half_width1 = width1 / <span class="number">2</span>;</span><br><span class="line">half_length1 = length1 / <span class="number">2</span>;</span><br><span class="line">half_width2 = width2 / <span class="number">2</span>;</span><br><span class="line">half_length2 = length2 / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Normalize the input normal and reference direction vectors</span></span><br><span class="line">normal1 = normal1 / norm(normal1);</span><br><span class="line">normal2 = normal2 / norm(normal2);</span><br><span class="line">refDir1 = refDir1 / norm(refDir1);</span><br><span class="line">refDir2 = refDir2 / norm(refDir2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Generate rectangular vertices in the XY-plane for both ends</span></span><br><span class="line">rect1 = [-half_width1, -half_length1, <span class="number">0</span>;</span><br><span class="line">    half_width1, -half_length1, <span class="number">0</span>;</span><br><span class="line">    half_width1,  half_length1, <span class="number">0</span>;</span><br><span class="line">    -half_width1,  half_length1, <span class="number">0</span>];</span><br><span class="line">rect2 = [-half_width2, -half_length2, <span class="number">0</span>;</span><br><span class="line">    half_width2, -half_length2, <span class="number">0</span>;</span><br><span class="line">    half_width2,  half_length2, <span class="number">0</span>;</span><br><span class="line">    -half_width2,  half_length2, <span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Rotate and translate rectangles to their respective positions and orientations</span></span><br><span class="line">[X1, Y1, Z1] = applyRotationCuboid(rect1(:,<span class="number">1</span>), rect1(:,<span class="number">2</span>), rect1(:,<span class="number">3</span>), point1, normal1, refDir1);</span><br><span class="line">[X2, Y2, Z2] = applyRotationCuboid(rect2(:,<span class="number">1</span>), rect2(:,<span class="number">2</span>), rect2(:,<span class="number">3</span>), point2, normal2, refDir2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Combine vertices into X_interp, Y_interp, Z_interp for the full cuboid</span></span><br><span class="line">X_interp = [X1; X2];</span><br><span class="line">Y_interp = [Y1; Y2];</span><br><span class="line">Z_interp = [Z1; Z2];</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Define the faces of the cuboid using patch, referring to X_interp, Y_interp, Z_interp</span></span><br><span class="line">faces = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>;  <span class="comment">% Side 1</span></span><br><span class="line">    <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>;  <span class="comment">% Side 2</span></span><br><span class="line">    <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>;  <span class="comment">% Side 3</span></span><br><span class="line">    <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>;  <span class="comment">% Side 4</span></span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>;  <span class="comment">% Bottom face</span></span><br><span class="line">    <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>   <span class="comment">% Top face</span></span><br><span class="line">    ];</span><br><span class="line"> </span><br><span class="line"><span class="comment">% Plot the cuboid (optional)</span></span><br><span class="line"><span class="comment">% patch(&#x27;Vertices&#x27;, [X_interp(:), Y_interp(:), Z_interp(:)], &#x27;Faces&#x27;, faces, ...</span></span><br><span class="line"><span class="comment">%       &#x27;FaceColor&#x27;, &#x27;b&#x27;, &#x27;FaceAlpha&#x27;, 0.5, &#x27;EdgeColor&#x27;, &#x27;none&#x27;);</span></span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[X_rot, Y_rot, Z_rot]</span> = <span class="title">applyRotationCuboid</span><span class="params">(X, Y, Z, center, normal, refDir)</span></span></span><br><span class="line"><span class="comment">% applyRotationCuboid: Rotates points to align with both the normal and reference direction,</span></span><br><span class="line"><span class="comment">%                      and translates to the specified center.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Inputs:</span></span><br><span class="line"><span class="comment">%   X, Y, Z - Coordinates of points to be rotated (relative to origin)</span></span><br><span class="line"><span class="comment">%   center - Target center of rotation [x, y, z]</span></span><br><span class="line"><span class="comment">%   normal - Target normal for the plane [nx, ny, nz]</span></span><br><span class="line"><span class="comment">%   refDir - Target reference direction for an edge [rx, ry, rz]</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Outputs:</span></span><br><span class="line"><span class="comment">%   X_rot, Y_rot, Z_rot - Rotated and translated coordinates</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">% Calculate rotation matrix to align Z-axis with &#x27;normal&#x27;</span></span><br><span class="line">zAxis = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">rotAxis = <span class="built_in">cross</span>(zAxis, normal);</span><br><span class="line">rotAngle = <span class="built_in">acos</span>(<span class="built_in">dot</span>(zAxis, normal));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> norm(rotAxis) &gt; <span class="number">1e-6</span></span><br><span class="line">    rotAxis = rotAxis / norm(rotAxis);</span><br><span class="line">    K = [<span class="number">0</span> -rotAxis(<span class="number">3</span>) rotAxis(<span class="number">2</span>); rotAxis(<span class="number">3</span>) <span class="number">0</span> -rotAxis(<span class="number">1</span>); -rotAxis(<span class="number">2</span>) rotAxis(<span class="number">1</span>) <span class="number">0</span>];</span><br><span class="line">    R1 = <span class="built_in">eye</span>(<span class="number">3</span>) + <span class="built_in">sin</span>(rotAngle) * K + (<span class="number">1</span> - <span class="built_in">cos</span>(rotAngle)) * (K * K);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    R1 = <span class="built_in">eye</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Rotate points to align with normal</span></span><br><span class="line">points = [X, Y, Z]&#x27;;</span><br><span class="line">rotatedPoints = R1 * points;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Calculate the in-plane rotation to align X-axis with &#x27;refDir&#x27;</span></span><br><span class="line">xAxisInPlane = R1(:,<span class="number">1</span>); </span><br><span class="line">inPlaneAxis = <span class="built_in">cross</span>(xAxisInPlane, refDir);</span><br><span class="line">inPlaneAngle = <span class="built_in">acos</span>(<span class="built_in">dot</span>(xAxisInPlane, refDir));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> norm(inPlaneAxis) &gt; <span class="number">1e-6</span></span><br><span class="line">    inPlaneAxis = inPlaneAxis / norm(inPlaneAxis);</span><br><span class="line">    K_inPlane = [<span class="number">0</span> -inPlaneAxis(<span class="number">3</span>) inPlaneAxis(<span class="number">2</span>); inPlaneAxis(<span class="number">3</span>) <span class="number">0</span> -inPlaneAxis(<span class="number">1</span>); -inPlaneAxis(<span class="number">2</span>) inPlaneAxis(<span class="number">1</span>) <span class="number">0</span>];</span><br><span class="line">    R2 = <span class="built_in">eye</span>(<span class="number">3</span>) + <span class="built_in">sin</span>(inPlaneAngle) * K_inPlane + (<span class="number">1</span> - <span class="built_in">cos</span>(inPlaneAngle)) * (K_inPlane * K_inPlane);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    R2 = <span class="built_in">eye</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Apply the in-plane rotation</span></span><br><span class="line">finalRotatedPoints = R2 * rotatedPoints;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Translate points to the specified center</span></span><br><span class="line">X_rot = finalRotatedPoints(<span class="number">1</span>, :)&#x27; + center(<span class="number">1</span>);</span><br><span class="line">Y_rot = finalRotatedPoints(<span class="number">2</span>, :)&#x27; + center(<span class="number">2</span>);</span><br><span class="line">Z_rot = finalRotatedPoints(<span class="number">3</span>, :)&#x27; + center(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>My Custom Latex Style File (.sty)</title>
    <url>/2024/10/17/customSty/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this post, I’m sharing my custom LaTeX <code>.sty</code> file, which I regularly use in my projects. This <code>.sty</code> file includes settings and macros for <strong>biblatex</strong> with <code>biber</code>, custom TikZ symbols, and more.</p>
<p>You can download the <code>.sty</code> file or copy the relevant parts below.</p>
<span id="more"></span> 

<h2 id="Usage-Instructions"><a href="#Usage-Instructions" class="headerlink" title="Usage Instructions"></a>Usage Instructions</h2><p>To use this style file (.sty) in your LaTeX projects, add the following line in the preamble:</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;mycustomstyle&#125;</span><br></pre></td></tr></table></figure>

<p>Additionally, if you would like to use <strong>biblatex</strong>, please include your .bib file (e.g., the name <em>referenceBitex.bib</em>) and add one line as below in the preamable.</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Citation and bibliography commands</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\addbibresource</span>&#123;referenceBitex.bib&#125;      <span class="comment">% Add bibliography file</span></span><br></pre></td></tr></table></figure>

<h2 id="Custom-Sty-File"><a href="#Custom-Sty-File" class="headerlink" title="Custom .Sty File"></a>Custom .Sty File</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% biblatexCitationCusomisedTikz.sty</span></span><br><span class="line"><span class="keyword">\ProvidesPackage</span>&#123;mystyle&#125;[2024/10/16 Personal Style Package by YX]</span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Load essential packages</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>[american]&#123;babel&#125;         <span class="comment">% Language support</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>[utf8]&#123;inputenc&#125;          <span class="comment">% UTF-8 encoding</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;csquotes&#125;                <span class="comment">% Context-sensitive quotation marks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Bibliography using biblatex</span></span><br><span class="line"><span class="comment">% - Uses biber backend</span></span><br><span class="line"><span class="comment">% - APA style</span></span><br><span class="line"><span class="comment">% - Configured for specific citation settings</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>[</span><br><span class="line">    backend=biber,                       <span class="comment">% Specify biber as backend</span></span><br><span class="line">    style=apa,                           <span class="comment">% Use APA citation style</span></span><br><span class="line">    natbib=true,                         <span class="comment">% Enable natbib compatibility</span></span><br><span class="line">    sorting=ynt,                         <span class="comment">% Sort by year, name, title</span></span><br><span class="line">    sortcites=true,                      <span class="comment">% Sort citations within one command</span></span><br><span class="line">    maxcitenames=2,                      <span class="comment">% Maximum number of names in citations</span></span><br><span class="line">    date=year,                           <span class="comment">% Only display year in citations</span></span><br><span class="line">    uniquename=false,                    <span class="comment">% Do not distinguish authors by first names</span></span><br><span class="line">    uniquelist=false                     <span class="comment">% Do not distinguish lists by first names</span></span><br><span class="line">]&#123;biblatex&#125;</span><br><span class="line"><span class="keyword">\DeclareLanguageMapping</span>&#123;american&#125;&#123;american-apa&#125;  <span class="comment">% Set language mapping for APA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Remove certain fields from bibliography</span></span><br><span class="line"><span class="comment">% - DOI, URL, ISSN, etc.</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\DeclareFieldFormat</span>&#123;doi&#125;&#123;&#125;               <span class="comment">% Remove DOI field</span></span><br><span class="line"><span class="keyword">\DeclareFieldFormat</span>&#123;url&#125;&#123;&#125;               <span class="comment">% Remove URL field</span></span><br><span class="line"><span class="keyword">\DeclareFieldFormat</span>&#123;issn&#125;&#123;&#125;              <span class="comment">% Remove ISSN field</span></span><br><span class="line"><span class="comment">%\DeclareFieldFormat&#123;urldate&#125;&#123;&#125;           % (Optional) Disable URL date</span></span><br><span class="line"><span class="comment">%\DeclareFieldFormat&#123;version&#125;&#123;&#125;           % (Optional) Disable version field</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Hyperref for clickable links</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;hyperref&#125;                <span class="comment">% Enable hyperlinks</span></span><br><span class="line"><span class="keyword">\hypersetup</span>&#123;</span><br><span class="line">    colorlinks=true,                     <span class="comment">% Enable colored links</span></span><br><span class="line">    linktoc=all,                         <span class="comment">% Make table of contents fully linked</span></span><br><span class="line">    citecolor=black,                     <span class="comment">% Set citation link color to black</span></span><br><span class="line">    filecolor=black,                     <span class="comment">% Set file link color to black</span></span><br><span class="line">    linkcolor=black,                     <span class="comment">% Set hyperlink color to black</span></span><br><span class="line">    urlcolor=black                       <span class="comment">% Set URL link color to black</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Cleveref for enhanced cross-referencing</span></span><br><span class="line"><span class="comment">% - Customize names of references</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>[capitalize]&#123;cleveref&#125;    <span class="comment">% Capitalize cref references</span></span><br><span class="line"><span class="keyword">\crefname</span>&#123;figure&#125;&#123;Figure&#125;&#123;Figures&#125;       <span class="comment">% Custom name for figures</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Custom commands for references</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\seecref</span>&#125;[1]&#123;(see <span class="keyword">\cref</span>&#123;<span class="params">#1</span>&#125;)&#125;   <span class="comment">% Custom &quot;see cref&quot;</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\cfcref</span>&#125;[1]&#123;(cf. <span class="keyword">\cref</span>&#123;<span class="params">#1</span>&#125;)&#125;    <span class="comment">% Custom &quot;cf. cref&quot;</span></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\figref</span>&#125;[1]&#123;Figure~<span class="keyword">\ref</span>&#123;<span class="params">#1</span>&#125;&#125;    <span class="comment">% Custom &quot;Figure&quot; reference</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Math symbols and utilities</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;upgreek&#125;                 <span class="comment">% Upright Greek symbols</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Custom colors (for plots or other uses)</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;tikz&#125;                    <span class="comment">% Enable TikZ for drawing</span></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;blue1&#125;&#123;rgb&#125;&#123;0.1216,0.4667,0.7059&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;red1&#125;&#123;rgb&#125;&#123;0.8392,0.1529,0.1569&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;brown1&#125;&#123;RGB&#125;&#123;140,86,76&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;green1&#125;&#123;RGB&#125;&#123;43,160,43&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;blue2&#125;&#123;RGB&#125;&#123;66,146,198&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;magenta2&#125;&#123;RGB&#125;&#123;223,62,155&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;orange2&#125;&#123;RGB&#125;&#123;239,102,71&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;red2&#125;&#123;rgb&#125;&#123;0.9373,0.3961,0.2824&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;magenta3&#125;&#123;rgb&#125;&#123;0.8902,0.4667,0.7608&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;grey1&#125;&#123;rgb&#125;&#123;0.5,0.5,0.5&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;delta1&#125;&#123;rgb&#125;&#123;0.8431,0.1882,0.1216&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;delta2&#125;&#123;rgb&#125;&#123;0.6824,0.0039,0.4941&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;delta3&#125;&#123;rgb&#125;&#123;0.1294,0.4431,0.7098&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;orange1&#125;&#123;RGB&#125;&#123;255,127,14&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Custom TikZ commands for shapes and symbols</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\plusdefined</span>&#125;[1]&#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,0) -- (0.50em,0);</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0.275em,0.275em) -- (0.275em,-0.275em);</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\fillddiamondColor</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[line width=<span class="params">#1</span>]</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt, diamond, minimum size=0.55em, draw=none,fill=<span class="params">#2</span>] (diamond) &#123;&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\filldsquareColor</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[line width=<span class="params">#1</span>]</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt, minimum size=0.55em, draw=none,fill=<span class="params">#2</span>] (square) &#123;&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\crossdefined</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (cross) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,0) -- (0.3525em,-0.3525em);</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,-0.3525em) -- (0.3525em,0);</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\filluptriangle</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[line width=<span class="params">#1</span>]</span><br><span class="line">    <span class="keyword">\draw</span>[fill=<span class="params">#2</span>, draw = <span class="params">#2</span>, line width=<span class="params">#1</span>] </span><br><span class="line">    (0,0) -- ++(0.55em,0) -- ++(-0.275em,0.55em) -- cycle;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\uptriangle</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\fill</span>[line width = <span class="params">#1</span>,color = <span class="params">#2</span>,fill = none,draw = <span class="params">#2</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\downtriangle</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\fill</span>[line width = <span class="params">#1</span>,color = <span class="params">#2</span>,fill = none,draw = <span class="params">#2</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,-0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% PGFPlots setup (for data plots)</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;pgfplots&#125;</span><br><span class="line"><span class="keyword">\pgfplotsset</span>&#123;compat=newest&#125;</span><br><span class="line">  <span class="comment">%% the following commands are needed for some matlab2tikz features</span></span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;plotmarks&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;arrows.meta&#125;</span><br><span class="line"><span class="keyword">\usepgfplotslibrary</span>&#123;patchplots&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;arrows,shapes&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;decorations.pathreplacing&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;snakes&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;calc,positioning,shadows.blur,decorations.pathreplacing&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;arrows,shapes&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Table styling packages</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;threeparttable&#125;          <span class="comment">% Enable table notes</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;booktabs&#125;                <span class="comment">% Professional table formatting</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;caption&#125;                 <span class="comment">% Advanced caption control</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="comment">% Landscape support (for wide figures or tables)</span></span><br><span class="line"><span class="comment">% ===============================</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>&#123;pdflscape&#125;               <span class="comment">% Support for rotating pages in landscape mode</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% % Make journal titles in article references clickable</span></span><br><span class="line"><span class="comment">% \DeclareFieldFormat[article]&#123;journaltitle&#125;&#123;\href&#123;\thefield&#123;url&#125;&#125;&#123;\textnormal&#123;#1&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">% % Remove quotation marks around article titles</span></span><br><span class="line"><span class="comment">% \DeclareFieldFormat[article]&#123;title&#125;&#123;#1&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-functional Power Box</title>
    <url>/2024/10/10/powerBoxControl/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>I am excited to unveil a newly developed multi-functional power box, designed speficially for engineering-related projects.<br>This versatile device is equipped with several key features to streamline your work.</p>
<span id="more"></span> 

<h2 id="Key-Features"><a href="#Key-Features" class="headerlink" title="Key Features"></a>Key Features</h2><ul>
<li><p><strong>Dual Relay System</strong>:</p>
<ul>
<li><strong>Outlet 1</strong>: Connected to a solid-state relay, perfect for use in PID control systems.</li>
<li><strong>Outlet 2</strong>: Equipped with a mechanical relay, ideal for simple on&#x2F;off power operations.</li>
</ul>
</li>
<li><p><strong>Integrated AC Power Meter</strong>:</p>
<ul>
<li>Provides instant and accurate measurements of current and voltage, with a precision of ±1 W.</li>
</ul>
</li>
<li><p><strong>Expandable with Arduino Mega</strong>:</p>
<ul>
<li>The embedded Arduino Mega board allows for easy expansion. You can add modules for monitoring temperature, pressure, and more, making this power box highly adaptable for future developments.</li>
</ul>
</li>
</ul>
<p>For a closer look, check out the images of the power box below:</p>
<p><img src="/2024/10/10/powerBoxControl/powerBoxPic.jpeg" alt="Power Box"></p>
<h2 id="Arduino-Code"><a href="#Arduino-Code" class="headerlink" title="Arduino Code"></a>Arduino Code</h2><p>The board comes pre-loaded with essential Arduino code, ensuring the power box is ready to use straight out of the box.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Title: Dual Relay Controller</span></span><br><span class="line"><span class="comment">  Made by: YX</span></span><br><span class="line"><span class="comment">  Location: Melbourne</span></span><br><span class="line"><span class="comment">  Date: 20241010</span></span><br><span class="line"><span class="comment">  Description: This program is designed to control two relays, one mechanical and one SSR (Solid State Relay),</span></span><br><span class="line"><span class="comment">  allowing for triggering via serial commands.</span></span><br><span class="line"><span class="comment">  Expansion: The function can be extended to measure AC power, voltage, current when using PZEM004T.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PWM.h&gt;</span>  <span class="comment">//download https://code.google.com/archive/p/arduino-pwm-frequency-library/downloads</span></span></span><br><span class="line"><span class="comment">// edit ATimerDefs.h and add &#x27;(0,0,0,0,0), // TIMER1C&#x27;  after Line 107</span></span><br><span class="line"><span class="comment">// if applied to Arduino Mega 2560</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PZEM004Tv30.h&gt;</span>  <span class="comment">// Power meter library</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This code runs on mega and uno.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">PZEM004Tv30 <span class="title">pzemOT1</span><span class="params">(<span class="number">68</span>, <span class="number">69</span>)</span></span>;  <span class="comment">// power meter</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> power1;</span><br><span class="line"><span class="type">float</span> voltage1;</span><br><span class="line"><span class="type">float</span> current1;</span><br><span class="line"><span class="type">float</span> factor1;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> powerx;</span><br><span class="line"><span class="type">int</span> relayPin = <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initializ the SSRs</span></span><br><span class="line"><span class="comment">//use pin 11 on the Mega instead, otherwise there is a frequency cap at 31 Hz</span></span><br><span class="line"><span class="comment">//  ledTimer0  Pins 13, 4  might influence the internal clock</span></span><br><span class="line"><span class="type">int</span> ledTimer1 = <span class="number">5</span>;      <span class="comment">// Pins 11, 12 16-bits timer</span></span><br><span class="line"><span class="type">int32_t</span> frequency = <span class="number">1</span>;  <span class="comment">//PWM frequency (in Hz)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mark = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// String comdata = &quot;&quot;;       // initialize input string</span></span><br><span class="line"><span class="type">int</span> numdata[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">float</span> DutyCircle;</span><br><span class="line"><span class="type">const</span> byte numChars = <span class="number">32</span>;</span><br><span class="line"><span class="type">char</span> comdata[numChars];</span><br><span class="line"></span><br><span class="line">boolean newData = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//initialize all timers except for 0, to save time keeping functions</span></span><br><span class="line">  <span class="built_in">InitTimersSafe</span>();</span><br><span class="line">    <span class="built_in">pinMode</span>(relayPin, OUTPUT);  </span><br><span class="line">  <span class="built_in">digitalWrite</span>(relayPin, LOW);</span><br><span class="line">  <span class="comment">//sets the frequency for the specified pin</span></span><br><span class="line">  <span class="type">bool</span> success1 = <span class="built_in">SetPinFrequencySafe</span>(ledTimer1, frequency);</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);  <span class="comment">// set up communication</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(ledTimer1, LOW);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;Power box&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!Serial) &#123;</span><br><span class="line">    ;  <span class="comment">// wait for serial port to connect. Needed for native USB</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">recvWithStartEndMarkers</span>();</span><br><span class="line">  <span class="keyword">if</span> (newData == <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;P&#x27;</span> &amp;&amp; comdata[<span class="number">1</span>] == <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;power reading&quot;</span>);</span><br><span class="line">      powerx = pzemOT<span class="number">1.</span><span class="built_in">power</span>();</span><br><span class="line">      <span class="comment">//    voltage1 = pzemOT1.voltage();</span></span><br><span class="line">      <span class="comment">//    current1 = pzemOT1.current();</span></span><br><span class="line">      <span class="comment">//    power1 = voltage1 * current1;</span></span><br><span class="line">      power1 = pzemOT<span class="number">1.</span><span class="built_in">power</span>();</span><br><span class="line">      <span class="comment">//    factor1 = pzemOT1.powerfactor();</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">isnan</span>(power1)) &#123;</span><br><span class="line">        <span class="comment">//        Serial.print(&quot;1: &quot;);</span></span><br><span class="line">        Serial.<span class="built_in">print</span>(power1);</span><br><span class="line">        Serial.<span class="built_in">println</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;1: OFF&quot;</span>);</span><br><span class="line">        <span class="comment">// Serial.print(voltage1); Serial.println();</span></span><br><span class="line">        <span class="comment">// Serial.print(current1); Serial.println();</span></span><br><span class="line">      &#125;</span><br><span class="line">      mark = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; comdata[<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; comdata[<span class="number">2</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">      mark = <span class="number">1</span>;</span><br><span class="line">      <span class="type">char</span>* commaPtr = <span class="built_in">strchr</span>(comdata,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">      <span class="comment">// Check if the comma exists</span></span><br><span class="line">     <span class="keyword">if</span> (commaPtr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="type">float</span> value = <span class="built_in">atof</span>(commaPtr + <span class="number">1</span>); <span class="comment">// Convert string after the comma</span></span><br><span class="line">            <span class="comment">// Now you can use &#x27;value&#x27; as a float</span></span><br><span class="line">      <span class="keyword">if</span> (value &lt; <span class="number">256</span>)&#123;      </span><br><span class="line">      <span class="built_in">pwmWrite</span>(ledTimer1, value);  <span class="comment">// change the duty circle</span></span><br><span class="line">      <span class="type">float</span> DutyCycle = <span class="built_in">float</span>(value) / <span class="number">255</span> * <span class="number">100</span>;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;SSR Relay Activate and The Duty Cycle is &quot;</span>);</span><br><span class="line">      Serial.<span class="built_in">println</span>(DutyCycle);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;Exceeds 255; ignoring.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;SSR Relay Deactivate&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; comdata[<span class="number">1</span>] == <span class="string">&#x27;O&#x27;</span> &amp;&amp; comdata[<span class="number">2</span>] == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;Relay On&quot;</span>);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(relayPin, HIGH);</span><br><span class="line">      mark = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; comdata[<span class="number">1</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp; comdata[<span class="number">2</span>] == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;Relay Off&quot;</span>);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="built_in">digitalWrite</span>(relayPin, LOW);</span><br><span class="line">      mark = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newData = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recvWithStartEndMarkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> boolean recvInProgress = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">static</span> byte ndx = <span class="number">0</span>;</span><br><span class="line">  <span class="type">char</span> startMarker = <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">  <span class="type">char</span> endMarker = <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">  <span class="type">char</span> rc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if (Serial.available() &gt; 0) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span> &amp;&amp; newData == <span class="literal">false</span>) &#123;</span><br><span class="line">    rc = Serial.<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (recvInProgress == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rc != endMarker) &#123;</span><br><span class="line">        comdata[ndx] = rc;</span><br><span class="line">        ndx++;</span><br><span class="line">        <span class="keyword">if</span> (ndx &gt;= numChars) &#123;</span><br><span class="line">          ndx = numChars - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        comdata[ndx] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// terminate the string</span></span><br><span class="line">        recvInProgress = <span class="literal">false</span>;</span><br><span class="line">        ndx = <span class="number">0</span>;</span><br><span class="line">        newData = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rc == startMarker) &#123;</span><br><span class="line">      recvInProgress = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mark = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I also attach a demo MATLAB code in the following.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">serialRelayControl</span><span class="params">(action, varargin)</span></span></span><br><span class="line">    <span class="comment">% serialRelayControl Handle serial port actions </span></span><br><span class="line">    <span class="comment">% Created by YX on 2024.10.12</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Copyright (c) 2024 YX</span></span><br><span class="line">    <span class="comment">% All rights reserved.</span></span><br><span class="line">    <span class="comment">% Commerical use is prohibited without explicit permission</span></span><br><span class="line">    <span class="comment">% Examples:</span></span><br><span class="line">    <span class="comment">% Create: s = serialRelayControl(&#x27;create&#x27;, &#x27;COM7&#x27;);</span></span><br><span class="line">    <span class="comment">% Write: serialRelayControl(&#x27;write&#x27;, s, &#x27;yourCommand&#x27;);</span></span><br><span class="line">    <span class="comment">% Remove: s = serialRelayControl(&#x27;remove&#x27;, s);</span></span><br><span class="line">    </span><br><span class="line">    action = lower(action);  </span><br><span class="line">    <span class="keyword">switch</span> action</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;create&#x27;</span></span><br><span class="line">            port = varargin&#123;<span class="number">1</span>&#125;;</span><br><span class="line">            s = createPort(port);</span><br><span class="line">            readFromPort(s);        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span></span><br><span class="line">            s = varargin&#123;<span class="number">1</span>&#125;;</span><br><span class="line">            command = varargin&#123;<span class="number">2</span>&#125;;</span><br><span class="line">            writeToPort(s, command);</span><br><span class="line">            readFromPort(s);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;remove&#x27;</span></span><br><span class="line">            s = varargin&#123;<span class="number">1</span>&#125;;</span><br><span class="line">            removePort(s);</span><br><span class="line">        <span class="keyword">otherwise</span></span><br><span class="line">            error(<span class="string">&#x27;Unknown action.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span> = <span class="title">createPort</span><span class="params">(port)</span></span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        s = serialport(port, <span class="number">115200</span>);</span><br><span class="line">        s.Timeout = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">catch</span> ME</span><br><span class="line">        warning(<span class="string">&#x27;Failed to create serial port: %s&#x27;</span>, ME.message);</span><br><span class="line">        s = [];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeToPort</span><span class="params">(s, command)</span></span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(s) &amp;&amp; isvalid(s)</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            pause(<span class="number">.1</span>);</span><br><span class="line">            writeline(s, command);</span><br><span class="line">            pause(<span class="number">.1</span>);</span><br><span class="line">        <span class="keyword">catch</span> ME</span><br><span class="line">            warning(<span class="string">&#x27;Failed to write to serial port: %s&#x27;</span>, ME.message);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;No active serial port connection.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFromPort</span><span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(s) &amp;&amp; isvalid(s)</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            pause(<span class="number">.1</span>);</span><br><span class="line">            <span class="keyword">if</span> s.NumBytesAvailable &gt; <span class="number">0</span></span><br><span class="line">                output = readline(s);</span><br><span class="line">               pause(<span class="number">.1</span>);</span><br><span class="line">                <span class="built_in">disp</span>([<span class="string">&#x27;Received: &#x27;</span>, output]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">disp</span>(<span class="string">&#x27;No data available.&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">            warning(<span class="string">&#x27;Error reading from serial port.&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;No active serial port connection.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removePort</span><span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(s) &amp;&amp; isvalid(s)</span><br><span class="line">        delete(s);</span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;Serial port connection removed.&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;No active serial port connection to remove.&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>Arduino Code</tag>
      </tags>
  </entry>
  <entry>
    <title>DT series board for DT9828 signal collection</title>
    <url>/2024/10/09/DT9828CalibCode/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>The following MATLAB code is specifically used for DT9828 boards.</p>
<span id="more"></span> 

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% DT9828 Instant Data Collection</span></span><br><span class="line"><span class="comment">% Created by YX in Melbourne, on 2024.10.9</span></span><br><span class="line"></span><br><span class="line">clear; close all;</span><br><span class="line">daqreset;</span><br><span class="line">daqlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Global variables for data and timestamps</span></span><br><span class="line"><span class="keyword">global</span> data1 timestamps1 data2 timestamps2 data3 timestamps3 data4 timestamps4</span><br><span class="line"></span><br><span class="line"><span class="comment">% Create a new folder for saving data</span></span><br><span class="line">nameFolder = newFolderCreate();</span><br><span class="line"><span class="comment">%% Device Setup</span></span><br><span class="line">deviceName = &#123;<span class="string">&#x27;DT9828(00)&#x27;</span>, <span class="string">&#x27;DT9828(01)&#x27;</span>&#125;;</span><br><span class="line">pName = &#123;<span class="string">&#x27;DAQ1&#x27;</span>;<span class="string">&#x27;DAQ2&#x27;</span>&#125;;</span><br><span class="line">cName = &#123;<span class="string">&#x27;0---7&#x27;</span>;<span class="string">&#x27;0---7&#x27;</span>&#125;;</span><br><span class="line">ppName = &#123;<span class="string">&#x27;0---7&#x27;</span>;<span class="string">&#x27;0---7&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">samplingTime = <span class="number">20</span>;</span><br><span class="line">samplingRate = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">jChan = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> iDevice = <span class="number">1</span>:<span class="built_in">length</span>(deviceName)</span><br><span class="line">    info = <span class="built_in">table</span>(string(deviceName&#123;iDevice&#125;), string(pName&#123;iDevice&#125;), string(cName&#123;iDevice&#125;), string(ppName&#123;iDevice&#125;), ...</span><br><span class="line">        <span class="string">&#x27;VariableNames&#x27;</span>, &#123;<span class="string">&#x27;Device Name&#x27;</span>, <span class="string">&#x27;DAQ Board&#x27;</span>, <span class="string">&#x27;Channel No.&#x27;</span>, <span class="string">&#x27;Thermocouple Label&#x27;</span>&#125;);</span><br><span class="line">    <span class="built_in">writetable</span>(info, fullfile(nameFolder, [deviceName&#123;iDevice&#125; <span class="string">&#x27;.txt&#x27;</span>]), <span class="string">&#x27;Delimiter&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    devID = [deviceName&#123;iDevice&#125;(<span class="number">1</span>:<span class="number">6</span>), deviceName&#123;iDevice&#125;(<span class="number">8</span>:<span class="number">9</span>)];</span><br><span class="line">    ai.(devID) = daq(<span class="string">&#x27;dt&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> iChan = <span class="number">0</span>:<span class="number">7</span></span><br><span class="line">        ch(jChan) = addinput(ai.(devID), deviceName&#123;iDevice&#125;, num2str(iChan), <span class="string">&#x27;Voltage&#x27;</span>);</span><br><span class="line">        pause(<span class="number">0.2</span>);</span><br><span class="line">        <span class="keyword">if</span> strcmp(deviceName&#123;iDevice&#125;, <span class="string">&#x27;DT9806(00)&#x27;</span>) &amp;&amp; iChan == <span class="number">0</span></span><br><span class="line">            ch(jChan).Range = [<span class="number">-1</span>, <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ch(jChan).Range = [<span class="number">-0.02</span>, <span class="number">0.02</span>];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        jChan = jChan + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    samplingRate = <span class="number">25</span>;</span><br><span class="line">    ai.(devID).Rate = samplingRate;</span><br><span class="line">    fprintf(<span class="string">&#x27;\n Sampling rate is %.f\n&#x27;</span>, samplingRate);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Data Acquisition</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> contains(deviceName, <span class="string">&#x27;DT9832(00)&#x27;</span>)</span><br><span class="line">    ai.DT983200 = daq(<span class="string">&#x27;dt&#x27;</span>);  <span class="comment">% thermistor calibration</span></span><br><span class="line">    addinput(ai.DT983200, <span class="string">&#x27;DT9832(00)&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Voltage&#x27;</span>);</span><br><span class="line">    ai.DT983200.Rate = samplingRate;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> iDevice = <span class="number">1</span>:<span class="built_in">length</span>(deviceName)</span><br><span class="line">        devID = [deviceName&#123;iDevice&#125;(<span class="number">1</span>:<span class="number">6</span>), deviceName&#123;iDevice&#125;(<span class="number">8</span>:<span class="number">9</span>)];</span><br><span class="line">        fName = [devID, <span class="string">&#x27;tcData&#x27;</span>, num2str(iCali)];</span><br><span class="line">        fComplete = fullfile(nameFolder, fName);</span><br><span class="line">        <span class="keyword">if</span> isfile([fComplete <span class="string">&#x27;.dat&#x27;</span>])</span><br><span class="line">            <span class="comment">% If it exists, delete the old file</span></span><br><span class="line">            delete([fComplete <span class="string">&#x27;.dat&#x27;</span>]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">         ai.(devID).ScansAvailableFcn = @(src, evt) logData(src, evt, fComplete);</span><br><span class="line">         flush(ai.(devID));</span><br><span class="line">         start(ai.(devID), <span class="string">&#x27;Duration&#x27;</span>, seconds(samplingTime));  </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Wait for data collection</span></span><br><span class="line">    kk = <span class="number">0</span>; </span><br><span class="line">    col = [<span class="number">0</span>          <span class="number">0.4470</span> <span class="number">0.7410</span>;</span><br><span class="line">              <span class="number">0.8500</span> <span class="number">0.3250</span> <span class="number">0.0980</span>;</span><br><span class="line">              <span class="number">0.9290</span> <span class="number">0.6940</span> <span class="number">0.1250</span>;</span><br><span class="line">              <span class="number">0.4940</span> <span class="number">0.1840</span> <span class="number">0.5560</span>;</span><br><span class="line">              <span class="number">0.4660</span> <span class="number">0.6740</span> <span class="number">0.1880</span>;</span><br><span class="line">              <span class="number">0.3010</span> <span class="number">0.7450</span> <span class="number">0.9330</span>;</span><br><span class="line">              <span class="number">0.6350</span> <span class="number">0.0780</span> <span class="number">0.1840</span>;</span><br><span class="line">              <span class="number">1</span>          <span class="number">0</span>          <span class="number">1</span>    ;</span><br><span class="line">              <span class="number">0</span>          <span class="number">1</span>          <span class="number">1</span>    ;</span><br><span class="line">              ];</span><br><span class="line">    sym = <span class="string">&#x27;sov^h&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    hFig  = <span class="built_in">figure</span>;ax(<span class="number">1</span>) = axes(<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);<span class="built_in">hold</span>(ax(<span class="number">1</span>),<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    set(ax,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">0</span> <span class="number">50</span>]);</span><br><span class="line">    xlabel(ax,<span class="string">&#x27;$t$ (s)&#x27;</span>,<span class="string">&#x27;Interpreter&#x27;</span>,<span class="string">&#x27;LaTex&#x27;</span>);</span><br><span class="line">    ylabel(ax,<span class="string">&#x27;$T$ (C)&#x27;</span>,<span class="string">&#x27;Interpreter&#x27;</span>,<span class="string">&#x27;LaTex&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ai.(devID).Running</span><br><span class="line">        pause(<span class="number">0.5</span>)</span><br><span class="line">        fprintf(<span class="string">&#x27;\n Running %d s \n&#x27;</span>);</span><br><span class="line">        <span class="comment">% Function to calculate mean data and time</span></span><br><span class="line">        calculateMean = @(data, timestamps) deal(<span class="built_in">mean</span>(data, <span class="number">1</span>), <span class="built_in">mean</span>(timestamps));</span><br><span class="line">        <span class="comment">% Define data and timestamp variables</span></span><br><span class="line">        dataSets = &#123;data1, data2, data3, data4&#125;;</span><br><span class="line">        timeSets = &#123;timestamps1, timestamps2, timestamps3, timestamps4&#125;;</span><br><span class="line">        meanData = cell(<span class="number">1</span>, <span class="built_in">length</span>(dataSets));</span><br><span class="line">        meanTime = cell(<span class="number">1</span>, <span class="built_in">length</span>(timeSets));</span><br><span class="line"></span><br><span class="line">        <span class="comment">% Calculate means for each data set</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(dataSets)</span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(dataSets&#123;<span class="built_in">i</span>&#125;) &amp;&amp; ~<span class="built_in">isempty</span>(timeSets&#123;<span class="built_in">i</span>&#125;)</span><br><span class="line">                [meanData&#123;<span class="built_in">i</span>&#125;, meanTime&#123;<span class="built_in">i</span>&#125;] = calculateMean(dataSets&#123;<span class="built_in">i</span>&#125;, timeSets&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                [meanData&#123;<span class="built_in">i</span>&#125;, meanTime&#123;<span class="built_in">i</span>&#125;] = deal(NaN(<span class="number">1</span>, <span class="number">8</span>), NaN);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% Plotting</span></span><br><span class="line">        <span class="keyword">for</span> iData = <span class="number">1</span>:<span class="number">8</span></span><br><span class="line">            <span class="keyword">for</span> jData = <span class="number">1</span>:<span class="built_in">length</span>(meanData)</span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isnan</span>(meanTime&#123;jData&#125;) &amp;&amp; ~<span class="built_in">isnan</span>(meanData&#123;jData&#125;(iData))</span><br><span class="line">                    <span class="comment">% Use MarkerFaceColor for datasets 2, 3, and 4</span></span><br><span class="line">                    <span class="built_in">plot</span>(meanTime&#123;jData&#125;, meanData&#123;jData&#125;(iData), sym(jData), <span class="string">&#x27;Color&#x27;</span>, col(iData,:), ...</span><br><span class="line">                        <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;MarkerFaceColor&#x27;</span>, col(iData,:), <span class="string">&#x27;MarkerSize&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">                    meanTime&#123;jData&#125;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        drawnow()</span><br><span class="line">        kk = kk + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Plot results</span></span><br><span class="line">    hFig  = <span class="built_in">figure</span>;ax(<span class="number">1</span>) = axes;<span class="built_in">hold</span>(ax(<span class="number">1</span>),<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> iDevice = <span class="number">1</span>:<span class="built_in">length</span>(deviceName)</span><br><span class="line">        devID = [deviceName&#123;iDevice&#125;(<span class="number">1</span>:<span class="number">6</span>), deviceName&#123;iDevice&#125;(<span class="number">8</span>:<span class="number">9</span>)];</span><br><span class="line">        fName = [devID, <span class="string">&#x27;tcData&#x27;</span>, num2str(iCali)];</span><br><span class="line">        fComplete = fullfile(nameFolder, fName);</span><br><span class="line">        alldata = load([fComplete, <span class="string">&#x27;.dat&#x27;</span>]);</span><br><span class="line">        insTC = alldata(:, <span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">        <span class="built_in">plot</span>(alldata(:, <span class="number">1</span>), insTC, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">1.2</span>);</span><br><span class="line">        <span class="built_in">hold</span> on;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    set(ax,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">0</span> <span class="number">50</span>]);</span><br><span class="line">    xlabel(<span class="string">&#x27;$t$ (s)&#x27;</span>, <span class="string">&#x27;Interpreter&#x27;</span>, <span class="string">&#x27;Latex&#x27;</span>);</span><br><span class="line">    ylabel(<span class="string">&#x27;T (C)&#x27;</span>, <span class="string">&#x27;Interpreter&#x27;</span>, <span class="string">&#x27;Latex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Helper Functions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameFolder</span> = <span class="title">newFolderCreate</span></span></span><br><span class="line">    nFolder = clock;</span><br><span class="line">    nameFolder = strcat(num2str(nFolder(<span class="number">2</span>)), num2str(nFolder(<span class="number">3</span>)));</span><br><span class="line">    <span class="keyword">if</span> ~isfolder(nameFolder)</span><br><span class="line">        mkdir(nameFolder);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span><span class="params">(src, ~, fname)</span></span></span><br><span class="line"><span class="keyword">global</span> data1 timestamps1 data2 timestamps2 data3 timestamps3 data4 timestamps4</span><br><span class="line"><span class="comment">% Read the available data</span></span><br><span class="line">[data, timestamps, ~] = read(src, src.ScansAvailableFcnCount, <span class="string">&quot;OutputFormat&quot;</span>, <span class="string">&quot;Matrix&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> contains(src.Channels(<span class="number">1</span>,<span class="number">1</span>).Device.ID,<span class="string">&#x27;DT9828(00)&#x27;</span>)</span><br><span class="line">    <span class="comment">% Combine timestamps and data into a matrix</span></span><br><span class="line">    data1 = data; timestamps1 = timestamps;</span><br><span class="line"><span class="keyword">elseif</span>  contains(src.Channels(<span class="number">1</span>,<span class="number">1</span>).Device.ID,<span class="string">&#x27;DT9828(01)&#x27;</span>)</span><br><span class="line">    data2 = data; timestamps2 = timestamps;</span><br><span class="line"><span class="keyword">elseif</span>  contains(src.Channels(<span class="number">1</span>,<span class="number">1</span>).Device.ID,<span class="string">&#x27;DT9828(02)&#x27;</span>)</span><br><span class="line">    data3 = data; timestamps3 = timestamps;</span><br><span class="line"><span class="keyword">elseif</span> contains(src.Channels(<span class="number">1</span>,<span class="number">1</span>).Device.ID,<span class="string">&#x27;DT9828(03)&#x27;</span>)</span><br><span class="line">    data4 = data; timestamps4 = timestamps;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">alldata = [timestamps, data];</span><br><span class="line"><span class="comment">% Save data to a MAT-file</span></span><br><span class="line"><span class="comment">%writematrix([fname1 &#x27;.mat&#x27;], &#x27;-mat&#x27;, &#x27;alldata&#x27;);</span></span><br><span class="line"><span class="comment">% fwrite(fid,data,&#x27;double&#x27;);</span></span><br><span class="line">writematrix(alldata,[fname <span class="string">&#x27;.dat&#x27;</span>],<span class="string">&#x27;WriteMode&#x27;</span>,<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>P201 Encoder Interface</title>
    <url>/2024/10/08/P201EncoderInterface/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>The P201 series are single channel encoder interfaces suitable for use with a wide variety of 5V rotary and linear encoders. The USB versions allow encoders to be easily interfaced to and powered from a PC using only a USB cable. The new RS485 encoder interface (P201-9B-RS485) enables long distance, multidrop capability for SSI or BiSS C encoders.</p>
<p>Supported by PC based <a href="https://www.joulefusion.com/protura4.htm">GUI Demonstration software</a> and supplied with USB drivers that emulate a COM Port. Virtual COM Port access enables simple interfacing from LabVIEW, C#.Net, VB.Net, MATLAB.</p>
<p>More details can be referred to <a href="dataSheetP201.pdf">the data sheet of P201 interface</a>.</p>
<span id="more"></span> 
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Function: encoderP201Read</span></span><br><span class="line"><span class="comment">% Author: Yu Xia</span></span><br><span class="line"><span class="comment">% Date: 2024.7.1 modified on 2024.10.8</span></span><br><span class="line"><span class="comment">% Institution: University of Melbourne</span></span><br><span class="line"><span class="comment">% Email: xiayudlut@icloud.com</span></span><br><span class="line"><span class="comment">% Description: This function communicates with an encoder via a serial port</span></span><br><span class="line"><span class="comment">% to read the encoder count, detect reference index, or clear/set the reference.</span></span><br><span class="line"><span class="comment">% It incorporates error handling to manage serial communication issues.</span></span><br><span class="line"><span class="comment">% The function returns three numbers: the encoder count, the count value at the </span></span><br><span class="line"><span class="comment">% z-channel rising edge (reference index), and the status indicating if the reference </span></span><br><span class="line"><span class="comment">% is detected.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbers</span> = <span class="title">encoderP201Read</span><span class="params">(port, command)</span></span></span><br><span class="line">    <span class="comment">% Input:</span></span><br><span class="line">    <span class="comment">% port - Serial port identifier (e.g., &#x27;COM5&#x27;)</span></span><br><span class="line">    <span class="comment">% command - Command to send to the encoder (&#x27;?&#x27; for read, &#x27;c&#x27; for clear reference, &#x27;z&#x27; for set to zero)</span></span><br><span class="line">    <span class="comment">% Output:</span></span><br><span class="line">    <span class="comment">% numbers - A vector containing:</span></span><br><span class="line">    <span class="comment">%           [encoder count, count value at z-channel, reference status]</span></span><br><span class="line">    <span class="comment">%           or an empty array if the command is &#x27;c&#x27; or &#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Set up parameters</span></span><br><span class="line">    baudRate = <span class="number">9600</span>; <span class="comment">% Baud rate for serial communication</span></span><br><span class="line">    maxRetries = <span class="number">3</span>; <span class="comment">% Maximum number of retries</span></span><br><span class="line">    retryDelay = <span class="number">0.5</span>; <span class="comment">% Delay between retries in seconds</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Attempt to communicate with the encoder</span></span><br><span class="line">    attempt = <span class="number">0</span>;</span><br><span class="line">    success = <span class="built_in">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ~success &amp;&amp; attempt &lt; maxRetries</span><br><span class="line">        attempt = attempt + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            <span class="comment">% Initialize serial port</span></span><br><span class="line">            sEncoder = serialport(port, baudRate);</span><br><span class="line">            sEncoder.Timeout = <span class="number">2</span>; <span class="comment">% Set timeout for serial communication</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Flush the serial buffer</span></span><br><span class="line">            writeline(sEncoder, <span class="string">&#x27;v&#x27;</span>);</span><br><span class="line">            pause(<span class="number">0.1</span>);</span><br><span class="line">            read(sEncoder, sEncoder.NumBytesAvailable, <span class="string">&#x27;char&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Execute command based on the input</span></span><br><span class="line">            <span class="keyword">switch</span> command</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span> <span class="comment">% Read encoder data</span></span><br><span class="line">                    writeline(sEncoder, <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">                    pause(<span class="number">0.1</span>);</span><br><span class="line">                    encoderStr = read(sEncoder, sEncoder.NumBytesAvailable, <span class="string">&#x27;char&#x27;</span>);</span><br><span class="line">                    pattern = <span class="string">&#x27;\d+&#x27;</span>; <span class="comment">% Regular expression to extract numbers</span></span><br><span class="line">                    numbers = regexp(encoderStr, pattern, <span class="string">&#x27;match&#x27;</span>);</span><br><span class="line">                    numbers = str2double(numbers); <span class="comment">% Convert string array to double array</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span> <span class="comment">% Clear reference status</span></span><br><span class="line">                    writeline(sEncoder, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">                    pause(<span class="number">0.1</span>);</span><br><span class="line">                    fprintf(<span class="string">&#x27;\n Clear reference status \n&#x27;</span>);</span><br><span class="line">                    numbers = [];</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;z&#x27;</span> <span class="comment">% Set current count value to zero</span></span><br><span class="line">                    writeline(sEncoder, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">                    pause(<span class="number">0.1</span>);</span><br><span class="line">                    fprintf(<span class="string">&#x27;\n Set current count value to zero \n&#x27;</span>);</span><br><span class="line">                    numbers = [];</span><br><span class="line">                <span class="keyword">otherwise</span> <span class="comment">% Invalid command</span></span><br><span class="line">                    error(<span class="string">&#x27;Invalid command. Use &#x27;&#x27;?&#x27;&#x27;, &#x27;&#x27;c&#x27;&#x27;, or &#x27;&#x27;z&#x27;&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">% If everything went well, mark as success</span></span><br><span class="line">            success = <span class="built_in">true</span>;</span><br><span class="line">        <span class="keyword">catch</span> ME</span><br><span class="line">            <span class="comment">% Handle communication error and retry</span></span><br><span class="line">            fprintf(<span class="string">&#x27;Error: %s. Retrying...\n&#x27;</span>, ME.message);</span><br><span class="line">            pause(retryDelay);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Close serial port connection</span></span><br><span class="line">        <span class="keyword">if</span> exist(<span class="string">&#x27;sEncoder&#x27;</span>, <span class="string">&#x27;var&#x27;</span>)</span><br><span class="line">            delete(sEncoder);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Check if communication was successful</span></span><br><span class="line">    <span class="keyword">if</span> ~success</span><br><span class="line">        error(<span class="string">&#x27;Failed to communicate with the encoder after %d attempts.&#x27;</span>, maxRetries);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Example Usage:</span></span><br><span class="line"><span class="comment">% 1. To calibrate the encoder and set the zero position:</span></span><br><span class="line"><span class="comment">%    encoderP201Read(&#x27;COM5&#x27;, &#x27;z&#x27;);</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% 2. To read the encoder count, reference index, and status:</span></span><br><span class="line"><span class="comment">%    data = encoderP201Read(&#x27;COM5&#x27;, &#x27;?&#x27;);</span></span><br><span class="line"><span class="comment">%    encoderCount = data(1); % Number of pulses read by the encoder</span></span><br><span class="line"><span class="comment">%    referenceIndex = data(2); % Count value at the reference index</span></span><br><span class="line"><span class="comment">%    referenceStatus = data(3); % Indicates if the reference is detected</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% The difference between two encoderCount readings determines the </span></span><br><span class="line"><span class="comment">% rotation angle, based on the encoder&#x27;s resolution. For example, </span></span><br><span class="line"><span class="comment">% with a resolution of 4000 PPR (pulses per revolution), 360 degrees </span></span><br><span class="line"><span class="comment">% equals 4000 pulses. Therefore, 1.8 degrees corresponds to 20 pulses.</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% After calibration, subtract the initial zero position count from </span></span><br><span class="line"><span class="comment">% the current encoderCount to find the position relative to zero.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Stepper Motor and Lead Screw Slides</title>
    <url>/2024/10/08/summaryMicroStepMotor/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Table-for-stepper-motor-and-lead-screw"><a href="#Table-for-stepper-motor-and-lead-screw" class="headerlink" title="Table for stepper motor and lead screw"></a>Table for stepper motor and lead screw</h1><table>
<thead>
<tr>
<th>Item</th>
<th>Formula</th>
<th>Example Values</th>
<th>Calculation&#x2F;Notes</th>
</tr>
</thead>
<tbody><tr>
<td>Pitch of the Lead Screw</td>
<td>N&#x2F;A</td>
<td>2 mm</td>
<td>The distance the nut moves per one screw revolution.</td>
</tr>
<tr>
<td>Steps Per Revolution (SPR)</td>
<td>N&#x2F;A</td>
<td>200</td>
<td>Full steps required for the motor to turn one revolution.</td>
</tr>
<tr>
<td>Full Step Advance</td>
<td>Pitch &#x2F; SPR</td>
<td>2 mm &#x2F; 200</td>
<td>0.01 mm per full step.</td>
</tr>
<tr>
<td>Microstepping Factor (MfeS)</td>
<td>Set on the motor driver</td>
<td>64</td>
<td>64 microsteps per full step.</td>
</tr>
<tr>
<td>Advance Per Microstep</td>
<td>Full Step Advance &#x2F; MfeS</td>
<td>0.01 mm &#x2F; 64</td>
<td>Approximately 0.00015625 mm per microstep.</td>
</tr>
<tr>
<td>Pulses Per Revolution (PPR)</td>
<td>SPR * MfeS</td>
<td>200 * 64</td>
<td>12800 pulses for 64x microstepping.</td>
</tr>
</tbody></table>
<span id="more"></span> 

<h3 id="Speed-and-Microstepping-Table"><a href="#Speed-and-Microstepping-Table" class="headerlink" title="Speed and Microstepping Table:"></a>Speed and Microstepping Table:</h3><table>
<thead>
<tr>
<th>SPR (200)</th>
<th>PPR (Pulses Per Revolution)</th>
<th>MfeS (Microsteps for Each Step)</th>
<th>PPS (Pulses Per Second, max 200 kHz)</th>
<th>RPS (Revolutions Per Second)</th>
<th>RPM (Revolutions Per Minute)</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>200 (1x microstepping)</td>
<td>1</td>
<td>200,000</td>
<td>1,000</td>
<td>60,000</td>
</tr>
<tr>
<td>200</td>
<td>800 (4x microstepping)</td>
<td>4</td>
<td>200,000</td>
<td>250</td>
<td>15,000</td>
</tr>
<tr>
<td>200</td>
<td>1,600 (8x microstepping)</td>
<td>8</td>
<td>200,000</td>
<td>125</td>
<td>7,500</td>
</tr>
<tr>
<td>200</td>
<td>3,200 (16x microstepping)</td>
<td>16</td>
<td>200,000</td>
<td>62.5</td>
<td>3,750</td>
</tr>
<tr>
<td>200</td>
<td>6,400 (32x microstepping)</td>
<td>32</td>
<td>200,000</td>
<td>31.25</td>
<td>1,875</td>
</tr>
<tr>
<td>200</td>
<td>12,800 (64x microstepping)</td>
<td>64</td>
<td>200,000</td>
<td>15.625</td>
<td>937.5</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p><strong>Note</strong>: The RPM values are calculated by multiplying the RPS by 60 since there are 60 seconds in a minute.</p>
<p>High-resolution microstepping reduces the effective torque of the motor. This happens because the current control to the motor’s windings is proportionally distributed across steps in a sinusoidal pattern, which does not produce the full holding torque available at each microstep. As MfeS increases, the incremental torque produced at each step decreases, which can result in less overall motor torque. This reduced torque can affect the motor’s ability to start or stop quickly and its capacity to hold its position against an external force.</p>
<p>In real-world applications, while high microstepping settings improve positional resolution and can lead to smoother motion, they can also result in a quieter operation. However, this comes at the cost of reduced torque, which must be considered, especially for applications that require high torque or where the motor must overcome significant resistance or load.</p>
]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB Tips</title>
    <url>/2024/08/09/matlabCodeSearch/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="General-Programming-Tips"><a href="#General-Programming-Tips" class="headerlink" title="General Programming Tips"></a>General Programming Tips</h2><ol>
<li><p>Compute the running time of a function all</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tic; fft(<span class="built_in">rand</span>(<span class="number">500</span>)); <span class="built_in">disp</span>( [’it takes ’ num2str(toc) ’s.’] );</span><br></pre></td></tr></table></figure>
</li>
<li><p>Locate the indice of minimum value in a matrice</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[M,I]         = <span class="built_in">min</span>(objMatrice(:)); <span class="comment">% &#x27;objMatrice&#x27; is the objective matrix</span></span><br><span class="line">[Irow,Icol]   = <span class="built_in">ind2sub</span>(<span class="built_in">size</span>(objMatrice),I);</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span> 
<ol start="3">
<li><p>Sort ascending filenames based on number</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">sFile = dir([dir1 <span class="string">&#x27;temp*.mat&#x27;</span>]);</span><br><span class="line"><span class="comment">%%% sort ascending filenames based on Number</span></span><br><span class="line">[~, reindex] = ...</span><br><span class="line">       <span class="built_in">sort</span>(str2double(regexp( &#123;sFile.name&#125;, <span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;match&#x27;</span>, <span class="string">&#x27;once&#x27;</span> )));</span><br><span class="line">sFile        = sFile(reindex) ;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Writing&#x2F;Reading to a text file a list of 3-uplets.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% A is a matrix with 3 rows.</span></span><br><span class="line">fid = fopen(filename,’wt’);</span><br><span class="line">fprintf(fid, ’<span class="comment">%f %f %f\n’, A);</span></span><br><span class="line">fclose(fid); <span class="comment">% Retrieving the values back from file to matrix B.</span></span><br><span class="line">fid = fopen(filename,’r’);</span><br><span class="line">[B,cnt] = fscanf(fid,’<span class="comment">%f %f %f’);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a graphical waitbar</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span>;</span><br><span class="line">h = waitbar(<span class="number">0</span>,’Waiting ...’);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">waitbar(<span class="built_in">i</span>/n);</span><br><span class="line"><span class="comment">% here perform some stuff</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">close(h);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Loading issue </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    load(<span class="string">&#x27;xxx.mat&#x27;</span>) <span class="comment">% x</span></span><br><span class="line"><span class="keyword">catch</span> </span><br><span class="line">    datatemp = matfile(<span class="string">&#x27;xxx.mat&#x27;</span>);  <span class="comment">% x</span></span><br><span class="line">    data     = datatemp.x;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Sub-function-Tricks"><a href="#Sub-function-Tricks" class="headerlink" title="Sub-function Tricks"></a>Sub-function Tricks</h2><ol>
<li><p>Create a sub-function that takes optional arguments in a struct</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span> = <span class="title">f</span><span class="params">(x,options)</span></span></span><br><span class="line"><span class="comment">% parse the struct</span></span><br><span class="line"><span class="keyword">if</span> nargin&lt;<span class="number">2</span></span><br><span class="line">options.null = <span class="number">0</span>; <span class="comment">% force creation of options</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> isfield(options, ’a’)</span><br><span class="line">options.a = <span class="number">1</span>; <span class="comment">% default value</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a = options.a;</span><br><span class="line"><span class="keyword">if</span> isfield(options, ’b’)</span><br><span class="line">options.b = <span class="number">1</span>; <span class="comment">% default value</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">b = options.b;</span><br><span class="line"><span class="comment">% Here the body of the function ...</span></span><br></pre></td></tr></table></figure>
<p>note: nargin returns the number of function input arguments given in the call to the currently executing function. </p>
</li>
<li><p>Use <strong>varargin</strong>  in function e.g. as following. A single function to generate two-dimensional (2D) line graphs, avoiding a long list of code for the generation of each graphic.</p>
<p><strong>PlotSet</strong> generates 2D plots, including multiple plots on a page. This code processes <strong>varargin</strong> as<br>parameter pairs to set options. This makes it easy to expand the options. You can look for more information in the following book.</p>
<p>Paluszek, M., and S. Thomas. <em>MATLAB Machine Learning</em>. Apress, 2016. <a href="https://books.google.com.au/books?id=jy75vQAACAAJ">https://books.google.com.au/books?id=jy75vQAACAAJ</a>.</p>
</li>
<li><p>Write a function fun(a,b,c) that can take an arbitrary number of arguments</p>
 <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">(args)</span></span></span><br><span class="line">default_values = &#123;<span class="number">0.1246</span>,<span class="number">1.2346</span>,<span class="number">8.7643</span>&#125;;</span><br><span class="line">args_present = <span class="built_in">cellfun</span>(@<span class="built_in">isempty</span>,args);</span><br><span class="line">default_values(args_present) = args(args_present);</span><br><span class="line">[a b c] = deal(default_values);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Load a variable from a .mat file and then place that variable inside a structure with the same name</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% Load the variable</span><br><span class="line">loadedData = load(&#x27;myData.mat&#x27;);  % This loads the data into a structure</span><br><span class="line"></span><br><span class="line">% Extract field names from the loaded data</span><br><span class="line">fieldNames = fieldnames(loadedData);</span><br><span class="line"></span><br><span class="line">% Loop through each variable and assign it to a new structure with the same name</span><br><span class="line">for k = 1:length(fieldNames)</span><br><span class="line">    varName = fieldNames&#123;k&#125;;</span><br><span class="line">    dataStruct.(varName) = loadedData.(varName);</span><br><span class="line">end</span><br><span class="line">% Now dataStruct has fields corresponding to the variables loaded from the .mat file</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Mathematical-Tips"><a href="#Mathematical-Tips" class="headerlink" title="Mathematical Tips"></a>Mathematical Tips</h2><ol>
<li><p>Generate n points x sampled uniformly at random on a sphere.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% tensor product gaussian is isotropic</span></span><br><span class="line">x = <span class="built_in">randn</span>(<span class="number">3</span>,n);</span><br><span class="line">d = <span class="built_in">sqrt</span>( x(<span class="number">1</span>,:).ˆ<span class="number">2</span>+x(<span class="number">2</span>,:).ˆ<span class="number">2</span>+x(<span class="number">2</span>,:).ˆ<span class="number">2</span> );</span><br><span class="line">x(<span class="number">1</span>,:) = x(<span class="number">1</span>,:)./d;</span><br><span class="line">x(<span class="number">2</span>,:) = x(<span class="number">2</span>,:)./d;</span><br><span class="line">x(<span class="number">3</span>,:) = x(<span class="number">3</span>,:)./d;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Keep only the n biggest coefficients of a signal x (set the others to 0).</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[tmp,I] = <span class="built_in">sort</span>(<span class="built_in">abs</span>(x(:))); x( I(<span class="number">1</span>:<span class="keyword">end</span>-n) ) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Plotting"><a href="#Plotting" class="headerlink" title="Plotting"></a>Plotting</h2><ol>
<li><p>Draw a 3D sphere.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = <span class="number">20</span>; <span class="comment">% precision</span></span><br><span class="line">t = <span class="number">0</span>:<span class="number">1</span>/(p<span class="number">-1</span>):<span class="number">1</span>;</span><br><span class="line">[th,ph] = <span class="built_in">meshgrid</span>( t*<span class="built_in">pi</span>,t*<span class="number">2</span>*<span class="built_in">pi</span> );</span><br><span class="line">x = <span class="built_in">cos</span>(th);</span><br><span class="line">y = <span class="built_in">sin</span>(th).*<span class="built_in">cos</span>(ph);</span><br><span class="line">z = <span class="built_in">sin</span>(th).*<span class="built_in">sin</span>(ph);</span><br><span class="line">surf(x,y,z, z.*<span class="number">0</span>);</span><br><span class="line"><span class="comment">% some pretty rendering options</span></span><br><span class="line">shading interp; lighting gouraud;</span><br><span class="line">camlight infinite; axis square; axis off;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit legend</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[hhLeg,labelhandles] = <span class="built_in">legend</span>(ax(<span class="number">1</span>),htext,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;NorthEast&#x27;</span>...</span><br><span class="line">    ,<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;off&#x27;</span>,<span class="string">&#x27;Interpreter&#x27;</span>,<span class="string">&#x27;LaTex&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,fS);</span><br><span class="line"><span class="comment">% hhLeg.ItemTokenSize =[20 18];</span></span><br><span class="line">labelhandles(<span class="number">5</span>).LineStyle = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">labelhandles(<span class="number">4</span>).XData = [<span class="number">0.24</span> <span class="number">0.37</span>];</span><br><span class="line">labelhandles(<span class="number">5</span>).XData = labelhandles(<span class="number">4</span>).XData;</span><br><span class="line">labelhandles(<span class="number">4</span>).YData = labelhandles(<span class="number">4</span>).YData + <span class="number">0.07</span>;</span><br><span class="line">labelhandles(<span class="number">5</span>).YData = labelhandles(<span class="number">4</span>).YData - <span class="number">0.14</span>;</span><br><span class="line">labelhandles(<span class="number">5</span>).Color = col2(<span class="number">1</span>,:);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Copy all properties for Axes</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ax(<span class="number">2</span>) = axes(<span class="string">&#x27;Position&#x27;</span>,ax(<span class="number">1</span>).Position ...</span><br><span class="line">                       ,<span class="string">&#x27;OuterPosition&#x27;</span>,ax(<span class="number">1</span>).OuterPosition ...</span><br><span class="line">                       ,<span class="string">&#x27;InnerPosition&#x27;</span>,ax(<span class="number">1</span>).InnerPosition ...</span><br><span class="line">                       ,<span class="string">&#x27;ActivePositionProperty&#x27;</span>,ax(<span class="number">1</span>).ActivePositionProperty...</span><br><span class="line">                       ,<span class="string">&#x27;ALim&#x27;</span>,ax(<span class="number">1</span>).ALim...</span><br><span class="line">                       ,<span class="string">&#x27;ALimMode&#x27;</span>,ax(<span class="number">1</span>).ALimMode...</span><br><span class="line">                       ,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;none&#x27;</span>...</span><br><span class="line">                       ,<span class="string">&#x27;xtick&#x27;</span>,[],<span class="string">&#x27;ytick&#x27;</span>,[],<span class="string">&#x27;ztick&#x27;</span>,[]...</span><br><span class="line">                       ,<span class="string">&#x27;xcolor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;ycolor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;zcolor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>...</span><br><span class="line">                       ,<span class="string">&#x27;Projection&#x27;</span>,<span class="string">&#x27;perspective&#x27;</span>...</span><br><span class="line">                       ,<span class="string">&#x27;CameraPosition&#x27;</span>,ax(<span class="number">1</span>).CameraPosition ...</span><br><span class="line">                       ,<span class="string">&#x27;CameraPositionMode&#x27;</span>,ax(<span class="number">1</span>).CameraPositionMode...</span><br><span class="line">                       ,<span class="string">&#x27;CameraTarget&#x27;</span>,ax(<span class="number">1</span>).CameraTarget...</span><br><span class="line">                       ,<span class="string">&#x27;CameraTargetMode&#x27;</span>,ax(<span class="number">1</span>).CameraTargetMode...</span><br><span class="line">                       ,<span class="string">&#x27;CameraUpVector&#x27;</span>,ax(<span class="number">1</span>).CameraUpVector...</span><br><span class="line">                       ,<span class="string">&#x27;CameraUpVectorMode&#x27;</span>,ax(<span class="number">1</span>).CameraUpVectorMode...</span><br><span class="line">                       ,<span class="string">&#x27;CameraViewAngle&#x27;</span>,ax(<span class="number">1</span>).CameraViewAngle...</span><br><span class="line">                       ,<span class="string">&#x27;CameraViewAngleMode&#x27;</span>,ax(<span class="number">1</span>).CameraViewAngleMode...</span><br><span class="line">                       ,<span class="string">&#x27;DataAspectRatio&#x27;</span>,ax(<span class="number">1</span>).DataAspectRatio...</span><br><span class="line">                       ,<span class="string">&#x27;DataAspectRatioMode&#x27;</span>,ax(<span class="number">1</span>).DataAspectRatioMode...</span><br><span class="line">                       );</span><br><span class="line">                   </span><br><span class="line"><span class="comment">%      copyaxes(ax(1),ax(2))</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set handle in a figure invisible </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;arrow&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;textbox&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;axes&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;surf&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;patch&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;Line&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">set(findall(hFig,<span class="string">&#x27;Type&#x27;</span>,<span class="string">&#x27;contour&#x27;</span>),<span class="string">&#x27;visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>plot at a specific plane </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tt = hgtransform(ax(<span class="number">2</span>)); <span class="comment">% establish plane </span></span><br><span class="line"><span class="comment">% X-axis rotation matrix and Z-axis translation matrix</span></span><br><span class="line">Rz = makehgtform(<span class="string">&#x27;translate&#x27;</span>,[<span class="number">0</span> y(<span class="keyword">end</span>) <span class="number">0</span>],<span class="string">&#x27;xrotate&#x27;</span>,<span class="number">1</span>/<span class="number">2</span>*<span class="built_in">pi</span>,<span class="string">&#x27;yrotate&#x27;</span>,<span class="number">-1</span>/<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line">set(tt,<span class="string">&#x27;Matrix&#x27;</span>,Rz);  </span><br></pre></td></tr></table></figure>
</li>
<li><p>Two axes in one figure</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ax(<span class="number">1</span>) = axes(<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;on&#x27;</span>);<span class="built_in">hold</span>(ax(<span class="number">1</span>),<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">ax(<span class="number">2</span>) = axes(<span class="string">&#x27;Position&#x27;</span>,ax(<span class="number">1</span>).Position ...</span><br><span class="line">              ,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;none&#x27;</span>...</span><br><span class="line">              ,<span class="string">&#x27;yAxisLocation&#x27;</span>,<span class="string">&#x27;right&#x27;</span>...</span><br><span class="line">              ,<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;off&#x27;</span>...</span><br><span class="line">              ,<span class="string">&#x27;xTick&#x27;</span>,[]...</span><br><span class="line">              ...,<span class="string">&#x27;ytickLabel&#x27;</span>,[]...</span><br><span class="line">              ,<span class="string">&#x27;ycolor&#x27;</span>,[<span class="number">0.5</span> <span class="number">0.5</span> <span class="number">0.5</span>]...</span><br><span class="line">              );</span><br><span class="line"><span class="built_in">hold</span>(ax(<span class="number">2</span>),<span class="string">&#x27;on&#x27;</span>)          </span><br></pre></td></tr></table></figure>
</li>
<li><p>Iso-contours </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[cContourMap,hContourMap] = contourf(gca,XXAB&#x27;,YYAB&#x27;,ZZAB&#x27;);</span><br><span class="line">set(hContourMap,<span class="string">&#x27;linestyle&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">yclimColorbar = [<span class="number">0</span> <span class="number">1</span>];</span><br><span class="line">ytickColorbar = <span class="number">0</span>:<span class="number">0.2</span>:<span class="number">1</span>;</span><br><span class="line">colLevelist   = <span class="number">0</span>:<span class="number">0.1</span>:<span class="number">1</span>;</span><br><span class="line">hContourMap.LevelList = colLevelist;</span><br><span class="line">set(gca,<span class="string">&#x27;clim&#x27;</span>,yclimColorbar)</span><br><span class="line">hColorbar    = colorbar(gca);</span><br><span class="line">titleindex    = <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">set(get(hColorbar1,<span class="string">&#x27;title&#x27;</span>),<span class="string">&#x27;string&#x27;</span>...</span><br><span class="line">       ,titleindex...</span><br><span class="line">       ,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span> ...</span><br><span class="line">       ,<span class="string">&#x27;interpreter&#x27;</span>,<span class="string">&#x27;LaTex&#x27;</span>...</span><br><span class="line">       ,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span> ...</span><br><span class="line">       )</span><br><span class="line">set(hColorbar1...</span><br><span class="line">       ,<span class="string">&#x27;ylim&#x27;</span>,yclimColorbar...</span><br><span class="line">       ...,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">0</span> <span class="number">4</span>]...</span><br><span class="line">       ,<span class="string">&#x27;ytick&#x27;</span>,ytickColorbar...</span><br><span class="line">       ,<span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;southoutside&#x27;</span>...</span><br><span class="line">       ... ,<span class="string">&#x27;AxisLocation&#x27;</span>,<span class="string">&#x27;out&#x27;</span>...</span><br><span class="line">       ,<span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>...</span><br><span class="line">       ...,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.6</span> <span class="number">0.03</span>] ...</span><br><span class="line">       ,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span> ...</span><br><span class="line">       ,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span> ...</span><br><span class="line">       )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Circular legend for contour lines</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">hFigPos = hFig.Position;</span><br><span class="line">xCentre = <span class="number">0.47</span>;</span><br><span class="line">yCentre = <span class="number">0.18</span>;</span><br><span class="line">coll1 = <span class="built_in">flipud</span>(coll1);</span><br><span class="line">radius = <span class="number">0.07</span>;</span><br><span class="line">radii = <span class="built_in">linspace</span>(<span class="number">0.01</span>,radius,<span class="built_in">round</span>(<span class="built_in">size</span>(coll1,<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span> iR = <span class="number">1</span>:<span class="built_in">length</span>(radii)</span><br><span class="line">    annotation(hFig,<span class="string">&#x27;ellipse&#x27;</span>, [xCentre - radii(iR)/<span class="number">2</span>, yCentre - radii(iR)*hFigPos(<span class="number">3</span>)/hFigPos(<span class="number">4</span>)/<span class="number">2</span> ...</span><br><span class="line">                             , radii(iR), radii(iR)*hFigPos(<span class="number">3</span>)/hFigPos(<span class="number">4</span>)], ...</span><br><span class="line">        <span class="string">&#x27;Color&#x27;</span>, coll1(iR,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>Generate gif</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Video to GIF Synchronization Script</span></span><br><span class="line"><span class="comment">% Created by: Yu Xia</span></span><br><span class="line"><span class="comment">% Location: Melbourne, Australia</span></span><br><span class="line"><span class="comment">% Date: 2024.08.09</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize video file and reader</span></span><br><span class="line">videoFile = <span class="string">&#x27;videoName.mp4&#x27;</span>;</span><br><span class="line">videoObj = VideoReader(videoFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Set output filename</span></span><br><span class="line">outputFilename = <span class="string">&#x27;synchronized_animation.gif&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Get total number of frames</span></span><br><span class="line">numFrames = videoObj.NumFrames;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Create figure and axes</span></span><br><span class="line">hFig = <span class="built_in">figure</span>(<span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.8</span> <span class="number">0.8</span>]);</span><br><span class="line">ax(<span class="number">1</span>) = axes(<span class="string">&#x27;Parent&#x27;</span>, hFig, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.05</span> <span class="number">0.1</span> <span class="number">0.4</span> <span class="number">0.4</span>], <span class="string">&#x27;Box&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">ax(<span class="number">2</span>) = axes(<span class="string">&#x27;Parent&#x27;</span>, hFig, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.5</span> <span class="number">0.1</span> <span class="number">0.4</span> <span class="number">0.4</span>], <span class="string">&#x27;Box&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Hold axes for plotting</span></span><br><span class="line"><span class="built_in">hold</span>(ax(<span class="number">1</span>), <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span>(ax(<span class="number">2</span>), <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Configure second axes</span></span><br><span class="line">set(ax(<span class="number">2</span>), <span class="string">&#x27;XLim&#x27;</span>, [<span class="number">-60</span> <span class="number">60</span>], <span class="string">&#x27;YLim&#x27;</span>, [<span class="number">-9</span> <span class="number">-4</span>], <span class="string">&#x27;TickLength&#x27;</span>, [<span class="number">0.02</span> <span class="number">0.02</span>], ...</span><br><span class="line">    <span class="string">&#x27;XTick&#x27;</span>, <span class="number">-60</span>:<span class="number">20</span>:<span class="number">60</span>, <span class="string">&#x27;YTick&#x27;</span>, <span class="number">-9</span>:<span class="number">1</span>:<span class="number">-4</span>, <span class="string">&#x27;Box&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;XTickLabelRotation&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Set labels for second axes</span></span><br><span class="line">xlabel(ax(<span class="number">2</span>), <span class="string">&#x27;$\alpha$ ($^\circ$)&#x27;</span>, <span class="string">&#x27;Interpreter&#x27;</span>, <span class="string">&#x27;LaTeX&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">ylabel(ax(<span class="number">2</span>), <span class="string">&#x27;$E$ (V)&#x27;</span>, <span class="string">&#x27;Interpreter&#x27;</span>, <span class="string">&#x27;LaTeX&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Process video frames</span></span><br><span class="line"><span class="keyword">for</span> iAlpha = <span class="number">1</span>:numFrames</span><br><span class="line">    <span class="comment">% Read video frame</span></span><br><span class="line">    videoFrame = read(videoObj, iAlpha);</span><br><span class="line">    currentTime = videoObj.CurrentTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Display video frame</span></span><br><span class="line">    imshow(videoFrame, <span class="string">&#x27;Parent&#x27;</span>, ax(<span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Plot data on second axes (replace &#x27;xx&#x27; with actual data)</span></span><br><span class="line">    <span class="built_in">plot</span>(ax(<span class="number">2</span>), xx, xx, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;MarkerSize&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;Color&#x27;</span>, col2, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.3</span>, <span class="string">&#x27;LineStyle&#x27;</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Capture frame and convert to image</span></span><br><span class="line">    frame = getframe(hFig);</span><br><span class="line">    im = frame2im(frame);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Write frame to GIF</span></span><br><span class="line">    <span class="keyword">if</span> iAlpha == <span class="number">1</span></span><br><span class="line">        [imind, cm] = rgb2ind(im, <span class="number">256</span>, <span class="string">&#x27;nodither&#x27;</span>);</span><br><span class="line">        imwrite(imind, cm, outputFilename, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;LoopCount&#x27;</span>, <span class="built_in">inf</span>, <span class="string">&#x27;DelayTime&#x27;</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        imind = rgb2ind(im, cm, <span class="string">&#x27;nodither&#x27;</span>);</span><br><span class="line">        imwrite(imind, cm, outputFilename, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;WriteMode&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;DelayTime&#x27;</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Close figure</span></span><br><span class="line">close(hFig);</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;GIF creation complete.&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Store section title into a tiff image</p>
</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">metaTiffEdit</span><span class="params">(printName, sectionName)</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> nargin &lt; <span class="number">2</span> || <span class="built_in">isempty</span>(sectionName)</span><br><span class="line">        <span class="comment">% Automatically retrieve section title if sectionName is not provided</span></span><br><span class="line">        sectionName = getSectionTitleFromActiveScript();</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">% Open the TIFF file for editing</span></span><br><span class="line">    fileID = Tiff([printName <span class="string">&#x27;.tif&#x27;</span>], <span class="string">&#x27;r+&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Get the current script directory and file details</span></span><br><span class="line">    [currentDir, Filename, ext] = fileparts(matlab.desktop.editor.getActiveFilename);</span><br><span class="line">    fprintf(<span class="string">&#x27;current working directory: %s\n&#x27;</span>, currentDir);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">% Prepare metadata string</span></span><br><span class="line">    metaData = sprintf(<span class="string">&#x27;%s%s%s&#x27;</span>, currentDir, Filename, ext);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Set the TIFF tags</span></span><br><span class="line">    fileID.setTag(<span class="string">&#x27;Artist&#x27;</span>, metaData);</span><br><span class="line">    <span class="comment">% fileID.setTag(&#x27;Copyright&#x27;, &#x27;Your Copyright Info&#x27;);</span></span><br><span class="line">    <span class="comment">% fileID.setTag(&#x27;DateTime&#x27;, datestr(now, 31));  % Using current date and time</span></span><br><span class="line">    <span class="comment">% fileID.setTag(&#x27;DocumentName&#x27;, &#x27;Document Name&#x27;);</span></span><br><span class="line">    </span><br><span class="line">    fileID.setTag(<span class="string">&quot;ImageDescription&quot;</span>, sectionName);</span><br><span class="line">    fileID.close;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sectionTitle</span> = <span class="title">getSectionTitleFromActiveScript</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">% Get the active editor object</span></span><br><span class="line">    activeEditor = matlab.desktop.editor.getActive;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Get the position of the cursor</span></span><br><span class="line">    cursorPosition = activeEditor.Selection(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Retrieve the content of the script as lines</span></span><br><span class="line"><span class="comment">%     lines = strsplit(activeEditor.Text, &#x27;\n&#x27;);</span></span><br><span class="line">    lines = splitlines(activeEditor.Text);</span><br><span class="line">       </span><br><span class="line">    <span class="comment">% Initialize sectionTitle to an empty string</span></span><br><span class="line">    sectionTitle = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    numLines = <span class="built_in">length</span>(lines);</span><br><span class="line">    cursorPosition = <span class="built_in">min</span>(cursorPosition,numLines);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Find the most recent section title, starting from the current line</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = cursorPosition:<span class="number">-1</span>:<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> startsWith(strtrim(lines&#123;<span class="built_in">i</span>&#125;), <span class="string">&#x27;%%&#x27;</span>) &amp;&amp; ...</span><br><span class="line">                ~startsWith(strtrim(lines&#123;<span class="built_in">i</span>&#125;), <span class="string">&#x27;%%%&#x27;</span>)</span><br><span class="line">            sectionTitle = strtrim(lines&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% If no section title was found, default to &#x27;Untitled Section&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(sectionTitle)</span><br><span class="line">        sectionTitle = <span class="string">&#x27;Untitled Section&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Optionally, remove the &#x27;%%&#x27; characters from the section title</span></span><br><span class="line">    sectionTitle = strrep(sectionTitle, <span class="string">&#x27;%%&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Drawing-Technique"><a href="#Drawing-Technique" class="headerlink" title="Drawing Technique"></a>Drawing Technique</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Motor/Encoder Control Code</title>
    <url>/2024/05/01/motorEncoderController202404/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>I developed a stepper motor controller using a Pololu board and Arduino, designed to manage a stepper motor up to 4 A and read a single-end encoder. The system uses serial communction for interaction between the motor, encoder, and PC. That means you can even use MATLAB (with the example code shown below) to operate the motor and capture encoder counts.</p>
<span id="more"></span> 
<p>Take a closer look:</p>
<p><img src="/2024/05/01/motorEncoderController202404/pic1.png" alt="Pic 1"><br><img src="/2024/05/01/motorEncoderController202404/pic2.png" alt="Pic 2"><br><img src="/2024/05/01/motorEncoderController202404/pic3.png" alt="Pic 3"></p>
<p><a href="StepperMotorEncoderControllerQuickStartGuide.pdf">A quick start for the stepper motor controller.</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Title: Controller Box Code</span></span><br><span class="line"><span class="comment">Description: This code is used for a controller box with a single-end encoder and a four-wire step motor (with the current up to 4 A).</span></span><br><span class="line"><span class="comment">Created by: YX at Melboune, 202404 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Arduino Code for Controlling Motor and Reading Encoder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Instructions:</span></span><br><span class="line"><span class="comment"> * 1. Connect your Arduino board to a serial terminal program (e.g., Arduino IDE&#x27;s Serial Monitor or a dedicated serial terminal software).</span></span><br><span class="line"><span class="comment"> * 2. Set the baud rate of the serial terminal program to match the baud rate set in this code (115200).</span></span><br><span class="line"><span class="comment"> * 3. Send command strings to the board via the serial terminal program for various operations.</span></span><br><span class="line"><span class="comment"> *    - To get the encoder value, send the command string &quot;E&quot;.</span></span><br><span class="line"><span class="comment"> *    - To drive the motor forward by a certain number of steps, send the command string &quot;+N&quot;, where N is the desired number of steps.</span></span><br><span class="line"><span class="comment"> *    - To drive the motor backward by a certain number of steps, send the command string &quot;-N&quot;, where N is the desired number of steps.</span></span><br><span class="line"><span class="comment"> *    - To set the motor current, send the command string &quot;A&lt;current&gt;&quot;, where &lt;current&gt; is the desired current value in milliamperes.</span></span><br><span class="line"><span class="comment"> * 4. The board will process the commands and display the results or feedback in the serial terminal program.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HighPowerStepperDriver.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Arduino.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;digitalWriteFast.h&gt;</span>  <span class="comment">// library for high performance reads and writes by jrraines</span></span></span><br><span class="line">                               <span class="comment">// see http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1267553811/0</span></span><br><span class="line">                               <span class="comment">// and http://code.google.com/p/digitalwritefast/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> DirPin = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> StepPin = <span class="number">9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> CSPin = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> SleepPin = <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> RstPin   = <span class="number">6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> FaultPin   = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This period is the length of the delay between steps, which controls the</span></span><br><span class="line"><span class="comment">// stepper motor&#x27;s speed.  You can increase the delay to make the stepper motor</span></span><br><span class="line"><span class="comment">// go slower.  If you decrease the delay, the stepper motor will go faster, but</span></span><br><span class="line"><span class="comment">// there is a limit to how fast it can go before it starts missing steps.</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> StepPeriodUs = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">float</span> DutyCircle;</span><br><span class="line"><span class="type">const</span> byte numChars = <span class="number">32</span>;</span><br><span class="line"><span class="type">char</span> comdata[numChars];</span><br><span class="line"><span class="type">int</span> motorState;</span><br><span class="line"></span><br><span class="line">boolean newData = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">HighPowerStepperDriver sd;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quadrature encoders</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zChannel 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EncoderPinA 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EncoderPinB 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EncoderIsReversed</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">bool</span> EncoderBSet;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">long</span> EncoderTicks = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flagA = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flagB = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// Serial.println(&quot;Waiting for sending a signal...\n&quot;);</span></span><br><span class="line">  SPI.<span class="built_in">begin</span>();</span><br><span class="line">  sd.<span class="built_in">setChipSelectPin</span>(CSPin);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Drive the STEP and DIR pins low initially.</span></span><br><span class="line">  <span class="built_in">pinMode</span>(StepPin, OUTPUT);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(StepPin, LOW);</span><br><span class="line">  <span class="built_in">pinMode</span>(DirPin, OUTPUT);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(DirPin, LOW);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(SleepPin, OUTPUT);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(SleepPin, HIGH);</span><br><span class="line">  <span class="built_in">pinMode</span>(RstPin, OUTPUT);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(RstPin, LOW);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">pinMode</span>(FaultPin, INPUT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Give the driver some time to power up.</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reset the driver to its default settings and clear latched status</span></span><br><span class="line">  <span class="comment">// conditions.</span></span><br><span class="line">  sd.<span class="built_in">resetSettings</span>();</span><br><span class="line">  sd.<span class="built_in">clearStatus</span>();</span><br><span class="line">  <span class="comment">// Select auto mixed decay.  TI&#x27;s DRV8711 documentation recommends this mode</span></span><br><span class="line">  <span class="comment">// for most applications, and we find that it usually works well.</span></span><br><span class="line">  sd.<span class="built_in">setDecayMode</span>(HPSDDecayMode::AutoMixed);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the current limit. You should change the number here to an appropriate</span></span><br><span class="line">  <span class="comment">// value for your particular system.</span></span><br><span class="line">  sd.<span class="built_in">setCurrentMilliamps36v4</span>(<span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the number of microsteps that correspond to one full step.</span></span><br><span class="line">  sd.<span class="built_in">setStepMode</span>(HPSDStepMode::MicroStep16);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enable the motor outputs.</span></span><br><span class="line">  sd.<span class="built_in">enableDriver</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Quardrature</span></span><br><span class="line">   <span class="built_in">pinMode</span>(EncoderPinA, INPUT);      <span class="comment">// sets pin A as input</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(EncoderPinA, LOW);  <span class="comment">// </span></span><br><span class="line">  <span class="built_in">pinMode</span>(EncoderPinB, INPUT);      <span class="comment">// sets pin B as input</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(EncoderPinB, LOW);  <span class="comment">//  </span></span><br><span class="line">  <span class="built_in">pinMode</span>(zChannel,INPUT);</span><br><span class="line">  <span class="built_in">attachInterrupt</span>(<span class="built_in">digitalPinToInterrupt</span>(EncoderPinA), HandleInterruptA, RISING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">checkStatus</span>();</span><br><span class="line">  <span class="keyword">while</span> (!Serial) &#123;</span><br><span class="line">    ; <span class="comment">// wait for serial port to connect. Needed for native USB</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        newData = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">recvWithStartEndMarkers</span>();</span><br><span class="line">   <span class="keyword">if</span> (newData == <span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> || comdata[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> || comdata[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> || comdata[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">    ch = comdata[<span class="number">0</span>];</span><br><span class="line">    <span class="type">char</span>* numStart = &amp;comdata[<span class="number">1</span>];     <span class="comment">// Pointer to the start of the numerical part of the string.</span></span><br><span class="line">    <span class="type">char</span>* endptr;</span><br><span class="line">    <span class="type">long</span> stepp = <span class="built_in">strtol</span>(numStart, &amp;endptr, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (numStart == endptr) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;Error: No digits were found after the sign. Please re-enter the command.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// Skip the rest of the loop and wait for new input.</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*endptr != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;Error: Extra characters after number. Please re-enter the command.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// Skip the rest of the loop and wait for new input.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> || comdata[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">DoSerial</span>(ch, stepp);</span><br><span class="line">            &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stepp &gt; <span class="number">1000</span> || stepp &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                  Serial.<span class="built_in">println</span>(<span class="string">&quot;Over/Below Current&quot;</span>);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               sd.<span class="built_in">setCurrentMilliamps36v4</span>(stepp);</span><br><span class="line">               Serial.<span class="built_in">print</span>(<span class="string">&quot;The motor current is set to be &quot;</span>);</span><br><span class="line">               Serial.<span class="built_in">print</span>(stepp);</span><br><span class="line">               Serial.<span class="built_in">println</span>(<span class="string">&quot; mA&quot;</span>);</span><br><span class="line">            &#125;    </span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (comdata[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">digitalReadFast</span>(zChannel))&#123;</span><br><span class="line">               Serial.<span class="built_in">println</span>(<span class="string">&quot;High&quot;</span>);</span><br><span class="line">               <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               Serial.<span class="built_in">print</span>(<span class="string">&quot;number of pulses: &quot;</span>);</span><br><span class="line">               Serial.<span class="built_in">println</span>(EncoderTicks);</span><br><span class="line">            &#125;          </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Error: Command must start with &#x27;+&#x27;, &#x27;-&#x27;, &#x27;A&#x27;, or &#x27;E&#x27;. Please re-enter the command.&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;  <span class="comment">// Skip the rest of the loop and wait for new input.</span></span><br><span class="line">           &#125;</span><br><span class="line">    newData = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sends a pulse on the STEP pin to tell the driver to take one step, and also</span></span><br><span class="line"><span class="comment">//delays to control the speed of the motor.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">step</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// The STEP minimum high pulse width is 1.9 microseconds.</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(StepPin, HIGH);</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(StepPin, LOW);</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writes a high or low value to the direction pin to specify what direction to</span></span><br><span class="line"><span class="comment">// turn the motor.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDirection</span><span class="params">(<span class="type">bool</span> dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// The STEP pin must not change for at least 200 nanoseconds before and after</span></span><br><span class="line">  <span class="comment">// changing the DIR pin.</span></span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(DirPin, dir);</span><br><span class="line">  <span class="built_in">delayMicroseconds</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===============================================================================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoSerial</span><span class="params">(<span class="type">char</span> ch, <span class="type">long</span> stepp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  char ch = toupper(Serial.read());   // Read the character we received</span></span><br><span class="line"><span class="comment">//  // and convert to upper case</span></span><br><span class="line">  <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:                        </span><br><span class="line">      <span class="built_in">setDirection</span>(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">0</span>; x &lt; stepp; x++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">step</span>();</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(StepPeriodUs);</span><br><span class="line">    <span class="built_in">checkStatus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      <span class="built_in">setDirection</span>(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">0</span>; x &lt; stepp; x++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">step</span>();</span><br><span class="line">    <span class="built_in">delayMicroseconds</span>(StepPeriodUs);</span><br><span class="line">    <span class="built_in">checkStatus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ============================================</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recvWithStartEndMarkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> boolean recvInProgress = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">static</span> byte ndx = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> startMarker = <span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> endMarker = <span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> rc;</span><br><span class="line"> <span class="comment">// if (Serial.available() &gt; 0) &#123;</span></span><br><span class="line">    <span class="keyword">while</span> (Serial.<span class="built_in">available</span>() &gt; <span class="number">0</span> &amp;&amp; newData == <span class="literal">false</span>) &#123;</span><br><span class="line">        rc = Serial.<span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (recvInProgress == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rc != endMarker) &#123;</span><br><span class="line">                comdata[ndx] = rc;</span><br><span class="line">                ndx++;</span><br><span class="line">                <span class="keyword">if</span> (ndx &gt;= numChars) &#123;</span><br><span class="line">                    ndx = numChars - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                comdata[ndx] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// terminate the string</span></span><br><span class="line">                recvInProgress = <span class="literal">false</span>;</span><br><span class="line">                ndx = <span class="number">0</span>;</span><br><span class="line">                newData = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rc == startMarker) &#123;</span><br><span class="line">            recvInProgress = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interrupt service routines for the quadrature encoder</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HandleInterruptA</span><span class="params">()</span><span class="comment">//</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Test transition; since the interrupt will only fire on &#x27;rising&#x27; we don&#x27;t need to read pin A</span></span><br><span class="line">  EncoderBSet = <span class="built_in">digitalReadFast</span>(EncoderPinB);   <span class="comment">// read the input pin</span></span><br><span class="line">  <span class="comment">// // and adjust counter + if A leads B</span></span><br><span class="line">  <span class="comment">// #ifdef LeftEncoderIsReversed</span></span><br><span class="line">    EncoderTicks -= EncoderBSet ? <span class="number">-1</span> : <span class="number">+1</span>;</span><br><span class="line">  <span class="comment">// #else</span></span><br><span class="line">    <span class="comment">// _LeftEncoderTicks += _LeftEncoderBSet ? -1 : +1;</span></span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">   <span class="type">char</span> i;</span><br><span class="line">   i = <span class="built_in">digitalRead</span>(EncoderPinB);</span><br><span class="line">   <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">   flagA += <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   flagB += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkStatus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  motorState = <span class="built_in">digitalRead</span>(FaultPin);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> (motorState == <span class="number">0</span>)&#123;</span><br><span class="line">   Serial.<span class="built_in">println</span>(<span class="string">&quot;Faulty&quot;</span>);</span><br><span class="line">   <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">   <span class="built_in">digitalWrite</span>(SleepPin, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//============================================</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MATLAB Code</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">manageMotor</span><span class="params">(action, motorPort, varargin)</span></span></span><br><span class="line">    <span class="comment">% manageMotor - Control a stepper motor via serial connection.</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Syntax: manageMotor(action, motorPort, varargin)</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Parameters:</span></span><br><span class="line">    <span class="comment">%   action (string): The action to perform. Options are &#x27;initialize&#x27;,</span></span><br><span class="line">    <span class="comment">%                   &#x27;rotateMotor&#x27;, and &#x27;cleanup&#x27;.</span></span><br><span class="line">    <span class="comment">%   motorPort (string): The COM port (e.g., &#x27;COM3&#x27;) where the motor is connected.</span></span><br><span class="line">    <span class="comment">%   varargin: Additional parameters for &#x27;rotateMotor&#x27;:</span></span><br><span class="line">    <span class="comment">%     - angle (double, required for &#x27;rotateMotor&#x27;): The rotation angle in degrees.</span></span><br><span class="line">    <span class="comment">%     - stepsPerRev (double, optional): Steps per revolution (default is 200).</span></span><br><span class="line">    <span class="comment">%     - microSteps (double, optional): Microsteps per step (default is 16).</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Usage:</span></span><br><span class="line">    <span class="comment">%   - Initialize the motor:</span></span><br><span class="line">    <span class="comment">%       manageMotor(&#x27;initialize&#x27;, &#x27;COM3&#x27;)</span></span><br><span class="line">    <span class="comment">%   - Rotate the motor (default parameters):</span></span><br><span class="line">    <span class="comment">%       manageMotor(&#x27;rotateMotor&#x27;, &#x27;COM3&#x27;, 90)</span></span><br><span class="line">    <span class="comment">%   - Rotate the motor (custom parameters):</span></span><br><span class="line">    <span class="comment">%       manageMotor(&#x27;rotateMotor&#x27;, &#x27;COM3&#x27;, 90, 400, 32)</span></span><br><span class="line">    <span class="comment">%   - Cleanup:</span></span><br><span class="line">    <span class="comment">%       manageMotor(&#x27;cleanup&#x27;, &#x27;COM3&#x27;)</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Created by YX on 2024.10.08</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">persistent</span> sMotor</span><br><span class="line">    motorBaudRate = <span class="number">115200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> action</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;initialize&#x27;</span></span><br><span class="line">            <span class="comment">% Initialize the motor connection if not already done</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isempty</span>(sMotor)</span><br><span class="line">                sMotor = serialport(motorPort, motorBaudRate);</span><br><span class="line">                sMotor.Timeout = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">end</span>           </span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;rotateMotor&#x27;</span></span><br><span class="line">            <span class="comment">% Ensure motor is initialized</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isempty</span>(sMotor)</span><br><span class="line">                error(<span class="string">&#x27;Motor not initialized&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="comment">% Check if the angle is provided</span></span><br><span class="line">            <span class="keyword">if</span> nargin &gt;= <span class="number">3</span></span><br><span class="line">                <span class="built_in">angle</span> = varargin&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">% Default values for steps and microsteps</span></span><br><span class="line">                stepsPerRev = <span class="number">200</span>; </span><br><span class="line">                microSteps = <span class="number">16</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">% Override defaults if specified</span></span><br><span class="line">                <span class="keyword">if</span> nargin &gt;= <span class="number">4</span></span><br><span class="line">                    stepsPerRev = varargin&#123;<span class="number">2</span>&#125;;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">if</span> nargin &gt;= <span class="number">5</span></span><br><span class="line">                    microSteps = varargin&#123;<span class="number">3</span>&#125;;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">% Rotate the motor</span></span><br><span class="line">                motorRoting(sMotor, <span class="built_in">angle</span>, stepsPerRev, microSteps);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                error(<span class="string">&#x27;Angle not specified&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;cleanup&#x27;</span></span><br><span class="line">            <span class="comment">% Clear the motor connection</span></span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(sMotor)</span><br><span class="line">                clear sMotor;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">motorRoting</span><span class="params">(serialObj, angle, stepsPerRev, microSteps)</span></span></span><br><span class="line">    <span class="comment">% Determine rotation direction</span></span><br><span class="line">    directionSign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">angle</span> &lt; <span class="number">0</span></span><br><span class="line">        directionSign = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% Calculate total steps based on angle</span></span><br><span class="line">    totalSteps = <span class="built_in">round</span>(<span class="built_in">abs</span>(<span class="built_in">angle</span> / <span class="number">360</span> * stepsPerRev * microSteps));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Construct and send the command string</span></span><br><span class="line">    commandString = [<span class="string">&#x27;&lt;&#x27;</span> directionSign num2str(totalSteps) <span class="string">&#x27;&gt;&#x27;</span>];</span><br><span class="line">    writeline(serialObj, commandString);</span><br><span class="line">    pause(<span class="number">0.2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>research</category>
      </categories>
      <tags>
        <tag>Arduino Code, MatLab Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Guideline &amp; Technical Document</title>
    <url>/2024/04/20/pdfAchive/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="StepperMotorEncoderControllerQuickStartGuide.pdf">Stepper Motor and Encoder Wiring</a></p>
<p><a href="kalman%20filtering.pdf">Kalman Filter</a></p>
<p><a href="ANSYSFiniteElement.pdf">有限元机翼动力学分析</a></p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>Device guideline</tag>
      </tags>
  </entry>
  <entry>
    <title>Flow Visualisation</title>
    <url>/2024/04/12/flowVisualisation/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/2024/04/12/flowVisualisation/jetLowReynolds.jpg" alt="Jet flow"></p>
<span id="more"></span> 
<p><img src="/2024/04/12/flowVisualisation/noActivation.png" alt="Offset attaching jet flow without activation"><br><img src="/2024/04/12/flowVisualisation/upActivation40Hz.png" alt="Offset attaching jet flow with upper activation of 40 Hz"><br><img src="/2024/04/12/flowVisualisation/upActivation60Hz.png" alt="Offset attaching jet flow with upper activation of 60 Hz"></p>
<p><img src="/2024/04/12/flowVisualisation/offsetAttachingJetWallNormalVelocityNoActivation.jpg" alt="The streamwise velocity for the offset attaching jet flow"></p>
<p><img src="/2024/04/12/flowVisualisation/offsetAttachingJetStreamWiseVelocityNoActivation.jpg" alt="The wall-normal velocity for the offset attaching jet flow"></p>
]]></content>
      <categories>
        <category>research</category>
      </categories>
  </entry>
  <entry>
    <title>Calculator created by MATLAB</title>
    <url>/2024/01/27/calculatorMATLABGUI/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="This-is-a-MATLAB-GUI-code-for-an-advanced-calculator-with-multiple-functions"><a href="#This-is-a-MATLAB-GUI-code-for-an-advanced-calculator-with-multiple-functions" class="headerlink" title="This is a MATLAB GUI code for an advanced calculator with multiple functions."></a>This is a MATLAB GUI code for an advanced calculator with multiple functions.</h2><span id="more"></span> 

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculatorAdvanced</span></span></span><br><span class="line"><span class="comment">% Create a figure for the calculator</span></span><br><span class="line">h.fig = <span class="built_in">figure</span>(<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Simple Calculator&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;NumberTitle&#x27;</span>, <span class="string">&#x27;off&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;MenuBar&#x27;</span>, <span class="string">&#x27;none&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;Resize&#x27;</span>, <span class="string">&#x27;off&#x27;</span>, ...</span><br><span class="line">    ...<span class="string">&#x27;Resize&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">800</span>, <span class="number">500</span>, <span class="number">300</span>, <span class="number">330</span>]...       Adjust the position and <span class="built_in">size</span> as needed</span><br><span class="line">    ,<span class="string">&#x27;Alphamap&#x27;</span>,<span class="number">0.2</span> ...</span><br><span class="line">    ,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.95</span> <span class="number">0.95</span> <span class="number">0.95</span>]...[<span class="number">87</span> <span class="number">86</span> <span class="number">84</span>]/<span class="number">255</span> ...</span><br><span class="line">    ...,<span class="string">&#x27;Visible&#x27;</span>,<span class="string">&#x27;off&#x27;</span>...</span><br><span class="line">    ,<span class="string">&#x27;WindowKeyPressFcn&#x27;</span>,@keyPressCallback);  <span class="comment">% Listen for key presses</span></span><br><span class="line"></span><br><span class="line">lastOperator = <span class="string">&#x27;&#x27;</span>; <span class="comment">% To store the last operator used</span></span><br><span class="line">lastOperand = <span class="string">&#x27;&#x27;</span>; <span class="comment">% To store the last operand used</span></span><br><span class="line">h.figOriginPosition = h.fig.Position;</span><br><span class="line"></span><br><span class="line"><span class="comment">% Create the main panel</span></span><br><span class="line">h.panel = uipanel(<span class="string">&#x27;Parent&#x27;</span>, h.fig, ...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% Add a logo to the main panel</span></span><br><span class="line">logoImage = imread(<span class="string">&#x27;logo.jpg&#x27;</span>); <span class="comment">% Replace &#x27;logo.png&#x27; with the path to your logo image</span></span><br><span class="line">logoAxes = axes(<span class="string">&#x27;Parent&#x27;</span>, h.panel, ...</span><br><span class="line">    <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Pixels&#x27;</span>,...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>], ...</span><br><span class="line">    <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">image(logoImage, <span class="string">&#x27;Parent&#x27;</span>, logoAxes);</span><br><span class="line"><span class="comment">% axis(logoAxes, &#x27;image&#x27;);</span></span><br><span class="line">axis equal</span><br><span class="line">axis off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Calculator</span></span><br><span class="line"><span class="comment">% Create the button to open the calculator interface</span></span><br><span class="line">h.openButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.panel, ...</span><br><span class="line">    <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">260</span>, <span class="number">200</span>, <span class="number">40</span>], ...</span><br><span class="line">    <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Open Calculator&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">    <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">    <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">    <span class="string">&#x27;Callback&#x27;</span>, @openCalculator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function for opening the calculator interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openCalculator</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Hide the main panel and show the calculator interface</span></span><br><span class="line">        set(h.panel, <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">        <span class="comment">%         set(h.fig, &#x27;WindowKeyPressFcn&#x27;, @calculatorKeyPressCallback);</span></span><br><span class="line">        <span class="comment">% Create the calculator interface</span></span><br><span class="line">        createCalculatorInterface();</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Create the calculator interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createCalculatorInterface</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">% Create a panel for the calculator interface</span></span><br><span class="line">        h.calculatorPanel = uipanel(<span class="string">&#x27;Parent&#x27;</span>, h.fig, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">% Display for the calculator</span></span><br><span class="line">        h.display = uicontrol(<span class="string">&#x27;Parent&#x27;</span>,h.calculatorPanel,<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">60</span>+<span class="number">30</span>, <span class="number">245</span>, <span class="number">280</span><span class="number">-80</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">18</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], ...[<span class="number">46</span> <span class="number">45</span> <span class="number">36</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.1</span>],...</span><br><span class="line">            <span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;Bold&#x27;</span>,...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        h.display2 = uicontrol(<span class="string">&#x27;Parent&#x27;</span>,h.calculatorPanel,<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">60</span>+<span class="number">30</span>, <span class="number">278</span>, <span class="number">280</span><span class="number">-80</span>, <span class="number">40</span>], ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">12</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], ...[<span class="number">46</span> <span class="number">45</span> <span class="number">36</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>],...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Button size and padding</span></span><br><span class="line">        btnSize = [<span class="number">50</span>, <span class="number">40</span>]; <span class="comment">% Width, height</span></span><br><span class="line">        padding = [<span class="number">7</span>, <span class="number">7</span>]; <span class="comment">% Padding between buttons</span></span><br><span class="line">        startPos = [<span class="number">10</span>, <span class="number">200</span>]; <span class="comment">% Starting position of the first button</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Button labels</span></span><br><span class="line">        <span class="comment">%     btns = &#123;&#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;+&#x27;, &#x27;C&#x27;; ...</span></span><br><span class="line">        <span class="comment">%             &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;-&#x27;, &#x27;CE&#x27;; ...</span></span><br><span class="line">        <span class="comment">%             &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;*&#x27;, &#x27;=&#x27;; ...</span></span><br><span class="line">        <span class="comment">%             &#x27;0&#x27;, &#x27;&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;&#x27;&#125;;</span></span><br><span class="line">        btns = &#123;char(<span class="number">9003</span>), <span class="string">&#x27;CE&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, char(<span class="number">177</span>), char(<span class="number">8730</span>); ...</span><br><span class="line">            <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;%&#x27;</span>; ...</span><br><span class="line">            <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;1/x&#x27;</span>; ...</span><br><span class="line">            <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;=&#x27;</span>;...</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create the buttons in a grid</span></span><br><span class="line">        numRows = <span class="built_in">size</span>(btns, <span class="number">1</span>);</span><br><span class="line">        numCols = <span class="built_in">size</span>(btns, <span class="number">2</span>);</span><br><span class="line">        h.btn = <span class="built_in">zeros</span>(numRows, numCols);</span><br><span class="line">        <span class="keyword">for</span> row = <span class="number">1</span>:numRows</span><br><span class="line">            <span class="keyword">for</span> col = <span class="number">1</span>:numCols</span><br><span class="line">                btnVal = btns&#123;row, col&#125;;</span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(btnVal)</span><br><span class="line">                    btnWidth = btnSize(<span class="number">1</span>);</span><br><span class="line">                    btnHeight = btnSize(<span class="number">2</span>);</span><br><span class="line">                    <span class="comment">% Adjust &#x27;=&#x27; button to span two rows</span></span><br><span class="line">                    <span class="keyword">if</span> strcmp(btnVal, <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">                        btnHeight = btnHeight * <span class="number">2</span> + padding(<span class="number">2</span>);</span><br><span class="line">                        btnPosition = [startPos(<span class="number">1</span>) + (col - <span class="number">1</span>) * (btnSize(<span class="number">1</span>) + padding(<span class="number">1</span>)), ...</span><br><span class="line">                            startPos(<span class="number">2</span>) - (row - <span class="number">1</span>) * (btnSize(<span class="number">2</span>) + padding(<span class="number">2</span>)) - padding(<span class="number">2</span>) - btnSize(<span class="number">2</span>), ...</span><br><span class="line">                            btnWidth, btnHeight];</span><br><span class="line">                    <span class="keyword">elseif</span> strcmp(btnVal, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                        btnWidth = btnWidth * <span class="number">2</span> + padding(<span class="number">1</span>);</span><br><span class="line">                        btnPosition = [startPos(<span class="number">1</span>) + (col - <span class="number">1</span>) * (btnSize(<span class="number">1</span>) + padding(<span class="number">1</span>)), ...</span><br><span class="line">                            startPos(<span class="number">2</span>) - (row - <span class="number">1</span>) * (btnSize(<span class="number">2</span>) + padding(<span class="number">2</span>)) ...</span><br><span class="line">                            btnWidth, btnHeight];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        btnPosition = [startPos(<span class="number">1</span>) + (col - <span class="number">1</span>) * (btnSize(<span class="number">1</span>) + padding(<span class="number">1</span>)), ...</span><br><span class="line">                            startPos(<span class="number">2</span>) - (row - <span class="number">1</span>) * (btnSize(<span class="number">2</span>) + padding(<span class="number">2</span>)), ...</span><br><span class="line">                            btnWidth, btnHeight];</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    </span><br><span class="line">                    h.btn(row, col) = uicontrol(<span class="string">&#x27;Parent&#x27;</span>,h.calculatorPanel,<span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">                        <span class="string">&#x27;Position&#x27;</span>, btnPosition, ...</span><br><span class="line">                        <span class="string">&#x27;String&#x27;</span>, btnVal, ...</span><br><span class="line">                        <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">16</span>, ...</span><br><span class="line">                        <span class="string">&#x27;BackgroundColor&#x27;</span>,[<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                        <span class="string">&#x27;ForegroundColor&#x27;</span>,[<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>,...</span><br><span class="line">                        <span class="string">&#x27;Callback&#x27;</span>, &#123;@btnCallback, btnVal&#125;);</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create the button to return to the main panel</span></span><br><span class="line">        h.returnButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.calculatorPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">10</span> <span class="number">245</span> <span class="number">80</span> <span class="number">60</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Return&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @returnToMainPanel);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function for button clicks</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">btnCallback</span><span class="params">(src, ~, btnVal)</span></span></span><br><span class="line">        current = get(h.display2, <span class="string">&#x27;String&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> btnVal</span><br><span class="line">            <span class="keyword">case</span> &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>&#125;</span><br><span class="line">                <span class="comment">% Do not add an operator if the string is empty or already ends with an operator</span></span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(current)<span class="comment">% &amp;&amp; ~any(current(end) == &#x27;+-*/&#x27;)</span></span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, [current btnVal]);</span><br><span class="line">                    <span class="comment">%                     result = eval(current);</span></span><br><span class="line">                    <span class="comment">%                     set(h.display, &#x27;String&#x27;, num2str(result));</span></span><br><span class="line">                    <span class="comment">%                     set(h.display2, &#x27;String&#x27;, result);</span></span><br><span class="line">                    <span class="keyword">if</span> any(current(<span class="keyword">end</span>) == <span class="string">&#x27;+-*/&#x27;</span>)</span><br><span class="line">                        set(h.display2, <span class="string">&#x27;String&#x27;</span>, [current(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>) btnVal]);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;CE&#x27;</span></span><br><span class="line">                <span class="comment">% Clear the last entry</span></span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(current)</span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, current(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span></span><br><span class="line">                <span class="comment">% Calculate the result or repeat the last operation</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isempty</span>(lastOperator) || <span class="built_in">isempty</span>(lastOperand)</span><br><span class="line">                    <span class="comment">% If there&#x27;s no last operation, perform the current calculation</span></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                        result = eval(current);</span><br><span class="line">                        set(h.display, <span class="string">&#x27;String&#x27;</span>, num2str(result));</span><br><span class="line">                        <span class="comment">% Store the last operand and operator for repeated &quot;=&quot; presses</span></span><br><span class="line">                        tokens = regexp(current, <span class="string">&#x27;(.*?)([\+\-\*\/])(\d+\.?\d*)$&#x27;</span>, <span class="string">&#x27;tokens&#x27;</span>);</span><br><span class="line">                        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(tokens)</span><br><span class="line">                            lastOperator = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125;;</span><br><span class="line">                            lastOperand = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">3</span>&#125;;</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">catch</span></span><br><span class="line">                        <span class="comment">% If there&#x27;s an error in evaluation, display an error message</span></span><br><span class="line">                        set(h.display, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">% If there&#x27;s a last operation, repeat it with the current result</span></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                        <span class="comment">% Get the current result to use as the first operand</span></span><br><span class="line">                        currentResult = get(h.display, <span class="string">&#x27;String&#x27;</span>);</span><br><span class="line">                        <span class="comment">% Repeat the operation using the last operand and operator</span></span><br><span class="line">                        newExpression = [currentResult lastOperator lastOperand];</span><br><span class="line">                        result = eval(newExpression);</span><br><span class="line">                        set(h.display, <span class="string">&#x27;String&#x27;</span>, num2str(result));</span><br><span class="line">                        set(h.display2,<span class="string">&#x27;String&#x27;</span>,[get(h.display2, <span class="string">&#x27;String&#x27;</span>) lastOperator lastOperand])</span><br><span class="line">                    <span class="keyword">catch</span></span><br><span class="line">                        <span class="comment">% If there&#x27;s an error, clear last operation and display an error message</span></span><br><span class="line">                        lastOperator = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                        lastOperand = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                        set(h.display, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="comment">% Clear the last operation if &#x27;C&#x27; is pressed</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">                lastOperator = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                lastOperand = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                set(h.display, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                set(h.display2, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">case</span> char(<span class="number">9003</span>)</span><br><span class="line">                <span class="comment">% Delete the last character</span></span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(current)</span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, current(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">case</span> char(<span class="number">177</span>)</span><br><span class="line">                <span class="comment">% Plus-minus (change sign)</span></span><br><span class="line">                tokens = regexp(current, <span class="string">&#x27;(.*?)([\+\-\*\/]|^)(\d+\.?\d*)$&#x27;</span>, <span class="string">&#x27;tokens&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(tokens)</span><br><span class="line">                    <span class="comment">% tokens&#123;1&#125; should be a cell with the parts: &#123;before, operator, number&#125;</span></span><br><span class="line">                    before = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">1</span>&#125;;</span><br><span class="line">                    operator = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125;;</span><br><span class="line">                    lastNum = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">3</span>&#125;;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">isempty</span>(operator)</span><br><span class="line">                        operator = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">                    <span class="keyword">elseif</span> strcmp(operator(<span class="keyword">end</span>),<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        operator(<span class="keyword">end</span>) = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">                    <span class="keyword">elseif</span> strcmp(operator(<span class="keyword">end</span>),<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                        operator(<span class="keyword">end</span>) = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">                        </span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">% Reconstruct the display string</span></span><br><span class="line">                    newDisplay = [before, operator, lastNum];</span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, newDisplay);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> char(<span class="number">8730</span>)</span><br><span class="line">                tokens = regexp(current, <span class="string">&#x27;(.*?)([\+\-\*\/]|^)(\d+\.?\d*)$&#x27;</span>, <span class="string">&#x27;tokens&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(tokens)</span><br><span class="line">                    <span class="comment">% tokens&#123;1&#125; should be a cell with the parts: &#123;before, operator, number&#125;</span></span><br><span class="line">                    before = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">1</span>&#125;;operator = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125;;lastNum = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">3</span>&#125;;</span><br><span class="line">                    <span class="comment">% Take the square root of the last number</span></span><br><span class="line">                    sqrtLastNum = num2str(<span class="built_in">sqrt</span>(str2double(lastNum)));</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">% Reconstruct the display string</span></span><br><span class="line">                    newDisplay = [before, operator, sqrtLastNum];</span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, newDisplay);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line">                tokens = regexp(current, <span class="string">&#x27;(.*?)([\+\-\*\/]|^)(\d+\.?\d*)$&#x27;</span>, <span class="string">&#x27;tokens&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> ~<span class="built_in">isempty</span>(tokens)</span><br><span class="line">                    <span class="comment">% tokens&#123;1&#125; should be a cell with the parts: &#123;before, operator, number&#125;</span></span><br><span class="line">                    before = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">1</span>&#125;;operator = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">2</span>&#125;;lastNum = tokens&#123;<span class="number">1</span>&#125;&#123;<span class="number">3</span>&#125;;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">% Take the square root of the last number</span></span><br><span class="line">                    sqrtLastNum = num2str(str2double(lastNum)*<span class="number">0.01</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">% Reconstruct the display string</span></span><br><span class="line">                    newDisplay = [before, operator, sqrtLastNum];</span><br><span class="line">                    set(h.display2, <span class="string">&#x27;String&#x27;</span>, newDisplay);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">otherwise</span></span><br><span class="line">                <span class="comment">% For numbers and decimal point, append to the display</span></span><br><span class="line">                set(h.display2, <span class="string">&#x27;String&#x27;</span>, [current btnVal]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        set(src, <span class="string">&#x27;enable&#x27;</span>, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        drawnow;</span><br><span class="line">        set(src, <span class="string">&#x27;enable&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Key press callback function</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">keyPressCallback</span><span class="params">(~, event)</span></span></span><br><span class="line">        <span class="comment">% Mapping from key names to button labels</span></span><br><span class="line">        keyToButtonMap = containers.Map(...</span><br><span class="line">            &#123;<span class="string">&#x27;numpad0&#x27;</span>, <span class="string">&#x27;numpad1&#x27;</span>, <span class="string">&#x27;numpad2&#x27;</span>, <span class="string">&#x27;numpad3&#x27;</span>, <span class="string">&#x27;numpad4&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;numpad5&#x27;</span>, <span class="string">&#x27;numpad6&#x27;</span>, <span class="string">&#x27;numpad7&#x27;</span>, <span class="string">&#x27;numpad8&#x27;</span>, <span class="string">&#x27;numpad9&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;plus&#x27;</span>, <span class="string">&#x27;subtract&#x27;</span>, <span class="string">&#x27;minus&#x27;</span>, <span class="string">&#x27;multiply&#x27;</span>, <span class="string">&#x27;divide&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;period&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;equal&#x27;</span>,<span class="string">&#x27;enter&#x27;</span> ,<span class="string">&#x27;escape&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;backspace&#x27;</span>, <span class="string">&#x27;ce&#x27;</span>&#125;, ...</span><br><span class="line">            &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>, <span class="string">&#x27;CE&#x27;</span>&#125;);</span><br><span class="line">        <span class="comment">% Get the button label from the map if it exists</span></span><br><span class="line">        <span class="keyword">if</span> keyToButtonMap.isKey(event.Key)</span><br><span class="line">            btnVal = keyToButtonMap(event.Key);</span><br><span class="line">            btnCallback([], [], btnVal); <span class="comment">% Call the button callback directly</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Word Lookup</span></span><br><span class="line"><span class="comment">% Create the button to open the English word lookup interface</span></span><br><span class="line">h.wordButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.panel, ...</span><br><span class="line">    <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">40</span>], ...</span><br><span class="line">    <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;English Word Lookup&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">    <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">    <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">    <span class="string">&#x27;Callback&#x27;</span>, @openWordLookupInterface);</span><br><span class="line"><span class="comment">% Callback function for opening the English word lookup interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openWordLookupInterface</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Hide the main panel and show the word lookup interface</span></span><br><span class="line">        set(h.panel, <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;WindowKeyPressFcn&#x27;</span>, @wordLookupKeyPressCallback);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create the word lookup interface</span></span><br><span class="line">        createWordLookupInterface();</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Create the word lookup interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createWordLookupInterface</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">% Create a panel for the word lookup interface</span></span><br><span class="line">        h.wordLookupPanel = uipanel(<span class="string">&#x27;Parent&#x27;</span>, h.fig, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a button to return to the main panel</span></span><br><span class="line">        h.returnButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.wordLookupPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">40</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Return to Main Panel&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @returnToMainPanel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a button to select an Excel file and load the data</span></span><br><span class="line">        h.selectButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.wordLookupPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">40</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Select Excel File&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @selectExcelFile);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create an edit box for typing English words</span></span><br><span class="line">        h.editEnglish = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.wordLookupPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], ...</span><br><span class="line">            <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @lookupTranslation);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">%     h.displayEnglish = uicontrol(&#x27;Parent&#x27;, h.wordLookupPanel, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;Style&#x27;, &#x27;text&#x27;, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;Position&#x27;, [50, 180, 60, 30], ...</span></span><br><span class="line">        <span class="comment">%         &#x27;FontSize&#x27;, 14, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;BackgroundColor&#x27;,&#x27;none&#x27;, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;HorizontalAlignment&#x27;, &#x27;left&#x27;, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;String&#x27;, &#x27;English&#x27;, ...</span></span><br><span class="line">        <span class="comment">%         &#x27;Callback&#x27;, @lookupTranslation);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Set the key press callback function for the edit box</span></span><br><span class="line">        set(h.editEnglish, <span class="string">&#x27;KeyPressFcn&#x27;</span>, @wordLookupKeyPressCallback);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a text box for displaying corresponding Chinese translations</span></span><br><span class="line">        h.textChinese = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.wordLookupPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;text&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">220</span>, <span class="number">200</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], ...</span><br><span class="line">            <span class="string">&#x27;HorizontalAlignment&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a button to trigger the lookup operation</span></span><br><span class="line">        h.lookupButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.wordLookupPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">260</span>, <span class="number">60</span>, <span class="number">40</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Lookup&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @lookupButtonCallback);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function for selecting an Excel file and loading the data</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectExcelFile</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Prompt the user to select an Excel file</span></span><br><span class="line">        [fileName, pathName] = uigetfile(<span class="string">&#x27;*.xlsx&#x27;</span>, <span class="string">&#x27;Select Excel File&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Check if the user clicked Cancel</span></span><br><span class="line">        <span class="keyword">if</span> fileName == <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Construct the full file path</span></span><br><span class="line">        filePath = fullfile(pathName, fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Read the Excel file</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            dataTable = readcell(filePath);</span><br><span class="line">            h.data = dataTable(:,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">catch</span> ME</span><br><span class="line">            errordlg(<span class="string">&#x27;Error reading Excel file.&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>, <span class="string">&#x27;modal&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">% Callback function for looking up the translation</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lookupTranslation</span><span class="params">(src, ~)</span></span></span><br><span class="line">        englishWord = string(get(src, <span class="string">&#x27;String&#x27;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Check if the loaded data is empty or not</span></span><br><span class="line">        <span class="keyword">if</span> ~isfield(h,<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            set(h.textChinese, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;No Dictionary Loaded&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Find the corresponding translation in the loaded data</span></span><br><span class="line">        <span class="comment">% (Assuming the first column contains English words and the second column contains Chinese translations)</span></span><br><span class="line">        englishColumn = string(h.data(:, <span class="number">1</span>));</span><br><span class="line">        [~, idx] = <span class="built_in">ismember</span>(englishWord, englishColumn);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> idx &gt; <span class="number">0</span></span><br><span class="line">            chineseTranslation = h.data(idx, <span class="number">2</span>);</span><br><span class="line">            set(h.textChinese, <span class="string">&#x27;String&#x27;</span>, chineseTranslation&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            set(h.textChinese, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Translation not found&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function for the lookup button</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lookupButtonCallback</span><span class="params">(~, ~)</span></span></span><br><span class="line">        lookupTranslation(h.editEnglish);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Key press callback function for the word lookup interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">wordLookupKeyPressCallback</span><span class="params">(~, event)</span></span></span><br><span class="line">        <span class="comment">% Get the key value from the event</span></span><br><span class="line">        keyValue = event.Key;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Check if the key value is &#x27;return&#x27; or &#x27;enter&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> strcmpi(keyValue, <span class="string">&#x27;return&#x27;</span>) || strcmpi(keyValue, <span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">            lookupTranslation(h.editEnglish);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% Stock Market</span></span><br><span class="line"><span class="comment">%%% Stock Market Interface %%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Create the button to open the Stock Market interface</span></span><br><span class="line">h.StockButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.panel, ...</span><br><span class="line">    <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">40</span>], ...</span><br><span class="line">    <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Stock Market&#x27;</span>, ...</span><br><span class="line">    <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">    <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">    <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">    <span class="string">&#x27;Callback&#x27;</span>, @openStockMarketInterface);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openStockMarketInterface</span><span class="params">(~, ~)</span></span></span><br><span class="line">        set(h.panel, <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;Color&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">        <span class="comment">%  set(h.fig, &#x27;WindowKeyPressFcn&#x27;, @wordLookupKeyPressCallback);</span></span><br><span class="line">        createStockMarketInterface();</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Create the word lookup interface</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createStockMarketInterface</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">% Create a panel for the interface</span></span><br><span class="line">        </span><br><span class="line">        h.fig.Position = [<span class="number">300</span> <span class="number">400</span> <span class="number">500</span> <span class="number">600</span>];</span><br><span class="line">        h.StockMarketPanel = uipanel(<span class="string">&#x27;Parent&#x27;</span>, h.fig, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a button to return to the main panel</span></span><br><span class="line">        h.returnButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">10</span>, <span class="number">180</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Return to Main Panel&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @returnToMainPanel);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        h.webSite = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;text&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">105</span>, <span class="number">545</span>, <span class="number">300</span>, <span class="number">40</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;搜狐证券上证指数历史数据爬取&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span> ..., ...</span><br><span class="line">            ...    <span class="string">&#x27;Callback&#x27;</span>, @selectExcelFile</span><br><span class="line">            );</span><br><span class="line">        </span><br><span class="line">        h.webButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">50</span>, <span class="number">180</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Crawl a website&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @getWebData);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a table within the figure</span></span><br><span class="line">        columnNames = &#123;<span class="string">&#x27;日期&#x27;</span>, <span class="string">&#x27;开盘价&#x27;</span>, <span class="string">&#x27;收盘价&#x27;</span>, <span class="string">&#x27;最低价&#x27;</span>, <span class="string">&#x27;最高价&#x27;</span>&#125;;</span><br><span class="line">        h.webTable = uitable(<span class="string">&#x27;Parent&#x27;</span>,h.StockMarketPanel, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">50</span>, <span class="number">100</span>, <span class="number">420</span>, <span class="number">450</span>], <span class="string">&#x27;ColumnName&#x27;</span>, columnNames);</span><br><span class="line">        <span class="comment">% Store the table handle in the button&#x27;s UserData for later access in the callback</span></span><br><span class="line">        h.webButton.UserData = h.webTable;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Button to export table data to Excel</span></span><br><span class="line">        h.exportExcelButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">300</span>, <span class="number">50</span>, <span class="number">180</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Export to Excel&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @exportToExcel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Button to export table data to TXT</span></span><br><span class="line">        h.exportTxtButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">300</span>, <span class="number">10</span>, <span class="number">180</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Export to TXT&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @exportToTxt);</span><br><span class="line">        </span><br><span class="line">        h.webPlottingPanel = uipanel(<span class="string">&#x27;Parent&#x27;</span>,h.StockMarketPanel,<span class="string">&#x27;Units&#x27;</span>,h.webTable.Units,<span class="string">&#x27;Position&#x27;</span>, h.webTable.Position);</span><br><span class="line">        </span><br><span class="line">        h.webPlottingPanel.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Button to plot table data </span></span><br><span class="line">        h.plotToggleButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.StockMarketPanel, ...</span><br><span class="line">            <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;Position&#x27;</span>, [<span class="number">10</span>, <span class="number">558</span>, <span class="number">60</span>, <span class="number">30</span>], ...</span><br><span class="line">            <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Plot&#x27;</span>, ...</span><br><span class="line">            <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">            <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">            <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">            <span class="string">&#x27;Callback&#x27;</span>, @createToggleButton);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">historicalStructArray</span> = <span class="title">getWebData</span><span class="params">(src, ~)</span></span></span><br><span class="line">        h.webTable = src.UserData;</span><br><span class="line">        url = <span class="string">&#x27;https://q.stock.sohu.com/hisHq?code=zs_000001&amp;stat=1&amp;order=D&amp;period=d&amp;callback=historySearchHandler&amp;rt=jsonp&amp;0.41374664091573843&#x27;</span>;</span><br><span class="line">        jsonpStr = webread(url);</span><br><span class="line">        <span class="comment">% Use regexprep to remove the padding around the JSON object</span></span><br><span class="line">        jsonStr = regexprep(jsonpStr, <span class="string">&#x27;^[^(]*\((.*)\)[^)]*$&#x27;</span>, <span class="string">&#x27;$1&#x27;</span>);</span><br><span class="line">        <span class="comment">% Parse the JSON string into a MATLAB structure</span></span><br><span class="line">        data1 = jsondecode(jsonStr);</span><br><span class="line">        <span class="comment">% Access the &#x27;hq&#x27; data which contains historical stock data</span></span><br><span class="line">        historicalData = data1.hq;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Now process `historicalData` as needed.</span></span><br><span class="line">        <span class="comment">% Initialize an empty struct array with the fields you mentioned</span></span><br><span class="line">        historicalStructArray = struct(<span class="string">&#x27;date&#x27;</span>, &#123;&#125;, <span class="string">&#x27;openPrice&#x27;</span>, &#123;&#125;, <span class="string">&#x27;closePrice&#x27;</span>, &#123;&#125;, ...</span><br><span class="line">            <span class="string">&#x27;priceChange&#x27;</span>, &#123;&#125;, <span class="string">&#x27;percentChange&#x27;</span>, &#123;&#125;, <span class="string">&#x27;lowPrice&#x27;</span>, &#123;&#125;, ...</span><br><span class="line">            <span class="string">&#x27;highPrice&#x27;</span>, &#123;&#125;, <span class="string">&#x27;volume&#x27;</span>, &#123;&#125;, <span class="string">&#x27;anotherFinancialFigure&#x27;</span>, &#123;&#125;, <span class="string">&#x27;placeholder&#x27;</span>, &#123;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(historicalData)</span><br><span class="line">            <span class="comment">% Assign each field from the cell array to the corresponding field in the struct</span></span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).date = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">1</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).openPrice = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">2</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).closePrice = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">3</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).priceChange = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">4</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).percentChange = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">5</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).lowPrice = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">6</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).highPrice = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">7</span>&#125;;</span><br><span class="line">            historicalStructArray(<span class="built_in">i</span>).volume = historicalData&#123;<span class="built_in">i</span>&#125;&#123;<span class="number">8</span>&#125;;</span><br><span class="line">            <span class="comment">%     historicalStructArray(i).anotherFinancialFigure = historicalData&#123;i&#125;&#123;9&#125;;</span></span><br><span class="line">            <span class="comment">%     historicalStructArray(i).placeholder = historicalData&#123;i&#125;&#123;10&#125;; % Assuming there is a 10th field for placeholder</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        tableData = &#123;historicalStructArray.date; historicalStructArray.openPrice; ...</span><br><span class="line">            historicalStructArray.closePrice; historicalStructArray.lowPrice; ...</span><br><span class="line">            historicalStructArray.highPrice&#125;&#x27;;</span><br><span class="line">        <span class="comment">% Update the table with the new data</span></span><br><span class="line">        set(h.webTable, <span class="string">&#x27;Data&#x27;</span>, tableData);</span><br><span class="line">        <span class="comment">% Adjust column width based on the data</span></span><br><span class="line">        set(h.webTable, <span class="string">&#x27;ColumnWidth&#x27;</span>, &#123;<span class="number">100</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% create a toggle for plotting</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createToggleButton</span><span class="params">(~,~)</span></span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isempty</span>(h.webTable.Data)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> isfield(h,<span class="string">&#x27;ax&#x27;</span>) &amp;&amp; isfield(h,<span class="string">&#x27;webPlottingPanel&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> strcmp(h.webPlottingPanel.Visible, <span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">                h.webPlottingPanel.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                h.webPlottingPanel.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">%              h.figwebData = figure(&#x27;NumberTitle&#x27;,&#x27;off&#x27;,  &#x27;MenuBar&#x27;, &#x27;none&#x27;, ...</span></span><br><span class="line">            <span class="comment">%                                              &#x27;Resize&#x27;, &#x27;off&#x27;, ...</span></span><br><span class="line">            <span class="comment">%                                              ...&#x27;Resize&#x27;, &#x27;on&#x27;, ...</span></span><br><span class="line">            <span class="comment">%                                              &#x27;Position&#x27;, h.webTable.Position...       Adjust the position and size as needed</span></span><br><span class="line">            <span class="comment">%                                             ,&#x27;Alphamap&#x27;,0.2 ...</span></span><br><span class="line">            <span class="comment">%                                             ,&#x27;Color&#x27;,[0.95 0.95 0.95],&#x27;Parent&#x27;);</span></span><br><span class="line">            h.webPlottingPanel.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">            h.ax = axes(<span class="string">&#x27;Parent&#x27;</span>,h.webPlottingPanel,<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;on&#x27;</span>,<span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.13</span> <span class="number">0.16</span> <span class="number">0.76</span> <span class="number">0.76</span>]);</span><br><span class="line">            h.zoomButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;togglebutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.1</span>+<span class="number">0.02</span>, <span class="number">0.92</span>, <span class="number">0.18</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Zoom&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @zoomToggle);</span><br><span class="line">            </span><br><span class="line">            h.dataCursorButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;togglebutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.32</span>, <span class="number">0.92</span>, <span class="number">0.22</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Data Cursor&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @dataCursorToggle);</span><br><span class="line">            </span><br><span class="line">            h.panButton = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;togglebutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.54</span>+<span class="number">0.02</span>, <span class="number">0.92</span>, <span class="number">0.18</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Pan&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @panToggle);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">% You would call this function typically from a &#x27;Restore&#x27; button callback like this:</span></span><br><span class="line">             uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.76</span>, <span class="number">0.92</span>, <span class="number">0.22</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Restore&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @restorePlot);</span><br><span class="line">            </span><br><span class="line">            h.exportWebPlot = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.02</span>, <span class="number">0.02</span>, <span class="number">0.30</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Export PNG&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @exportPlot);</span><br><span class="line">            </span><br><span class="line">            h.exportWebPlot = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, h.webPlottingPanel, ...</span><br><span class="line">                <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;Normalized&#x27;</span>,...</span><br><span class="line">                <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.70</span>, <span class="number">0.02</span>, <span class="number">0.30</span>, <span class="number">0.08</span>], ...</span><br><span class="line">                <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Export Word&#x27;</span>, ...</span><br><span class="line">                <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">14</span>, ...</span><br><span class="line">                <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>], ...</span><br><span class="line">                <span class="string">&#x27;ForegroundColor&#x27;</span>, [<span class="number">50</span> <span class="number">50</span> <span class="number">50</span>]/<span class="number">255</span>, ...</span><br><span class="line">                ...<span class="string">&#x27;Value&#x27;</span>,<span class="number">0</span>, ...</span><br><span class="line">                <span class="string">&#x27;Callback&#x27;</span>, @exportWord);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Convert webData.data to a numeric matrix if they are stored as strings</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Get the data from the webTable</span></span><br><span class="line">            data = get(h.webTable, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">            <span class="comment">% Convert cell array to table</span></span><br><span class="line">            numericData = str2double(data);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Extract the Open, High, Low, Close data</span></span><br><span class="line">            ohlcData = numericData(:, <span class="number">2</span>:<span class="number">5</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Now, convert the date strings to a datetime array</span></span><br><span class="line">            dates = datetime(data(:,<span class="number">1</span>), <span class="string">&#x27;InputFormat&#x27;</span>, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            tableTMW =  timetable(dates,ohlcData(:,<span class="number">1</span>),ohlcData(:,<span class="number">4</span>),ohlcData(:,<span class="number">3</span>),ohlcData(:,<span class="number">2</span>));</span><br><span class="line">            </span><br><span class="line">            tableTMW.Properties.VariableNames = &#123;<span class="string">&#x27;open&#x27;</span>;<span class="string">&#x27;high&#x27;</span>;<span class="string">&#x27;low&#x27;</span>;<span class="string">&#x27;close&#x27;</span>&#125;;</span><br><span class="line">            </span><br><span class="line">             <span class="comment">% Use the Financial Toolbox candle function to create the plot</span></span><br><span class="line">            hCandle =  candle(h.ax,tableTMW, <span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">            h.ax.XTickLabelRotation = <span class="number">0</span>;</span><br><span class="line">            grid on</span><br><span class="line">            set(h.ax,<span class="string">&#x27;ylim&#x27;</span>,[<span class="number">2500</span> <span class="number">3200</span>],<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&#x27;TickLength&#x27;</span>,[<span class="number">0.022</span> <span class="number">0.022</span>]);</span><br><span class="line">            <span class="comment">% Label the axes and title</span></span><br><span class="line">            xlabel(<span class="string">&#x27;Date&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>);</span><br><span class="line">            ylabel(<span class="string">&#x27;Price&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Times New Roman&#x27;</span>);</span><br><span class="line">          </span><br><span class="line">            </span><br><span class="line">            modifyCandleStick();</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function to export table data to Excel</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exportToExcel</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Get the data from the webTable</span></span><br><span class="line">        data = get(h.webTable, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        <span class="comment">% Convert cell array to table</span></span><br><span class="line">        T = cell2table(data, <span class="string">&#x27;VariableNames&#x27;</span>, h.webTable.ColumnName);</span><br><span class="line">        <span class="comment">% Define Excel file name</span></span><br><span class="line">        excelFileName = <span class="string">&#x27;stock_data.xlsx&#x27;</span>;</span><br><span class="line">        <span class="comment">% Write table data to Excel file</span></span><br><span class="line">        <span class="built_in">writetable</span>(T, excelFileName);</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;Data exported to &#x27;</span>, excelFileName]);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function to export table data to TXT</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">exportToTxt</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Get the data from the webTable</span></span><br><span class="line">        data = get(h.webTable, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        <span class="comment">% Define TXT file name</span></span><br><span class="line">        txtFileName = <span class="string">&#x27;stock_data.txt&#x27;</span>;</span><br><span class="line">        <span class="comment">% Open the TXT file for writing</span></span><br><span class="line">        fileID = fopen(txtFileName, <span class="string">&#x27;wt&#x27;</span>);</span><br><span class="line">        <span class="comment">% Write the headers</span></span><br><span class="line">        fprintf(fileID, <span class="string">&#x27;%s\t%s\t%s\t%s\t%s\n&#x27;</span>, h.webTable.ColumnName&#123;:&#125;);</span><br><span class="line">        <span class="comment">% Write the data</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data, <span class="number">1</span>)</span><br><span class="line">            fprintf(fileID, <span class="string">&#x27;%s\t%s\t%s\t%s\t%s\n&#x27;</span>, data&#123;<span class="built_in">i</span>, :&#125;);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% Close the file</span></span><br><span class="line">        fclose(fileID);</span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;Data exported to &#x27;</span>, txtFileName]);</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">exportToExcelWithColor</span><span class="params">(~,~)</span></span></span><br><span class="line">        <span class="comment">% Get the data from the webTable</span></span><br><span class="line">        data = get(h.webTable, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Convert cell array to table</span></span><br><span class="line">        T = cell2table(data, <span class="string">&#x27;VariableNames&#x27;</span>, h.webTable.ColumnName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Define Excel file name</span></span><br><span class="line">        excelFileName = <span class="string">&#x27;stock_data.xlsx&#x27;</span>;</span><br><span class="line">        <span class="comment">% Write table data to Excel file</span></span><br><span class="line">        <span class="built_in">writetable</span>(T, excelFileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Start an ActiveX server to Excel</span></span><br><span class="line">        Excel = actxserver(<span class="string">&#x27;Excel.Application&#x27;</span>);</span><br><span class="line">        Excel.Visible = <span class="built_in">true</span>; <span class="comment">% if you want to see this happen</span></span><br><span class="line">        Workbook = Excel.Workbooks.Open(fullfile(pwd, excelFileName));</span><br><span class="line">        Sheets = Excel.ActiveWorkbook.Sheets;</span><br><span class="line">        Sheet = Sheets.Item(<span class="number">1</span>); <span class="comment">% assumes data is in the first sheet</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Get range of cells where data is written</span></span><br><span class="line">        Range = Sheet.Range(<span class="string">&#x27;B2:E2&#x27;</span>); <span class="comment">% Adjust range for your data</span></span><br><span class="line">        Range.Resize(<span class="built_in">size</span>(data,<span class="number">1</span>), <span class="built_in">size</span>(data,<span class="number">2</span>)).Interior.ColorIndex = <span class="number">0</span>; <span class="comment">% Clear any existing colors</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Loop over each row and set color based on condition</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">size</span>(data,<span class="number">1</span>)</span><br><span class="line">            cellOpenPrice = Sheet.Range([<span class="string">&#x27;B&#x27;</span> num2str(<span class="built_in">i</span>+<span class="number">1</span>)]);</span><br><span class="line">            cellClosePrice = Sheet.Range([<span class="string">&#x27;C&#x27;</span> num2str(<span class="built_in">i</span>+<span class="number">1</span>)]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> cellClosePrice.Value &gt; cellOpenPrice.Value</span><br><span class="line">                cellClosePrice.Interior.Color = <span class="number">255</span>; <span class="comment">% Red</span></span><br><span class="line">            <span class="keyword">elseif</span> cellClosePrice.Value &lt; cellOpenPrice.Value</span><br><span class="line">                cellClosePrice.Interior.Color = <span class="number">5287936</span>; <span class="comment">% Green</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Save and close</span></span><br><span class="line">        Workbook.Save;</span><br><span class="line">        Workbook.Close;</span><br><span class="line">        Excel.Quit;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">zoomToggle</span><span class="params">(src,~)</span></span></span><br><span class="line">        <span class="comment">% Toggle the zoom state based on the button&#x27;s value</span></span><br><span class="line">        <span class="keyword">if</span> get(src, <span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">            zoom(h.ax, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]); <span class="comment">% Change color to indicate &#x27;on&#x27; state</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            zoom(h.ax, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span>, <span class="number">0.94</span>, <span class="number">0.94</span>]); <span class="comment">% Reset color to default</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dataCursorToggle</span><span class="params">(src,~)</span></span></span><br><span class="line">        <span class="comment">% Toggle the data cursor mode based on the button&#x27;s value</span></span><br><span class="line">        <span class="keyword">if</span> get(src, <span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">            datacursormode(h.fig, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]); <span class="comment">% Change color to indicate &#x27;on&#x27; state</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            datacursormode(h.fig, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span>, <span class="number">0.94</span>, <span class="number">0.94</span>]); <span class="comment">% Reset color to default</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">panToggle</span><span class="params">(src,~)</span></span></span><br><span class="line">        <span class="comment">% Toggle the rotate 3D state based on the button&#x27;s value</span></span><br><span class="line">        <span class="keyword">if</span> get(src, <span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">            pan(h.ax, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]); <span class="comment">% Change color to indicate &#x27;on&#x27; state</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pan(h.ax, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">            set(src, <span class="string">&#x27;BackgroundColor&#x27;</span>, [<span class="number">0.94</span>, <span class="number">0.94</span>, <span class="number">0.94</span>]); <span class="comment">% Reset color to default</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">restorePlot</span><span class="params">(src, ~)</span></span></span><br><span class="line">        <span class="comment">% Disable all interactive modes</span></span><br><span class="line">        updateUIControls();</span><br><span class="line">        zoom(h.ax, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        datacursormode(h.fig, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        pan(h.ax, <span class="string">&#x27;off&#x27;</span>);</span><br><span class="line">        <span class="comment">% Reset the view to the default 2D view</span></span><br><span class="line">        view(h.ax, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">% Reset zoom level to the default (showing all data)</span></span><br><span class="line">        axis(h.ax, <span class="string">&#x27;auto&#x27;</span>);</span><br><span class="line">        <span class="comment">% Update any UI controls if they exist (e.g., toggle buttons)</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateUIControls</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">% Assuming you have stored the UI control handles in &#x27;h.zoomBtn&#x27;, etc.</span></span><br><span class="line">        <span class="comment">% Reset the state of the toggle buttons to &#x27;off&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> isfield(h, <span class="string">&#x27;zoomButton&#x27;</span>)</span><br><span class="line">            <span class="comment">%         disp([&#x27;Zoom Button Handle: &#x27;, num2str(h.zoomButton)]); % Debugging line</span></span><br><span class="line">            set(h.zoomButton, <span class="string">&#x27;Value&#x27;</span>, <span class="number">0</span>,<span class="string">&#x27;BackgroundColor&#x27;</span>,[<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> isfield(h, <span class="string">&#x27;dataCursorButton&#x27;</span>)</span><br><span class="line">            set(h.dataCursorButton, <span class="string">&#x27;Value&#x27;</span>, <span class="number">0</span>,<span class="string">&#x27;BackgroundColor&#x27;</span>,[<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> isfield(h, <span class="string">&#x27;panButton&#x27;</span>)</span><br><span class="line">            set(h.panButton, <span class="string">&#x27;Value&#x27;</span>, <span class="number">0</span>,<span class="string">&#x27;BackgroundColor&#x27;</span>,[<span class="number">0.94</span> <span class="number">0.94</span> <span class="number">0.94</span>]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        set(h.fig, <span class="string">&#x27;HandleVisibility&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exportPlot</span><span class="params">(src, ~)</span></span></span><br><span class="line">        <span class="comment">% Ask user for file name and location to save the PNG</span></span><br><span class="line">        [file, path] = uiputfile(<span class="string">&#x27;export.png&#x27;</span>, <span class="string">&#x27;Save image as&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isequal</span>(file, <span class="number">0</span>) || <span class="built_in">isequal</span>(path, <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;User clicked cancel.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            filename = fullfile(path, file);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        figTemp = <span class="built_in">figure</span>;</span><br><span class="line">        figTemp.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">        axTemp = h.ax;</span><br><span class="line">        axTemp1 = copyobj(axTemp,figTemp);</span><br><span class="line">        set(axTemp1,<span class="string">&#x27;Parent&#x27;</span>,figTemp);</span><br><span class="line">        <span class="comment">% You might need to make sure &#x27;h.ax&#x27; is the handle to your axes</span></span><br><span class="line"></span><br><span class="line">        print(figTemp,filename, <span class="string">&#x27;-dpng&#x27;</span>,<span class="string">&#x27;-r300&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">disp</span>([<span class="string">&#x27;Plot saved as &#x27;</span>, filename]); <span class="comment">% Optional message to indicate success</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exportWord</span><span class="params">(src, ~)</span></span></span><br><span class="line">        <span class="comment">% Ask user for file name and location to save the PNG</span></span><br><span class="line">        [file, path] = uiputfile(<span class="string">&#x27;export.doc&#x27;</span>, <span class="string">&#x27;Save file as&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isequal</span>(file, <span class="number">0</span>) || <span class="built_in">isequal</span>(path, <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;User clicked cancel.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            filename = fullfile(path, file);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% Create a Word application object</span></span><br><span class="line">        wordApp = actxserver(<span class="string">&#x27;Word.Application&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Make Word application visible (optional)</span></span><br><span class="line">        wordApp.Visible = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Create a new document</span></span><br><span class="line">        wordDoc = wordApp.Documents.Add;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Add content to the Word document</span></span><br><span class="line">        wordDoc.Paragraphs.Add; <span class="comment">% Add a new paragraph</span></span><br><span class="line">        wordDoc.Paragraphs.Item(<span class="number">1</span>).Range.Text = <span class="string">&#x27;This is a sample paragraph.&#x27;</span>;</span><br><span class="line">        <span class="comment">% Insert the PNG figure into the Word document</span></span><br><span class="line">        imagePath = <span class="string">&#x27;export.png&#x27;</span>;</span><br><span class="line">        shape = wordDoc.Shapes.AddPicture(imagePath, <span class="built_in">false</span>, <span class="built_in">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Save the Word document</span></span><br><span class="line">        wordDoc.SaveAs2(filename);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Close the Word document</span></span><br><span class="line">        wordDoc.Close;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Quit the Word application</span></span><br><span class="line">        wordApp.Quit;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Release the COM objects</span></span><br><span class="line">        wordDoc.release;</span><br><span class="line">        wordApp.release;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">modifyCandleStick</span><span class="params">()</span></span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        data = get(h.webTable, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">       dates = datetime(data(:,<span class="number">1</span>), <span class="string">&#x27;InputFormat&#x27;</span>, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        customRed = [<span class="number">0.6350</span> <span class="number">0.0780</span> <span class="number">0.1840</span>];</span><br><span class="line">        customGreen = [<span class="number">0.4660</span> <span class="number">0.6740</span> <span class="number">0.1880</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Find all objects of type &#x27;patch&#x27; (the candlestick bodies)</span></span><br><span class="line">        <span class="built_in">hold</span>(h.ax,<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">        patches = findobj(h.ax, <span class="string">&#x27;Type&#x27;</span>, <span class="string">&#x27;patch&#x27;</span>);</span><br><span class="line">        lines = findobj(gca, <span class="string">&#x27;Type&#x27;</span>, <span class="string">&#x27;line&#x27;</span>);</span><br><span class="line">        lineXData = <span class="built_in">fliplr</span>(get(lines, <span class="string">&#x27;XData&#x27;</span>));</span><br><span class="line">        lineYData = <span class="built_in">fliplr</span>(get(lines, <span class="string">&#x27;YData&#x27;</span>));</span><br><span class="line">        delete(lines);</span><br><span class="line">        <span class="comment">% Loop through the patches to adjust their colors</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(patches)</span><br><span class="line">            </span><br><span class="line">            patchXData = get(patches(<span class="built_in">i</span>), <span class="string">&#x27;XData&#x27;</span>);</span><br><span class="line">            <span class="comment">% Determine the corresponding date index based on XData</span></span><br><span class="line"><span class="comment">%             dateIndex = find(dates == patchXData(1));</span></span><br><span class="line">            </span><br><span class="line">            yData = get(patches(<span class="built_in">i</span>),<span class="string">&#x27;YData&#x27;</span>);</span><br><span class="line">            openPrices = yData(<span class="number">1</span>);</span><br><span class="line">            closePrices = yData(<span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Compare open and close prices for the current date</span></span><br><span class="line">            <span class="keyword">if</span> closePrices &gt; openPrices</span><br><span class="line">                <span class="comment">% If close is greater than open, set the body to customRed</span></span><br><span class="line">                set(patches(<span class="built_in">i</span>), <span class="string">&#x27;FaceColor&#x27;</span>, <span class="string">&#x27;None&#x27;</span> ,<span class="string">&#x27;EdgeColor&#x27;</span>,customRed);</span><br><span class="line">                <span class="built_in">plot</span>(h.ax,[lineXData(<span class="number">3</span>*<span class="built_in">i</span><span class="number">-1</span>) lineXData(<span class="number">3</span>*<span class="built_in">i</span>)], [lineYData(<span class="number">3</span>*<span class="built_in">i</span><span class="number">-1</span>) lineYData(<span class="number">3</span>*<span class="built_in">i</span>)],...</span><br><span class="line">                       <span class="string">&#x27;Color&#x27;</span>,customRed,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.1</span>)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">% If close is less than or equal to open, set the body to customGreen</span></span><br><span class="line">                set(patches(<span class="built_in">i</span>), <span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>, customGreen);</span><br><span class="line">                <span class="built_in">plot</span>(h.ax,[lineXData(<span class="number">3</span>*<span class="built_in">i</span><span class="number">-1</span>) lineXData(<span class="number">3</span>*<span class="built_in">i</span>)], [lineYData(<span class="number">3</span>*<span class="built_in">i</span><span class="number">-1</span>) lineYData(<span class="number">3</span>*<span class="built_in">i</span>)],...</span><br><span class="line">                    <span class="string">&#x27;Color&#x27;</span>,customGreen,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.1</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Callback function for returning to the main panel</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">returnToMainPanel</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Delete the calculator interface or word lookup interface and show the main panel</span></span><br><span class="line">        panelFields = &#123;<span class="string">&#x27;calculatorPanel&#x27;</span>, <span class="string">&#x27;wordLookupPanel&#x27;</span>, <span class="string">&#x27;StockMarketPanel&#x27;</span>,<span class="string">&#x27;webPlottingPanel&#x27;</span>,<span class="string">&#x27;ax&#x27;</span>&#125;;</span><br><span class="line">        <span class="comment">% Loop over each field name and delete the field if it exists</span></span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">numel</span>(panelFields)</span><br><span class="line">            fieldName = panelFields&#123;k&#125;;</span><br><span class="line">            <span class="keyword">if</span> isfield(h, fieldName)</span><br><span class="line"><span class="comment">%                 delete(h.(fieldName).Children)</span></span><br><span class="line">                delete(h.(fieldName));</span><br><span class="line">               h = rmfield(h, fieldName); <span class="comment">% Optionally remove the field from the structure</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        set(h.panel, <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;Color&#x27;</span>, [<span class="number">0.95</span> <span class="number">0.95</span> <span class="number">0.95</span>]);</span><br><span class="line">        set(h.fig, <span class="string">&#x27;WindowKeyPressFcn&#x27;</span>, @keyPressCallback);</span><br><span class="line">        set(h.fig,<span class="string">&#x27;Position&#x27;</span>,h.figOriginPosition);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="This-is-another-GUI-tool-used-for-a-file-filter-with-some-fancy-stuff"><a href="#This-is-another-GUI-tool-used-for-a-file-filter-with-some-fancy-stuff" class="headerlink" title="This is another GUI tool used for a file filter with some fancy stuff."></a>This is another GUI tool used for a file filter with some fancy stuff.</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_explorer</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">if</span> exist(<span class="string">&#x27;myTempDataBase.txt&#x27;</span>, <span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        database = readcell(<span class="string">&#x27;myTempDataBase.txt&#x27;</span>,<span class="string">&#x27;Delimiter&#x27;</span>,<span class="string">&#x27;Tab&#x27;</span>,<span class="string">&#x27;LineEnding&#x27;</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        database = []; <span class="comment">% Initialize an empty database or however you wish</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% Create the main figure window</span></span><br><span class="line">    main_fig = <span class="built_in">figure</span>(<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;File Explorer&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">600</span>]...</span><br><span class="line">                                        , <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;pixels&#x27;</span>, <span class="string">&#x27;Resize&#x27;</span>, <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;NumberTitle&#x27;</span>, <span class="string">&#x27;off&#x27;</span> ...</span><br><span class="line">                                        , <span class="string">&#x27;MenuBar&#x27;</span>, <span class="string">&#x27;none&#x27;</span>,<span class="string">&#x27;CloseRequestFcn&#x27;</span>,&#123;@saveDatabaseOnClose,database&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Create a panel for the controls</span></span><br><span class="line">    controls_panel = uipanel(<span class="string">&#x27;Parent&#x27;</span>, main_fig, <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Controls&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.01</span>, <span class="number">0.88</span>, <span class="number">0.98</span>, <span class="number">0.11</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Create the file retrieval button</span></span><br><span class="line">    btn_retrieve = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Retrieve Files&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">0.10</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @retrieve_files);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Create the sorting button</span></span><br><span class="line">    btn_sort = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Sort by Date&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.11</span>, <span class="number">0.1</span>, <span class="number">0.10</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @sort_files);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Create the open button</span></span><br><span class="line">    btn_open = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Open&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.21</span>, <span class="number">0.1</span>, <span class="number">0.06</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @open_file);</span><br><span class="line"></span><br><span class="line">     panel_filter = uipanel(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Filter&#x27;</span>...</span><br><span class="line">                                        ,<span class="string">&#x27;Units&#x27;</span>,<span class="string">&#x27;normalized&#x27;</span> ,<span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.27</span>, <span class="number">0.05</span>, <span class="number">0.36</span>, <span class="number">.92</span>]...</span><br><span class="line">                                        ,<span class="string">&#x27;TitlePosition&#x27;</span>,<span class="string">&#x27;centertop&#x27;</span>);</span><br><span class="line">     btn_filter = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Filter File&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.28</span>, <span class="number">0.1</span>, <span class="number">0.08</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @loadFileFilter);</span><br><span class="line">     btn_filterSearch = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.36</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @searchKeyWordsCallBack);</span><br><span class="line"></span><br><span class="line">     btn_saveData = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Save&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.46</span>, <span class="number">0.1</span>, <span class="number">0.08</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @SaveFilterData);</span><br><span class="line">      btn_loadData = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;pushbutton&#x27;</span>, <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;Load&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.54</span>, <span class="number">0.1</span>, <span class="number">0.08</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @loadFileFilterData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    btn_searchBar = uipanel(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Title&#x27;</span>,<span class="string">&#x27;Search&#x27;</span>, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.64</span>, <span class="number">0.05</span>, <span class="number">0.15</span>, <span class="number">0.92</span>],<span class="string">&#x27;TitlePosition&#x27;</span>,<span class="string">&#x27;centertop&#x27;</span>);</span><br><span class="line">    edit_search = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.65</span>, <span class="number">0.10</span>, <span class="number">0.13</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @search_files,<span class="string">&#x27;ButtonDownFcn&#x27;</span>,@clear_search);</span><br><span class="line">    edit_clicked = <span class="built_in">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     table_dataFilter = uitable(<span class="string">&#x27;Parent&#x27;</span>, main_fig, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.98</span>, <span class="number">0.86</span>], ...</span><br><span class="line">        <span class="string">&#x27;ColumnName&#x27;</span>, &#123;<span class="string">&#x27;Search Result&#x27;</span>&#125;, ...</span><br><span class="line">        <span class="string">&#x27;ColumnWidth&#x27;</span>, &#123;<span class="number">830</span>&#125;, <span class="string">&#x27;RowName&#x27;</span>, []...</span><br><span class="line">        ,<span class="string">&#x27;CellSelectionCallback&#x27;</span>,@table_selection_callback...</span><br><span class="line">        ,<span class="string">&#x27;ButtonDownFcn&#x27;</span>,@tableClickHandle...</span><br><span class="line">        ,<span class="string">&#x27;Visible&#x27;</span>,<span class="string">&#x27;on&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         table_dataFilter.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Create the table to display the file information</span></span><br><span class="line">    table_data = uitable(<span class="string">&#x27;Parent&#x27;</span>, main_fig, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.98</span>, <span class="number">0.86</span>], ...</span><br><span class="line">        <span class="string">&#x27;ColumnName&#x27;</span>, &#123;<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Type&#x27;</span>, <span class="string">&#x27;Size (MB)&#x27;</span>, <span class="string">&#x27;Date&#x27;</span>, <span class="string">&#x27;Path&#x27;</span>&#125;, ...</span><br><span class="line">        <span class="string">&#x27;ColumnWidth&#x27;</span>, &#123;<span class="number">200</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">300</span>&#125;, <span class="string">&#x27;RowName&#x27;</span>, []...</span><br><span class="line">        ,<span class="string">&#x27;CellSelectionCallback&#x27;</span>,@table_selection_callback...</span><br><span class="line">        ,<span class="string">&#x27;ButtonDownFcn&#x27;</span>,@tableClickHandle);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">% Wait for uitable to be ready</span></span><br><span class="line">    drawnow;</span><br><span class="line">        <span class="comment">% Access Java component of uitable</span></span><br><span class="line">    jScroll = findjobj(table_data);</span><br><span class="line">    jTable = jScroll.getViewport.getView;</span><br><span class="line">    <span class="comment">% Set up a MouseListener for double-click detection</span></span><br><span class="line">    set(jTable, <span class="string">&#x27;MouseClickedCallback&#x27;</span>, @(src, event)onTableClick(src, event));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    jScroll2 = findjobj(table_dataFilter);</span><br><span class="line">    jTable2 = jScroll2.getViewport.getView;</span><br><span class="line">    <span class="comment">% Set up a MouseListener for double-click detection</span></span><br><span class="line">    set(jTable2, <span class="string">&#x27;MouseClickedCallback&#x27;</span>, @(src, event)onTableClick(src, event));</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">     <span class="comment">% Define a MATLAB context menu</span></span><br><span class="line">    cMenu = uicontextmenu;</span><br><span class="line">    uimenu(cMenu, <span class="string">&#x27;Label&#x27;</span>, <span class="string">&#x27;Copy&#x27;</span>, <span class="string">&#x27;Callback&#x27;</span>, @(src, event)copyFileOrFolderAction(jTable));</span><br><span class="line">    uimenu(cMenu, <span class="string">&#x27;Label&#x27;</span>, <span class="string">&#x27;Open Folder Path&#x27;</span>, <span class="string">&#x27;Callback&#x27;</span>, @(src, event)openFolderPathAction());</span><br><span class="line"><span class="comment">%     uimenu(cMenu, &#x27;Label&#x27;, &#x27;Properties&#x27;, &#x27;Callback&#x27;, @(src, event)showPropertiesAction(jTable));</span></span><br><span class="line">    </span><br><span class="line">    set(jTable, <span class="string">&#x27;MousePressedCallback&#x27;</span>, @(src, event)onTableRightClick(src, event, cMenu,table_data));</span><br><span class="line">    </span><br><span class="line">   <span class="comment">% Set the maximum number of rows</span></span><br><span class="line">   <span class="comment">%  table_data.Data = cell(1000, 5); % Initialize with 1000 rows</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% Initialize variables</span></span><br><span class="line">    files = []; file_info = [];</span><br><span class="line">    sort_order = <span class="number">1</span>; <span class="comment">% 1 for descending, -1 for ascending</span></span><br><span class="line">    </span><br><span class="line">    path = [];</span><br><span class="line">    pathIndex = [];</span><br><span class="line">    line_number = [];</span><br><span class="line">    <span class="comment">% Create the text label for the edit component</span></span><br><span class="line">    label_folder = uipanel(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Folder Path&#x27;</span>, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.80</span>, <span class="number">0.05</span>, <span class="number">0.185</span>, <span class="number">0.92</span>],<span class="string">&#x27;TitlePosition&#x27;</span>,<span class="string">&#x27;centertop&#x27;</span>);</span><br><span class="line">    <span class="comment">% Create the text input field</span></span><br><span class="line">    edit_folder = uicontrol(<span class="string">&#x27;Parent&#x27;</span>, controls_panel, <span class="string">&#x27;Style&#x27;</span>, <span class="string">&#x27;edit&#x27;</span>, <span class="string">&#x27;Units&#x27;</span>, <span class="string">&#x27;normalized&#x27;</span>, ...</span><br><span class="line">        <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0.81</span>, <span class="number">0.1</span>, <span class="number">0.165</span>, <span class="number">0.5</span>], <span class="string">&#x27;Callback&#x27;</span>, @set_folder,<span class="string">&#x27;String&#x27;</span>,path);</span><br><span class="line">    </span><br><span class="line">        initialiseDatabase(database)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">retrieve_files</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Specify the file path</span></span><br><span class="line">        <span class="comment">% Prompt the user to select a folder</span></span><br><span class="line"><span class="comment">%         if isempty(path)</span></span><br><span class="line">            path = uigetdir(<span class="string">&#x27;/Applications/MATLAB_R2021a.app/toolbox/matlab/iofun/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> path == <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"><span class="comment">%         end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% Initialize the file_info cell array</span></span><br><span class="line">        file_info = &#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Recursively retrieve files and update file_info</span></span><br><span class="line">        file_info = retrieveFilesRecursively(path, file_info);</span><br><span class="line"></span><br><span class="line">        table_data.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">        table_dataFilter.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">% Update the table data</span></span><br><span class="line">        set(table_data, <span class="string">&#x27;Data&#x27;</span>, file_info);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        edit_folder.String = path;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadFileFilter</span><span class="params">(~,~)</span></span></span><br><span class="line">       <span class="keyword">if</span> <span class="built_in">isempty</span>(file_info)</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% Filter files by format</span></span><br><span class="line">      </span><br><span class="line">        filtered_data = file_info(contains(file_info(:,<span class="number">1</span>), <span class="string">&#x27;.m&#x27;</span>) | contains(file_info(:,<span class="number">1</span>), <span class="string">&#x27;.txt&#x27;</span>), :);</span><br><span class="line">        <span class="comment">% Update the table data</span></span><br><span class="line">        set(table_data, <span class="string">&#x27;Data&#x27;</span>, filtered_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">file_info</span> = <span class="title">retrieveFilesRecursively</span><span class="params">(folderPath, file_info)</span></span></span><br><span class="line">        <span class="comment">% Get the list of files and folders</span></span><br><span class="line">        items = dir(folderPath);</span><br><span class="line">        items = items(~<span class="built_in">ismember</span>(&#123;items.name&#125;, &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;..&#x27;</span>&#125;)); <span class="comment">% Filter out &#x27;.&#x27; and &#x27;..&#x27; entries</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(items)</span><br><span class="line">            currentItemPath = fullfile(folderPath, items(<span class="built_in">i</span>).name);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Common details to store</span></span><br><span class="line">            itemSizeMB = bytes2mb(items(<span class="built_in">i</span>).bytes); <span class="comment">% Convert bytes to MB for files, will be 0 for folders</span></span><br><span class="line">            itemDate = datestr(items(<span class="built_in">i</span>).datenum, <span class="string">&#x27;yyyy-mm-dd HH:MM:SS&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> items(<span class="built_in">i</span>).isdir</span><br><span class="line">                <span class="comment">% Add directory info to file_info before recursing into it</span></span><br><span class="line">                <span class="comment">% Note: Size for directories can be complex to calculate and might not be meaningful;</span></span><br><span class="line">                dirInfo = &#123;items(<span class="built_in">i</span>).name, <span class="string">&#x27;Directory&#x27;</span>, <span class="string">&#x27; &#x27;</span>, itemDate, currentItemPath&#125;;</span><br><span class="line">                file_info&#123;<span class="keyword">end</span>+<span class="number">1</span>, <span class="number">1</span>&#125; = dirInfo&#123;<span class="number">1</span>&#125;; <span class="comment">% Directory name</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">2</span>&#125; = dirInfo&#123;<span class="number">2</span>&#125;; <span class="comment">% Placeholder for size (0 for directories)</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">3</span>&#125; = dirInfo&#123;<span class="number">3</span>&#125;; <span class="comment">% Last modified date</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">4</span>&#125; = dirInfo&#123;<span class="number">4</span>&#125;; <span class="comment">% Full directory path</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">5</span>&#125; = dirInfo&#123;<span class="number">5</span>&#125;; <span class="comment">% Type (File/Directory)</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">% Recurse into subdirectories</span></span><br><span class="line">                file_info = retrieveFilesRecursively(currentItemPath, file_info);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">% File processing</span></span><br><span class="line">                fileInfo = &#123;items(<span class="built_in">i</span>).name, <span class="string">&#x27;File&#x27;</span>, itemSizeMB, itemDate, currentItemPath&#125;;</span><br><span class="line">                file_info&#123;<span class="keyword">end</span>+<span class="number">1</span>, <span class="number">1</span>&#125; = fileInfo&#123;<span class="number">1</span>&#125;; <span class="comment">% Full file name with extension</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">2</span>&#125; = fileInfo&#123;<span class="number">2</span>&#125;; <span class="comment">% Store file size in MB</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">3</span>&#125; = fileInfo&#123;<span class="number">3</span>&#125;; <span class="comment">% Store last modified date</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">4</span>&#125; = fileInfo&#123;<span class="number">4</span>&#125;; <span class="comment">% Store the full file path</span></span><br><span class="line">                file_info&#123;<span class="keyword">end</span>, <span class="number">5</span>&#125; = fileInfo&#123;<span class="number">5</span>&#125;; <span class="comment">% Type (File/Directory)</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set_folder</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Get the selected folder path from the edit component</span></span><br><span class="line">        folder_path = get(edit_folder, <span class="string">&#x27;String&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Check if the folder path exists</span></span><br><span class="line">        <span class="keyword">if</span> exist(folder_path, <span class="string">&#x27;dir&#x27;</span>)</span><br><span class="line">            <span class="comment">% Retrieve files and update file_info</span></span><br><span class="line">            file_info = retrieveFilesRecursively(folder_path, &#123;&#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">% Update the table data</span></span><br><span class="line">            set(table_data, <span class="string">&#x27;Data&#x27;</span>, file_info);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            errordlg(<span class="string">&#x27;Invalid folder path!&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort_files</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="comment">% Get the current table data</span></span><br><span class="line">        file_info = get(table_data, <span class="string">&#x27;Data&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Check if the table data is not empty</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isempty</span>(file_info) || all(<span class="built_in">cellfun</span>(@<span class="built_in">isempty</span>, file_info(:,<span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Convert date strings to numbers for sorting</span></span><br><span class="line">        date_values = datenum(file_info(:,<span class="number">4</span>), <span class="string">&#x27;yyyy-mm-dd HH:MM:SS&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">if</span> sort_order</span><br><span class="line">            <span class="comment">% Sort in descending order</span></span><br><span class="line">            [~, idx] = <span class="built_in">sort</span>(date_values, <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">% Sort in ascending order</span></span><br><span class="line">            [~, idx] = <span class="built_in">sort</span>(date_values, <span class="string">&#x27;ascend&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Apply sorted index to table data</span></span><br><span class="line">        table_data.Data = file_info(idx,:);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Toggle the sort order for the next sort operation</span></span><br><span class="line">        sort_order = ~sort_order;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clear_search</span><span class="params">(src,~)</span></span></span><br><span class="line">            edit_clicked = <span class="built_in">true</span>;</span><br><span class="line">            set(src,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search_files</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="keyword">if</span> edit_clicked</span><br><span class="line">            edit_clicked = <span class="built_in">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Get the search term</span></span><br><span class="line">        search_term = get(edit_search, <span class="string">&#x27;String&#x27;</span>);</span><br><span class="line">        search_term = lower(search_term); <span class="comment">% Convert search term to lowercase for case-insensitive comparison</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Always display all files if search term is empty</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isempty</span>(search_term)</span><br><span class="line">               set_folder()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">% Refresh the table with files that match the search term (case-insensitive)</span></span><br><span class="line">            matching_files = <span class="built_in">cellfun</span>(@(name) contains(lower(name), search_term), file_info(:,<span class="number">1</span>));</span><br><span class="line">            filtered_data = file_info(matching_files, :);</span><br><span class="line">            table_data.Data = filtered_data;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        table_data.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">        table_dataFilter.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">searchKeyWordsCallBack</span><span class="params">(~, ~)</span></span></span><br><span class="line">        <span class="keyword">if</span> edit_clicked</span><br><span class="line">            edit_clicked = <span class="built_in">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% Get the search term</span></span><br><span class="line">        search_term = get(btn_filterSearch, <span class="string">&#x27;String&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        fileList = dir(fullfile(path, <span class="string">&#x27;**/*.m&#x27;</span>));</span><br><span class="line">        fileList = [fileList; dir(fullfile(path, <span class="string">&#x27;**/*.txt&#x27;</span>))];</span><br><span class="line">        allMatches = &#123;&#125;; <span class="comment">% Initialize an empty cell array to store all matches</span></span><br><span class="line">        allMatchesPure = &#123;&#125;; <span class="comment">% Initialize an empty cell array to store all matches</span></span><br><span class="line">       mm = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(fileList)</span><br><span class="line">            filePath = fullfile(fileList(<span class="built_in">i</span>).folder, fileList(<span class="built_in">i</span>).name);</span><br><span class="line">            fileContent = fileread(filePath);</span><br><span class="line">            expr = [<span class="string">&#x27;[^\n]*&#x27;</span> search_term <span class="string">&#x27;[^\n]*&#x27;</span>];</span><br><span class="line">            [matches, starts] = regexp(fileContent,expr, <span class="string">&#x27;match&#x27;</span>,<span class="string">&#x27;start&#x27;</span> ,<span class="string">&#x27;ignorecase&#x27;</span>);</span><br><span class="line">            matchesHighlighted = <span class="built_in">cellfun</span>(@(x) [ <span class="string">&#x27;&lt;html&gt;&#x27;</span> strrep(x, search_term, [<span class="string">&#x27;&lt;span style=&quot;color: blue;&quot;&gt;&lt;b&gt;&#x27;</span>, search_term, <span class="string">&#x27;&lt;/b&gt;&lt;/span&gt;&#x27;</span>]) <span class="string">&#x27;&lt;/html&gt;&#x27;</span>], matches, <span class="string">&#x27;UniformOutput&#x27;</span>, <span class="built_in">false</span>);</span><br><span class="line">            <span class="comment">% matchesHighlighted = cellfun(@(x) [&#x27;&lt;html&gt;&lt;span style=&quot;color: blue;&quot;&gt;&#x27;, strrep(x, search_term, [&#x27;&lt;b&gt;&#x27;, search_term, &#x27;&lt;/b&gt;&#x27;]), &#x27;&lt;/span&gt;&lt;/html&gt;&#x27;], matches, &#x27;UniformOutput&#x27;, false);</span></span><br><span class="line">            allMatches = [allMatches; matchesHighlighted&#x27;]; <span class="comment">% Append to allMatches</span></span><br><span class="line">            allMatchesPure = [allMatchesPure; matches&#x27;];</span><br><span class="line">            <span class="comment">% Create a logical array where newlines are 1, others are 0</span></span><br><span class="line">            newlines = (fileContent == char(<span class="number">10</span>));</span><br><span class="line">            lineNumbersAtIndices = cumsum([<span class="number">1</span>, newlines]); <span class="comment">% Start from 1 to count lines correctly</span></span><br><span class="line">            lineNumbersForMatches = lineNumbersAtIndices(starts);</span><br><span class="line">            <span class="keyword">if</span> ~<span class="built_in">isempty</span>(matchesHighlighted) </span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">length</span>(matchesHighlighted)</span><br><span class="line">                    pathIndex&#123;mm + <span class="built_in">j</span> <span class="number">-1</span>&#125; =  filePath;</span><br><span class="line">                    line_number(mm+<span class="built_in">j</span><span class="number">-1</span>) = lineNumbersForMatches(<span class="built_in">j</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                mm = mm + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        table_data.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">        table_dataFilter.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">        table_dataFilter.Data  = allMatches;</span><br><span class="line"></span><br><span class="line">        jtableFilter = findjobj(table_dataFilter);</span><br><span class="line">        height = jtableFilter.getViewport.getView.getRowHeight;</span><br><span class="line">        <span class="keyword">if</span> height &lt; <span class="number">30</span></span><br><span class="line">            jtableFilter.getViewport.getView.setRowHeight(<span class="number">2</span>*height)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        setappdata(btn_saveData,<span class="string">&#x27;allMatchesPure&#x27;</span>,allMatchesPure);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SaveFilterData</span><span class="params">(~,~)</span></span></span><br><span class="line"></span><br><span class="line">        [fileName1, folder_path] = uiputfile(&#123;<span class="string">&#x27;example*.txt&#x27;</span>,<span class="string">&#x27;Text Files (*.txt)&#x27;</span>;...</span><br><span class="line">            <span class="string">&#x27;example*.mat&#x27;</span>,<span class="string">&#x27;Mat Files (*.mat)&#x27;</span>;...</span><br><span class="line">            <span class="string">&#x27;example*.*&#x27;</span>,<span class="string">&#x27;All Files (*.*)&#x27;</span>&#125;,...</span><br><span class="line">            <span class="string">&#x27;Save as&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isequal</span>(fileName1,<span class="number">0</span>) || <span class="built_in">isequal</span>(folder_path,<span class="number">0</span>)</span><br><span class="line">            <span class="comment">% User pressed cancel or closed the dialog</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;User cancelled the save operation.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fullFilePath = fullfile(folder_path, fileName1);</span><br><span class="line">            <span class="comment">% allMatchesPure = regexprep(getappdata(btn_saveData, &#x27;allMatchesPure&#x27;),&#x27;\&quot;&#x27;,&#x27; &#x27;);</span></span><br><span class="line">            allMatchesPure = getappdata(btn_saveData, <span class="string">&#x27;allMatchesPure&#x27;</span>);</span><br><span class="line">            writecell(allMatchesPure,fullFilePath,<span class="string">&#x27;Delimiter&#x27;</span>,<span class="string">&#x27;tab&#x27;</span>,<span class="string">&#x27;QuoteStrings&#x27;</span>,<span class="built_in">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadFileFilterData</span><span class="params">(~,~)</span></span></span><br><span class="line">        [fileName1,folder_path,indx] = uigetfile( ...</span><br><span class="line">            &#123;<span class="string">&#x27;*.txt;*.csv&#x27;</span>,<span class="string">&#x27;Text File (*.txt,*csv)&#x27;</span>; ...</span><br><span class="line">           ... <span class="string">&#x27;*.m;*.mlx;*.fig;*.mat;*.slx;*.mdl&#x27;</span>,...</span><br><span class="line">           ... <span class="string">&#x27;MATLAB Files (*.m,*.mlx,*.fig,*.mat,*.slx,*.mdl)&#x27;</span>;</span><br><span class="line">           ... <span class="string">&#x27;*.m;*.mlx&#x27;</span>,<span class="string">&#x27;Code files (*.m,*.mlx)&#x27;</span>; ...</span><br><span class="line">           ... <span class="string">&#x27;*.fig&#x27;</span>,<span class="string">&#x27;Figures (*.fig)&#x27;</span>; ...</span><br><span class="line">            <span class="string">&#x27;*.mat&#x27;</span>,<span class="string">&#x27;MAT-files (*.mat)&#x27;</span>; ...</span><br><span class="line">            ...<span class="string">&#x27;*.mdl;*.slx&#x27;</span>,<span class="string">&#x27;Models (*.slx, *.mdl)&#x27;</span>; ...</span><br><span class="line">            <span class="string">&#x27;*.*&#x27;</span>,  <span class="string">&#x27;All Files (*.*)&#x27;</span>&#125;, ...</span><br><span class="line">            <span class="string">&#x27;Select a File&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isequal</span>(fileName1,<span class="number">0</span>) || <span class="built_in">isequal</span>(folder_path,<span class="number">0</span>)</span><br><span class="line">            <span class="comment">% User pressed cancel or closed the dialog</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;User cancelled the loading operation.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fullFilePath = fullfile(folder_path, fileName1);</span><br><span class="line">            allMatchesPure = readcell(fullFilePath,<span class="string">&#x27;Delimiter&#x27;</span>,<span class="string">&#x27;tab&#x27;</span>,<span class="string">&#x27;LineEnding&#x27;</span>,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            table_data.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">            table_dataFilter.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">            table_dataFilter.Data  = allMatchesPure;</span><br><span class="line"></span><br><span class="line">            jtableFilter = findjobj(table_dataFilter);</span><br><span class="line">            height = jtableFilter.getViewport.getView.getRowHeight;</span><br><span class="line">            <span class="keyword">if</span> height &lt; <span class="number">30</span></span><br><span class="line">                jtableFilter.getViewport.getView.setRowHeight(<span class="number">2</span>*height)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            setappdata(btn_saveData,<span class="string">&#x27;allMatchesPure&#x27;</span>,allMatchesPure);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initialiseDatabase</span><span class="params">(database)</span></span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(database)</span><br><span class="line">            allMatchesPure = database;</span><br><span class="line">            table_data.Visible = <span class="string">&#x27;off&#x27;</span>;</span><br><span class="line">            table_dataFilter.Visible = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">            table_dataFilter.Data  = allMatchesPure;</span><br><span class="line">            jtableFilter = findjobj(table_dataFilter);</span><br><span class="line">            height = jtableFilter.getViewport.getView.getRowHeight;</span><br><span class="line">            <span class="keyword">if</span> height &lt; <span class="number">30</span></span><br><span class="line">                jtableFilter.getViewport.getView.setRowHeight(<span class="number">2</span>*height)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            setappdata(btn_saveData,<span class="string">&#x27;allMatchesPure&#x27;</span>,allMatchesPure);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveDatabaseOnClose</span><span class="params">(src, ~, database)</span></span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(table_dataFilter.Data)</span><br><span class="line">            allMatchesPure = getappdata(btn_saveData, <span class="string">&#x27;allMatchesPure&#x27;</span>);</span><br><span class="line">            fullFilePath = pwd;</span><br><span class="line">            writecell(allMatchesPure,[fullFilePath <span class="string">&#x27;/myTempDatabase.txt&#x27;</span>],<span class="string">&#x27;Delimiter&#x27;</span>,<span class="string">&#x27;tab&#x27;</span>,<span class="string">&#x27;QuoteStrings&#x27;</span>,<span class="built_in">false</span>);</span><br><span class="line">            delete(src);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">table_selection_callback</span><span class="params">(src, event)</span></span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(event.Indices)</span><br><span class="line">            src.UserData = event.Indices(<span class="number">1</span>); <span class="comment">% Store the row index in UserData</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            src.UserData = []; <span class="comment">% Clear selection if no cell is selected</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">            pause(<span class="number">0.4</span>); <span class="comment">% to allow the user time to add a second click</span></span><br><span class="line">            <span class="keyword">if</span> strcmpi(main_fig.SelectionType, <span class="string">&#x27;open&#x27;</span>)</span><br><span class="line"><span class="comment">%                 fprintf(1, &#x27;Double click on cell&#x27;);</span></span><br><span class="line">                open_file();</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onTableClick</span><span class="params">(~, event)</span></span></span><br><span class="line">        <span class="comment">% Check if the event is a double-click</span></span><br><span class="line">        <span class="keyword">if</span> event.getClickCount() == <span class="number">2</span></span><br><span class="line">            open_file();</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onTableRightClick</span><span class="params">(src, event, cMenu, table_data)</span></span></span><br><span class="line">        <span class="comment">% Check if the event is a right-click (button 3 is the right mouse button)</span></span><br><span class="line">        <span class="keyword">if</span> event.getButton() == <span class="number">3</span></span><br><span class="line">            <span class="comment">% Get the current pointer location (in pixels)</span></span><br><span class="line">            fig = table_data.Parent;</span><br><span class="line">            currentPoint = fig.CurrentPoint;</span><br><span class="line">            <span class="comment">% Show the context menu at the current pointer location</span></span><br><span class="line">            set(cMenu, <span class="string">&#x27;Position&#x27;</span>, currentPoint, <span class="string">&#x27;Visible&#x27;</span>, <span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copyFileOrFolderAction</span><span class="params">(jTable)</span></span></span><br><span class="line">        <span class="comment">% Get selected cell value</span></span><br><span class="line">        row = jTable.getSelectedRow() + <span class="number">1</span>; <span class="comment">% Java indices are 0-based</span></span><br><span class="line">        col = jTable.getSelectedColumn() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span></span><br><span class="line">            dataModel = jTable.getModel();</span><br><span class="line">            path1 = char(dataModel.getValueAt(row - <span class="number">1</span>, col - <span class="number">1</span>)); <span class="comment">% Assuming the cell contains a file/folder path</span></span><br><span class="line">            <span class="keyword">if</span> exist(path1, <span class="string">&#x27;file&#x27;</span>) || exist(path1, <span class="string">&#x27;dir&#x27;</span>) <span class="comment">% Check if it&#x27;s a valid file/folder path</span></span><br><span class="line">                <span class="comment">% Ask the user to select a destination folder</span></span><br><span class="line">                destinationFolder = uigetdir(<span class="string">&#x27;Select a destination folder&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> destinationFolder ~= <span class="number">0</span> <span class="comment">% Ensure the user didn&#x27;t cancel the dialog</span></span><br><span class="line">                    [~, name, ext] = fileparts(path1);</span><br><span class="line">                    destinationPath = fullfile(destinationFolder, <span class="string">&#x27;/&#x27;</span>); <span class="comment">% Construct the destination path</span></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                        <span class="comment">% Attempt to copy the file or folder</span></span><br><span class="line">                        copyfile([path path1], destinationPath);</span><br><span class="line"><span class="comment">%                         msgbox(&#x27;Copy successful!&#x27;, &#x27;Success&#x27;);</span></span><br><span class="line">                    <span class="keyword">catch</span></span><br><span class="line">                        errordlg(<span class="string">&#x27;Failed to copy the selected file/folder.&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                errordlg(<span class="string">&#x27;The selected cell does not contain a valid file/folder path.&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openFolderPathAction</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">% Open user&#x27;s home directory for demonstration. Replace this path with</span></span><br><span class="line">        <span class="comment">% the one you&#x27;d like to open based on your application&#x27;s logic.</span></span><br><span class="line">        <span class="keyword">if</span> ispc</span><br><span class="line">            folderPath = getenv(<span class="string">&#x27;USERPROFILE&#x27;</span>); <span class="comment">% Works on Windows;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            folderPath = getenv(<span class="string">&#x27;HOME&#x27;</span>);<span class="comment">% on Linux/Mac</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> isfolder(folderPath)</span><br><span class="line">            <span class="comment">% Open the folder</span></span><br><span class="line">            web([<span class="string">&#x27;file:///&#x27;</span>, path], <span class="string">&#x27;-browser&#x27;</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%     function showPropertiesAction(jTable)</span></span><br><span class="line"><span class="comment">%         % Get selected cell info</span></span><br><span class="line"><span class="comment">%         row = jTable.getSelectedRow() + 1;</span></span><br><span class="line"><span class="comment">%         col = jTable.getSelectedColumn() + 1;</span></span><br><span class="line"><span class="comment">%         if row &gt; 0 &amp;&amp; col &gt; 0</span></span><br><span class="line"><span class="comment">%             dataModel = jTable.getModel();</span></span><br><span class="line"><span class="comment">%             value = dataModel.getValueAt(row - 1, col - 1); % Java is 0-based</span></span><br><span class="line"><span class="comment">%             % Display properties</span></span><br><span class="line"><span class="comment">%             msgbox(sprintf(&#x27;Row: %d\nColumn: %d\nValue: %s&#x27;, row, col, num2str(value)), &#x27;Cell Properties&#x27;);</span></span><br><span class="line"><span class="comment">%         end</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open_file</span><span class="params">(~, ~)</span></span></span><br><span class="line">        selected_index = get(table_data, <span class="string">&#x27;UserData&#x27;</span>);</span><br><span class="line">        selected_index2 = get(table_dataFilter, <span class="string">&#x27;UserData&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(selected_index)</span><br><span class="line">            <span class="comment">% Get the file path of the selected row</span></span><br><span class="line">            file_path = table_data.Data&#123;selected_index, <span class="number">5</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> ispc</span><br><span class="line">                winopen(file_path);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                system([<span class="string">&#x27;open &#x27;</span>, file_path]); <span class="comment">% For macOS and Linux</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> ~<span class="built_in">isempty</span>(selected_index2)</span><br><span class="line">             file_path = pathIndex&#123;selected_index2&#125;;</span><br><span class="line">                [~, ~, ext] = fileparts(file_path);</span><br><span class="line">                lineNumber = line_number(selected_index2);</span><br><span class="line">                <span class="keyword">if</span> strcmp(ext, <span class="string">&#x27;.m&#x27;</span>)</span><br><span class="line">                    edit(file_path);</span><br><span class="line">                    pause(<span class="number">0.1</span>); <span class="comment">% Wait for the file to open</span></span><br><span class="line">                    matlab.desktop.editor.getActive().goToLine(lineNumber);</span><br><span class="line">                <span class="keyword">elseif</span> strcmp(ext, <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">                    open(file_path);</span><br><span class="line">                    pause(<span class="number">0.1</span>); <span class="comment">% Wait for the file to open</span></span><br><span class="line">                    com.mathworks.mde.editor.EditorUtils.scrollToLine(lineNumber);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">% No file selected</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mb</span> = <span class="title">bytes2mb</span><span class="params">(bytes)</span></span></span><br><span class="line">    <span class="comment">% Convert bytes to megabytes</span></span><br><span class="line">    mb = bytes / (<span class="number">1024</span> ^ <span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Matlab graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex Tips</title>
    <url>/2023/08/08/Tips/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Using-braces-to-label-parts-of-an-equation"><a href="#Using-braces-to-label-parts-of-an-equation" class="headerlink" title="Using braces to label parts of an equation"></a>Using braces to label parts of an equation</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\[</span><span class="keyword">\Theta</span><span class="built_in">^</span>+ = <span class="keyword">\underbrace</span>&#123;<span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>&#123;z<span class="built_in">_</span>&#123;crit&#125;<span class="built_in">^</span>+&#125;<span class="keyword">\frac</span>&#123;dz<span class="built_in">^</span>+&#125;&#123;1/Pr +<span class="keyword">\alpha</span><span class="built_in">_</span>t/<span class="keyword">\nu</span>&#125;&#125;<span class="built_in">_</span>&#123;<span class="keyword">\Romannum</span>&#123;1&#125;&#125; + <span class="keyword">\underbrace</span>&#123;<span class="keyword">\int</span><span class="built_in">_</span>&#123;z<span class="built_in">_</span>&#123;crit&#125;<span class="built_in">^</span>+&#125;<span class="built_in">^</span>&#123;z<span class="built_in">^</span>+&#125;<span class="keyword">\frac</span>&#123;dz<span class="built_in">^</span>+&#125;&#123;1/Pr +<span class="keyword">\alpha</span><span class="built_in">_</span>t/<span class="keyword">\nu</span>&#125;&#125;<span class="built_in">_</span>&#123;<span class="keyword">\Romannum</span>&#123;2&#125;&#125;<span class="keyword">\]</span></span><br></pre></td></tr></table></figure>

<figure>
    <img src="/2023/08/08/Tips/underbrace.png" style="width:400px; text-align:center" alt="underbrace type" title="title">
</figure>


<span id="more"></span> 


<h3 id="Get-Roman-numerals-in-text"><a href="#Get-Roman-numerals-in-text" class="headerlink" title="Get Roman numerals in text"></a>Get Roman numerals in text</h3><ol>
<li><p>install the package of “romannum”</p>
</li>
<li><p>type <code>\usepackage&#123;romannum&#125;</code>in the text</p>
</li>
<li><p><code>\romannum&#123;1&#125;</code> for Lowercase roman numbers or <code>\Romannum&#123;1&#125;</code> for Uppercase roman numbers</p>
</li>
</ol>
<h3 id="Setting-‘Fill-Anywhere’-command-in-Latexing-package-in-Sublime"><a href="#Setting-‘Fill-Anywhere’-command-in-Latexing-package-in-Sublime" class="headerlink" title="Setting  ‘Fill Anywhere’  command in Latexing package  in Sublime"></a>Setting  ‘Fill Anywhere’  command in Latexing package  in Sublime</h3><p>The fill anywhere command is providing the <strong>filling</strong> that a drop down menu will let you choose what you would like to do at the current selection. For example it could be required to fill a image path somewhere else then just the normal <code>\includegraphics</code> command. The fill anywhere command is available for <code>\include</code>, <code>\input</code>, <code>\subfile</code>. <code>\includegraphics</code>, <code>\ref</code>, <code>\cite</code>, and <code>\ac</code> commands and there mutations like usual.</p>
<p>It is suggested to set the key binding as follows to make it handy.</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       &quot;keys&quot;: [&quot;ctrl+shift+alt+z&quot;],</span><br><span class="line">       &quot;command&quot;: &quot;ltx<span class="built_in">_</span>fill<span class="built_in">_</span>anywhere&quot;,</span><br><span class="line">       &quot;context&quot;: [</span><br><span class="line">           &#123;&quot;key&quot;: &quot;selection<span class="built_in">_</span>empty&quot;, &quot;match<span class="built_in">_</span>all&quot;: true, &quot;operand&quot;: true, &quot;operator&quot;: &quot;equal&quot;&#125;,</span><br><span class="line">           &#123;&quot;key&quot;: &quot;selector&quot;, &quot;operand&quot;: &quot;text.tex.latex&quot;, &quot;operator&quot;: &quot;equal&quot;&#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Two-statements-using-curly-brace-in-an-equation"><a href="#Two-statements-using-curly-brace-in-an-equation" class="headerlink" title="Two statements using curly brace in an equation"></a>Two statements using curly brace in an equation</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">  f(x)=<span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">    1, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;if <span class="built_in">$</span>x&lt;0<span class="built_in">$</span>&#125;.<span class="keyword">\\</span></span><br><span class="line">    0, <span class="built_in">&amp;</span> <span class="keyword">\text</span>&#123;otherwise&#125;.</span><br><span class="line">  <span class="keyword">\end</span>&#123;cases&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<figure>
    <img src="/2023/08/08/Tips/eqn1.png" style="width:400px; text-align:center" alt="equation format" title="title">
</figure>



<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">This is your only binary choices</span><br><span class="line"><span class="keyword">\begin</span>&#123;math&#125;</span><br><span class="line">  <span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line">    <span class="keyword">\begin</span>&#123;array&#125;&#123;l&#125;</span><br><span class="line">      0<span class="keyword">\\</span></span><br><span class="line">      1</span><br><span class="line">    <span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line">  <span class="keyword">\right</span>.</span><br><span class="line"><span class="keyword">\end</span>&#123;math&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<figure>
    <img src="/2023/08/08/Tips/eqn2.png" style="width:400px; text-align:center" alt="equation format 2" title="title">
</figure>

<h3 id="Get-information-of-LaTex-template-through-command"><a href="#Get-information-of-LaTex-template-through-command" class="headerlink" title="Get information of LaTex template through command"></a>Get information of LaTex template through command</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\makeatletter</span></span><br><span class="line"><span class="keyword">\newcommand</span><span class="keyword">\thefont</span>&#123;<span class="keyword">\expandafter</span><span class="keyword">\string</span><span class="keyword">\the</span><span class="keyword">\font</span>&#125;</span><br><span class="line"><span class="keyword">\makeatother</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\thefont</span> <span class="comment">% check all attributes of font</span></span><br><span class="line"><span class="keyword">\the</span><span class="keyword">\columnwidth</span> <span class="comment">% check column width</span></span><br><span class="line"><span class="keyword">\the</span><span class="keyword">\textwidth</span>   <span class="comment">% check text width</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Create-a-shortcut-to-the-snippet-palette-in-Sublime-Text-3"><a href="#Create-a-shortcut-to-the-snippet-palette-in-Sublime-Text-3" class="headerlink" title="Create a shortcut to the snippet palette in Sublime Text 3"></a>Create a shortcut to the snippet palette in Sublime Text 3</h3><p>add following snippet code in <em>Preferences:Key Bindings - User</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="string">&quot;keys&quot;</span>: [<span class="string">&quot;ctrl+y&quot;</span>], </span><br><span class="line">        <span class="string">&quot;command&quot;</span>: <span class="string">&quot;show_overlay&quot;</span>, </span><br><span class="line">        <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;overlay&quot;</span>: <span class="string">&quot;command_palette&quot;</span>, </span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Snippet: &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="Sublime-Text-3-LaTexTools-configuration-under-Windows"><a href="#Sublime-Text-3-LaTexTools-configuration-under-Windows" class="headerlink" title="Sublime Text 3 LaTexTools configuration under Windows"></a>Sublime Text 3 LaTexTools configuration under Windows</h3><p>The path must include &#96;ghostscript’ to execute <strong>epstopdf</strong>. Here the path is<br>  <em>C:\texlive\2020\tlpkg\tlgs\bin</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;windows&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// Path used when invoking tex &amp; friends; &quot;&quot; is fine for MiKTeX</span></span><br><span class="line">        <span class="comment">// For TeXlive 2011 (or other years) use</span></span><br><span class="line">         <span class="string">&quot;texpath&quot;</span> : <span class="string">&quot;C:\\texlive\\2020\\bin\\win32;C:\\texlive\\2020\\tlpkg\\tlgs\\bin;$PATH&quot;</span>,</span><br><span class="line">         <span class="comment">// C:\\texlive\\2020\\tlpkg\\tlgs\\bin offer ghostgraphics path</span></span><br><span class="line">        <span class="comment">// &quot;texpath&quot; : &quot;C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64;PATH&quot;,</span></span><br><span class="line">        <span class="comment">// TeX distro: &quot;miktex&quot; or &quot;texlive&quot;</span></span><br><span class="line">        <span class="comment">//&quot;distro&quot; : &quot;miktex&quot;,</span></span><br><span class="line">        <span class="string">&quot;distro&quot;</span> : <span class="string">&quot;texlive&quot;</span>,</span><br><span class="line">        <span class="comment">// Command to invoke Sumatra. If blank, &quot;SumatraPDF.exe&quot; is used (it has to be on your PATH)</span></span><br><span class="line">        <span class="string">&quot;sumatra&quot;</span>: <span class="string">&quot;C:\\Program Files\\SumatraPDF\\SumatraPDF.exe&quot;</span>, </span><br><span class="line">        <span class="comment">// Command to invoke Sublime Text. Used if the keep_focus toggle is true.</span></span><br><span class="line">        <span class="comment">// If blank, &quot;subl.exe&quot; or &quot;sublime_text.exe&quot; will be used.</span></span><br><span class="line">        <span class="string">&quot;sublime_executable&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="comment">// how long (in seconds) to wait after the jump_to_pdf command completes</span></span><br><span class="line">        <span class="comment">// before switching focus back to Sublime Text. This may need to be</span></span><br><span class="line">        <span class="comment">// adjusted depending on your machine and configuration.</span></span><br><span class="line">        <span class="string">&quot;keep_focus_delay&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="Striketrhough-in-LaTex"><a href="#Striketrhough-in-LaTex" class="headerlink" title="Striketrhough in LaTex"></a>Striketrhough in LaTex</h3><p><em>\usepackage[normalem]{ulem}</em> in the preamble </p>
<ol>
<li>\sout{text to be striked out} for a horizontal line through text to be striked out </li>
<li>\xout{text to be crossed out} for many short diagonal lines crossing out the letters of the text to be crossed out</li>
</ol>
<h3 id="customise-your-own-symbol-in-latex-with-TIKZ"><a href="#customise-your-own-symbol-in-latex-with-TIKZ" class="headerlink" title="customise your own symbol in latex with TIKZ"></a>customise your own symbol in latex with TIKZ</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;tikz&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;shapes.geometric&#125;</span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\strikeddowntriangleFilled</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\fill</span>[line width = <span class="params">#1</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (triangle.west) -- (triangle.east);</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125; <span class="comment">% this generates a filled symbol with strikethrough line </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\newcommand</span>&#123;<span class="keyword">\dcircle</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[line width=<span class="params">#1</span>]</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt,circle,minimum size=0.55em,draw] (circle) &#123;&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125; <span class="comment">% draw a circle with comparable size of font. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\crossdefined</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (cross) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,0) -- (0.3525em,-0.3525em);</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,-0.3525em) -- (0.3525em,0);</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\plusdefined</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (plus) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0,0) -- (0.50em,0);</span><br><span class="line">    <span class="keyword">\draw</span>[line width=<span class="params">#1</span>] (0.275em,0.275em) -- (0.275em,-0.275em);</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\filldowntriangle</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[fill=<span class="params">#1</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,-0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\filluptriangle</span>&#125;[1]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\draw</span>[fill=<span class="params">#1</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\DeclareRobustCommand</span>&#123;<span class="keyword">\uptriangle</span>&#125;[2]&#123;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\node</span>[inner sep=0pt] (triangle) at (0,0) &#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;</span><br><span class="line">    <span class="keyword">\fill</span>[line width = <span class="params">#1</span>,color = <span class="params">#2</span>,fill = none,draw = <span class="params">#2</span>] (0,0) -- ++(0.55em,0) -- ++(-0.275em,0.55em) -- cycle;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="add-logo-in-the-beamer"><a href="#add-logo-in-the-beamer" class="headerlink" title="add logo in the beamer"></a>add logo in the beamer</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setbeamertemplate</span>&#123;frametitle&#125;&#123;<span class="keyword">\vspace</span>&#123;6pt&#125;<span class="keyword">\hspace</span>&#123;-5pt&#125;<span class="keyword">\textbf</span>&#123;<span class="keyword">\insertframetitle</span>&#125; <span class="keyword">\hspace</span>*&#123;<span class="keyword">\fill</span>&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tikzpicture&#125;[remember picture, overlay]</span><br><span class="line"><span class="keyword">\node</span> [inner sep=0pt,</span><br><span class="line">       <span class="comment">%xshift=-..., yshift=-...   % if you like to shift the image out of corner</span></span><br><span class="line">       below left] </span><br><span class="line">    at (current page.north east) &#123;<span class="keyword">\includegraphics</span>[height=0.12<span class="keyword">\paperheight</span>]&#123;unimelb-logo.png&#125;&#125;;</span><br><span class="line">    <span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line"><span class="keyword">\hspace</span>&#123;0pt&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="using-96-biblatex’-to-insert-reference"><a href="#using-96-biblatex’-to-insert-reference" class="headerlink" title="using &#96;biblatex’ to insert reference"></a>using &#96;biblatex’ to insert reference</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">\usepackage</span>[american]&#123;babel&#125;</span><br><span class="line">  <span class="keyword">\usepackage</span>[utf8]&#123;inputenc&#125;</span><br><span class="line">  <span class="keyword">\usepackage</span>&#123;csquotes&#125;</span><br><span class="line">  <span class="keyword">\usepackage</span>[backend=biber,style=apa,natbib=true,sorting = ynt,sortcites = true, maxcitenames = 2, date = year, uniquename=false, uniquelist=false]&#123;biblatex&#125;</span><br><span class="line">  <span class="keyword">\DeclareLanguageMapping</span>&#123;american&#125;&#123;american-apa&#125;</span><br><span class="line">  <span class="keyword">\DeclareFieldFormat</span>&#123;doi&#125;&#123;&#125;</span><br><span class="line">  <span class="keyword">\DeclareFieldFormat</span>&#123;url&#125;&#123;&#125;</span><br><span class="line">  <span class="keyword">\DeclareFieldFormat</span>&#123;issn&#125;&#123;&#125;</span><br><span class="line">  <span class="keyword">\DeclareFieldFormat</span>&#123;urldate&#125;&#123;&#125;</span><br><span class="line">  <span class="keyword">\DeclareFieldFormat</span>&#123;version&#125;&#123;&#125;</span><br><span class="line">  <span class="keyword">\renewbibmacro</span>*&#123;doi+url+urldate+issn+version&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">\addbibresource</span>&#123;referenceBitex.bib&#125; </span><br><span class="line"><span class="comment">% Make the journaltitle field a hyperlink</span></span><br><span class="line"><span class="keyword">\DeclareFieldFormat</span>[article]&#123;journaltitle&#125;&#123;<span class="keyword">\href</span>&#123;<span class="link">\thefield&#123;url&#125;</span>&#125;&#123;<span class="keyword">\textnormal</span>&#123;<span class="params">#1</span>&#125;&#125;&#125;</span><br><span class="line"><span class="comment">% Remove quotation marks around titles of papers</span></span><br><span class="line"><span class="keyword">\DeclareFieldFormat</span>[article]&#123;title&#125;&#123;<span class="params">#1</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="using-package-cleveref"><a href="#using-package-cleveref" class="headerlink" title="using package cleveref"></a>using package <code>cleveref</code></h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[capitalize]&#123;cleveref&#125; </span><br><span class="line"><span class="keyword">\crefname</span>&#123;chapter&#125;&#123;Chapter&#125;&#123;Chapters&#125;</span><br><span class="line"><span class="keyword">\crefname</span>&#123;section&#125;&#123;Section&#125;&#123;Sections&#125;</span><br><span class="line"><span class="keyword">\AtBeginEnvironment</span>&#123;appendices&#125;&#123;<span class="keyword">\crefalias</span>&#123;chapter&#125;&#123;appendix&#125;&#125;</span><br><span class="line"><span class="keyword">\crefname</span>&#123;figure&#125;&#123;Figure&#125;&#123;Figures&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="add-footnotemark-in-table-environment"><a href="#add-footnotemark-in-table-environment" class="headerlink" title="add footnotemark in table environment"></a>add footnotemark in table environment</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[!t]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">   <span class="keyword">\begin</span>&#123;threeparttable&#125; <span class="comment">% Start threeparttable environment</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;<span class="comment">%</span></span><br><span class="line">    Dual-wire sensors&#x27; dimension. </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;tab:dual<span class="built_in">_</span>wireDimension&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabular&#125;&#123;cccccccc&#125;</span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    <span class="built_in">$</span><span class="keyword">\alpha</span><span class="built_in">_</span>&#123;&#123;p&#125;&#125;<span class="built_in">$</span> <span class="built_in">&amp;</span>  <span class="built_in">$</span>d<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;hw&#125;<span class="built_in">$</span><span class="keyword">\tnote</span>&#123;*&#125;  <span class="built_in">&amp;</span> <span class="built_in">$</span>d<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;cw&#125;<span class="built_in">$</span><span class="keyword">\tnote</span>&#123;*&#125;   <span class="built_in">&amp;</span>   <span class="built_in">$</span>l<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;hw&#125;<span class="built_in">$</span> <span class="built_in">&amp;</span> <span class="built_in">$</span>l<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;cw&#125;<span class="built_in">$</span> <span class="built_in">&amp;</span>  <span class="built_in">$</span>L<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;hw&#125;<span class="built_in">$</span> <span class="built_in">&amp;</span> <span class="built_in">$</span>L<span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;cw&#125;<span class="built_in">$</span> <span class="built_in">&amp;</span> <span class="built_in">$</span><span class="keyword">\Delta</span> x<span class="built_in">$</span> <span class="keyword">\\</span></span><br><span class="line">     (deg)         <span class="built_in">&amp;</span>  (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;<span class="keyword">\upmu</span> m&#125;<span class="built_in">$</span>)  <span class="built_in">&amp;</span> (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;<span class="keyword">\upmu</span> m&#125;<span class="built_in">$</span>) <span class="built_in">&amp;</span>  (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;mm&#125;<span class="built_in">$</span>) <span class="built_in">&amp;</span> (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;mm&#125;<span class="built_in">$</span>) <span class="built_in">&amp;</span> (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;mm&#125;<span class="built_in">$</span>) <span class="built_in">&amp;</span> (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;mm&#125;<span class="built_in">$</span>) <span class="built_in">&amp;</span> (<span class="built_in">$</span><span class="keyword">\mathrm</span>&#123;mm&#125;<span class="built_in">$</span>) <span class="keyword">\\</span></span><br><span class="line">    <span class="built_in">$</span>10<span class="built_in">$</span>           <span class="built_in">&amp;</span>        5.0             <span class="built_in">&amp;</span> 1.5                  <span class="built_in">&amp;</span>     1.36         <span class="built_in">&amp;</span>  1.37           <span class="built_in">&amp;</span>       2.0       <span class="built_in">&amp;</span> 3.3            <span class="built_in">&amp;</span> 1.6    <span class="keyword">\\</span></span><br><span class="line">    <span class="built_in">$</span>25<span class="built_in">$</span>           <span class="built_in">&amp;</span>        5.0             <span class="built_in">&amp;</span> 1.5                  <span class="built_in">&amp;</span>     1.32         <span class="built_in">&amp;</span>  1.36           <span class="built_in">&amp;</span>       1.9       <span class="built_in">&amp;</span> 3.0            <span class="built_in">&amp;</span> 1.9    <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">     <span class="keyword">\begin</span>&#123;tablenotes&#125;[flushleft] <span class="comment">% Start tablenotes environment with flushleft option</span></span><br><span class="line">            <span class="keyword">\item</span>[<span class="keyword">\textsuperscript</span>&#123;*&#125;] The subscript <span class="built_in">$</span><span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;hw&#125;<span class="built_in">$</span> and <span class="built_in">$</span><span class="built_in">_</span><span class="keyword">\mathrm</span>&#123;cw&#125;<span class="built_in">$</span> denotes the quantity of hot-wire and cold-wire, respectively.</span><br><span class="line">        <span class="keyword">\end</span>&#123;tablenotes&#125; <span class="comment">% End tablenotes environment</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;threeparttable&#125; <span class="comment">% End threeparttable environment    </span></span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure>




]]></content>
  </entry>
  <entry>
    <title>PowerPoint</title>
    <url>/2020/06/01/Powerpoint/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Before presentation, slides have to be prepared to deliver your ideas more precisely. One of things in the process of making slides is to add pictures in your case.</p>
<p> It is annoying to do this work from your storage if have a large number of pictures added. Here, we introduce a good way to establish connection between PowerPoint and Matlab  to help us import images quickly.</p>
<span id="more"></span> 

<p><a href="https://github.com/stefslon/exportToPPTX"><strong>exportToPPTX</strong></a>  allows user to create PowrPoint files without using COM-objects automation.</p>
<p>The example of  code is shown below.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% Open a slide named &#x27;example.PPTX&#x27; </span></span><br><span class="line">exportToPPTX(<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line"><span class="comment">%% Add images in a new slide</span></span><br><span class="line">slideId     = exportToPPTX(<span class="string">&#x27;addslide&#x27;</span>);</span><br><span class="line"><span class="comment">% Upper left corner picture with a blue frame inserted via figure handle</span></span><br><span class="line">load earth; <span class="built_in">figure</span>(<span class="string">&#x27;Renderer&#x27;</span>,<span class="string">&#x27;zbuffer&#x27;</span>); image(X); colormap(map); axis off;</span><br><span class="line">exportToPPTX(<span class="string">&#x27;addpicture&#x27;</span>,gcf,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span>],<span class="string">&#x27;EdgeColor&#x27;</span>,[<span class="number">0</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">3</span>); <span class="comment">%</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Git notes</title>
    <url>/2020/02/14/Git-notes/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ul>
<li><p><input disabled type="checkbox"> 
Fatal: refusing to merge unrelated histories</p>
<p>using “git merge” that allows merging two branches(e.g. remote branches and local branches) that have no common base by default.</p>
 <span id="more"></span> 

<p><strong>git merge –allow-unrelated-histories</strong> to force the merge to happen</p>
</li>
<li><p><input disabled type="checkbox"> 
Undo changes &#x2F; used for operate wrongly<br>  “git reset” has three primary forms of invocation. –soft, –mixed, –hard.<br>  git reset is similar in behavior to git checkout, where git checkout solely operates on the HEAD of ref pointer, however, git reset will move the HEAD ref pointer and the current branch ref pointer.</p>
<figure>
  <img src="/2020/02/14/Git-notes/git-sequence-transparent1.png" style="width:400px; text-align:center" alt="commits on the master branch" title="title">
  <figcaption><p style="text-align:center">example of a sequence of commits</p></figcaption>
</figure>
git checkout b
<figure>
  <img src="/2020/02/14/Git-notes/git-checkout-transparent2.png" style="width:400px; text-align:center" alt="git checkout b" title="title2">
</figure>
git reset b
<figure>
  <img src="/2020/02/14/Git-notes/git-checkout-transparent3.png" style="width:300px; text-align:center" alt="git reset b" title="title3">
</figure></li>
</ul>
<h3 id="Main-options"><a href="#Main-options" class="headerlink" title="Main options"></a>Main options</h3><h4 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h4><p>the most direct, <em>DANGEROUS</em>, and frequently used option</p>
<h4 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h4><p>the stagin index is reset to the state of the specified commit</p>
<h4 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h4><p>head in the commit History can change</p>
<figure>
    <img src="/2020/02/14/Git-notes/option.png" style="width:400px; text-align:center" alt="git reset b" title="title3">
</figure>
]]></content>
  </entry>
  <entry>
    <title>Research Assistant - Zotero</title>
    <url>/2020/02/14/Zotero/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>科研的旅途中，需要阅读大量的论文，海量的论文无疑使得管理文献的工作变得非常复杂，尤其是因为命名方法的不恰当，导致后期再次阅读时查找困难。我看到部分学者喜欢使用<strong>author</strong>,<strong>year</strong>,<strong>title</strong>的组合方式命名文献如下图，然后存储至一固定文件夹中，以此管理文献。</p>
 <span id="more"></span> 

<p>这样的方式固然方便，但同时文件名中所含的信息太少，当论文过多时，在搜索时极易引起混乱，因此不利于管理。</p>
<p><img src="/2020/02/14/Zotero/Annotation.png" alt="Annotation"></p>
<p>如今，各类文献管理软件的兴起，如<a href="https://www-mendeley-com.ezp.lib.unimelb.edu.au/?interaction_required=true">Mendeley</a>，<a href="https://endnote.com/">Endnote</a>，<a href="https://www.zotero.org/">Zotero</a> 以及国产软件<a href="http://www.inoteexpress.com/index.htm">NoteExpress</a>等，使得论文管理有了一个比较好的提升。笔者目前使用较多是<strong>Zotero</strong>，这里着重介绍这一软件的入门使用，其中包括笔者文章引用过程中的一些小技巧以及如何结合<strong>Latex</strong>快速生成论文的参考文献。</p>
<h2 id="Zotero的安装"><a href="#Zotero的安装" class="headerlink" title="Zotero的安装"></a>Zotero的安装</h2><p><a href="https://www.zotero.org/">Zotero</a> 安装完成后，推荐注册，方便在云端同步文献库。通过<strong>Edit</strong>&gt;&gt;<strong>Preferences</strong>&gt;&gt;<strong>Sync</strong> 确认是否登录。考虑到软件仅免费提供约100MB的空间，所以建议取消<em>Sync full-text context</em>选项， 这样不会同步全文，节省空间。完成这一步后，如果使用firefox 浏览器，可以安装相应的插件便于以后的文献插入。</p>
<h2 id="Zotero的文献导入"><a href="#Zotero的文献导入" class="headerlink" title="Zotero的文献导入"></a>Zotero的文献导入</h2><p>Zotero的文献导入途径很多，经过笔者多年的测试，推荐使用以下方法。简单来说是<em>google scholar</em> + <em>firefox</em>结合。</p>
<p>通过google scholar等途径可获取文献网址数据库(如springer, Elsevier等)后，可进入下载页面，如下图所示。</p>
<figure>
    <img src="/2020/02/14/Zotero/paper_title.png" style="width:500px; text-align:center" alt="git reset b" title="title">
</figure>
点击 <u>download</u> 可进入下载页面，此时会发现zotero在firefox上的对应插件已经点亮，点击后，即发现参考文献已经导入Zotero软件中。 如果没有下载权限，也可点击<u>Export</u>，选择对应的文献管理软件即可。这里需要说明的是 Endnote 和 Mendeley 使用人数较多，所以很多数据库通常会默认选择这两个软件所支持的参考文献格式如Ref, Ris 等。但Zotero几乎支持上述所有的格式，所以任意选择一个即可。浏览器插件会自动检测是否需要导入参考文献。

<h2 id="Zotero导出BibTex"><a href="#Zotero导出BibTex" class="headerlink" title="Zotero导出BibTex"></a>Zotero导出BibTex</h2><p><strong>Microsoft Word</strong>, <strong>Libre Office</strong> 可以通过插件使用 Zotero，具体方法请参照官网，这里不在做详细说明。鉴于排版的需求，建议使用Latex编辑论文。这里介绍两种方法导出BibTex文件。</p>
<h3 id="直接导入"><a href="#直接导入" class="headerlink" title="直接导入"></a>直接导入</h3><ol>
<li>选择需要导入的文献， <strong>Ctrl</strong>+左键，可选择多个文献.</li>
<li>右击已选择的项目并选择 ‘Export Items’.</li>
<li>改变输出格式为 ‘BibLaTex’ 或者 ‘BibTex’.</li>
<li>保持默认选项或者使得 ‘Export Notes’被选择.</li>
<li>点击Ok，即可生成 ‘.bib’ 文件.</li>
</ol>
<h3 id="使用Better-BibTex插件导入"><a href="#使用Better-BibTex插件导入" class="headerlink" title="使用Better BibTex插件导入"></a>使用Better BibTex插件导入</h3><p><a href="https://retorque.re/zotero-better-bibtex/installation/">Better BibTex</a> 使得 ‘.bib’文件保持与Zotero数据库的同步更新，并且便于使用定制的<strong>Citation Key</strong> 。使用方法，可参考<a href="https://guides.library.iit.edu/c.php?g=720120&p=6296986">https://guides.library.iit.edu/c.php?g=720120&amp;p=6296986</a> </p>
<h4 id="改变Better-BibTex-Export"><a href="#改变Better-BibTex-Export" class="headerlink" title="改变Better BibTex Export"></a>改变Better BibTex Export</h4><p>有时为了保持文献格式的一致性，我们需要省略参考文献中的一些内容比如urldate, issue 等等<br>具体可以在Better BibTex <strong>setting</strong> 里面 修改 Export -&gt; Fields -&gt; Fields to omit from export (comma-separated) <code>abstract,file,urldate,editor,issue,extra,doi,issn,number</code></p>
]]></content>
      <categories>
        <category>research</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/04/hello-world/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
 <span id="more"></span> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Inkscape Tricks</title>
    <url>/2020/01/20/Inkscape_Tricks/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Some tricks are listed in the following to help get speed up with this software.</p>
 <span id="more"></span> 

<h2 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h2><p>由于inkscape没有直接的剪切功能，这里提供一种简单的方式仅供参考。</p>
<ol>
<li>选择你想剪切的图片(object 1)，并使用group功能，在菜单中选择 <em>Object &gt; Group</em> 。</li>
<li>在刚选择的group上，画一个想要剪切的图形(如矩形，圆等)，object 2。</li>
<li>选择object 1 and object 2，点击 <em>Object &gt; Clip &gt; set</em></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>仅用于测试</title>
    <url>/2020/01/19/%E4%BB%85%E7%94%A8%E4%BA%8E%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>大家好，这是我的第一篇blog.</p>
]]></content>
  </entry>
</search>
